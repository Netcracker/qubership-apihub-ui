{"version":3,"file":"AddSystemAdministratorDialog.stories-2b855a15.js","sources":["../../packages/shared/src/components/AddSystemAdministratorDialog.tsx"],"sourcesContent":["/**\n * Copyright 2024-2025 NetCracker Technology Corporation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport SearchOutlinedIcon from '@mui/icons-material/SearchOutlined'\nimport { LoadingButton } from '@mui/lab'\nimport {\n  Autocomplete,\n  Box,\n  Button,\n  CircularProgress,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  ListItem,\n  TextField,\n} from '@mui/material'\nimport type { FC } from 'react'\nimport React, { memo, useCallback, useEffect, useState } from 'react'\nimport { Controller, useForm } from 'react-hook-form'\nimport { useDebounce } from 'react-use'\nimport ErrorOutlinedIcon from '@mui/icons-material/ErrorOutlined'\nimport type { PopupProps } from './PopupDelegate'\nimport { PopupDelegate } from './PopupDelegate'\nimport { DialogForm } from './DialogForm'\nimport { UserAvatar } from './Users/UserAvatar'\nimport type { User } from '../types/user'\nimport type { Key } from '../entities/keys'\nimport { DEFAULT_DEBOUNCE } from '../utils/constants'\n\nexport type AddSystemAdministratorDialogProps = {\n  users: User[] | undefined\n  isUsersDataLoading: boolean\n  onConfirm: (userId: Key) => void\n  setUserSearch: (search: string) => void\n}\n\nexport const SHOW_ADD_SYSTEM_ADMINISTRATOR_DIALOG = 'show-add-system-administrator-dialog'\n\nexport const AddSystemAdministratorDialog: FC<AddSystemAdministratorDialogProps> = memo(({\n  users,\n  isUsersDataLoading,\n  onConfirm,\n  setUserSearch,\n}) => {\n  return (\n    <PopupDelegate\n      type={SHOW_ADD_SYSTEM_ADMINISTRATOR_DIALOG}\n      render={props =>\n        <AddSystemAdministratorPopup\n          {...props}\n          users={users}\n          onConfirm={onConfirm}\n          isUsersDataLoading={isUsersDataLoading}\n          setUserSearch={setUserSearch}\n        />\n      }\n    />\n  )\n})\n\ntype AddSystemAdministratorPopupProps = PopupProps & AddSystemAdministratorDialogProps\n\ntype AddSystemAdministratorForm = {\n  user: User\n}\n\n// First Order Component\nexport const AddSystemAdministratorPopup: FC<AddSystemAdministratorPopupProps> = memo<AddSystemAdministratorPopupProps>(({\n  open,\n  setOpen,\n  users,\n  isUsersDataLoading,\n  setUserSearch,\n  onConfirm,\n}) => {\n  const { handleSubmit, control, reset, formState: { errors } } = useForm<AddSystemAdministratorForm>()\n  const [searchValue, setSearchValue] = useState('')\n\n  useEffect(() => {\n    if (!open) {\n      reset()\n    }\n  }, [open, reset])\n\n  useDebounce(() => setUserSearch(searchValue), DEFAULT_DEBOUNCE, [searchValue])\n\n  const onConfirmCallback = useCallback(\n    (formData: AddSystemAdministratorForm): void => {\n      const { user } = formData\n      onConfirm(user.key)\n      setOpen(false)\n    },\n    [onConfirm, setOpen],\n  )\n\n  return (\n    <DialogForm\n      open={open}\n      onClose={() => setOpen(false)}\n      onSubmit={handleSubmit(onConfirmCallback)}\n    >\n      <DialogTitle>\n        Add User\n      </DialogTitle>\n      <DialogContent>\n        <Controller\n          name=\"user\"\n          rules={{\n            required: 'The field must be filled',\n          }}\n          control={control}\n          render={({ field: { value, onChange } }) => (\n            <Autocomplete\n              sx={POPUP_INDICATOR_STYLE}\n              value={value}\n              loading={isUsersDataLoading}\n              loadingText={<CircularProgress size={16}/>}\n              options={users ?? []}\n              popupIcon={\n                <Box display=\"flex\" gap={1} alignItems=\"center\">\n                  <SearchOutlinedIcon sx={ICON_STYLE}/>\n                  {errors.user && <ErrorOutlinedIcon color=\"error\"/>}\n                </Box>\n              }\n              forcePopupIcon={true}\n              getOptionLabel={(option) => option.name}\n              onChange={(_, value) => onChange(value)}\n              renderOption={(props, { name, avatarUrl }) => {\n                return (\n                  <ListItem {...props} key={name}>\n                    <Box sx={{ pr: '6px' }}>\n                      <UserAvatar\n                        name={name}\n                        src={avatarUrl}\n                        size=\"small\"\n                      />\n                    </Box>\n                    {name}\n                  </ListItem>\n                )\n              }}\n              renderInput={(params) =>\n                <TextField\n                  {...params}\n                  sx={{ mt: '4px', mb: '12px' }}\n                  label=\"User\"\n                  onChange={(event) => setSearchValue(event?.target?.value ?? '')}\n                  error={!!errors.user}\n                  helperText={errors.user?.message}\n                />\n              }\n            />\n          )}\n        />\n      </DialogContent>\n      <DialogActions>\n        <LoadingButton variant=\"contained\" type=\"submit\" loading={false}>\n          Add\n        </LoadingButton>\n        <Button variant=\"outlined\" onClick={() => setOpen(false)}>\n          Cancel\n        </Button>\n      </DialogActions>\n    </DialogForm>\n  )\n})\n\nconst ICON_STYLE = {\n  fontSize: '20px',\n  color: '#626D82',\n}\n\nconst POPUP_INDICATOR_STYLE = {\n  '& .MuiAutocomplete-popupIndicator': {\n    transform: 'none',\n  },\n}\n"],"names":["SHOW_ADD_SYSTEM_ADMINISTRATOR_DIALOG","AddSystemAdministratorDialog","memo","users","isUsersDataLoading","onConfirm","setUserSearch","jsx","PopupDelegate","props","AddSystemAdministratorPopup","open","setOpen","handleSubmit","control","reset","errors","useForm","searchValue","setSearchValue","useState","useEffect","useDebounce","DEFAULT_DEBOUNCE","onConfirmCallback","useCallback","formData","user","jsxs","DialogForm","DialogTitle","DialogContent","Controller","value","onChange","Autocomplete","POPUP_INDICATOR_STYLE","CircularProgress","Box","SearchOutlinedIcon","ICON_STYLE","ErrorOutlinedIcon","option","_","value2","name","avatarUrl","createElement","ListItem","UserAvatar","params","TextField","event","_a","DialogActions","LoadingButton","Button"],"mappings":"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"}