{"version":3,"file":"Operations.stories-9049c24e.js","sources":["../../packages/shared/src/components/Operations/OperationTitleWithMeta.tsx","../../packages/shared/src/components/Operations/OperationWithMetaClickableList.tsx"],"sourcesContent":["/**\n * Copyright 2024-2025 NetCracker Technology Corporation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { FC } from 'react'\nimport React, { memo, useMemo } from 'react'\nimport { Box, Link, Typography } from '@mui/material'\nimport { NavLink } from 'react-router-dom'\nimport type { Path } from '@remix-run/router'\nimport type { Operation } from '../../entities/operations'\nimport { isGraphQlOperation, isRestOperation } from '../../entities/operations'\nimport { OverflowTooltip } from '../OverflowTooltip'\nimport { CustomChip } from '../CustomChip'\nimport { TextWithOverflowTooltip } from '../TextWithOverflowTooltip'\n\nexport type OperationTitleWithMetaProps = {\n  operation: Operation\n  link?: Partial<Path>\n  onLinkClick?: () => void\n  badgeText?: string\n  openLinkInNewTab?: boolean\n  onlyTitle?: boolean\n}\n\n// First Order Component //\nexport const OperationTitleWithMeta: FC<OperationTitleWithMetaProps> = memo<OperationTitleWithMetaProps>((\n  {\n    operation,\n    link,\n    onLinkClick,\n    badgeText,\n    openLinkInNewTab = false,\n    onlyTitle = false,\n  }) => {\n\n  const { title, subtitle, type } = useMemo(() => {\n    if (isRestOperation(operation)) {\n      return {\n        title: operation.title,\n        subtitle: operation.path,\n        type: operation.method,\n      }\n    }\n    if (isGraphQlOperation(operation)) {\n      return {\n        title: operation.title,\n        subtitle: operation.method,\n        type: operation.type,\n      }\n    }\n    throw new Error('Operation must be either a REST or GraphQL operation')\n  }, [operation])\n\n  const titleNode = link\n    ? <Typography noWrap variant=\"subtitle1\">\n      <Link\n        component={NavLink}\n        to={link}\n        target={openLinkInNewTab ? '_blank' : '_self'}\n        onClick={(event) => {\n          event.stopPropagation()\n          onLinkClick?.()\n        }}\n      >\n        {title}\n      </Link>\n    </Typography>\n    : <Typography noWrap variant=\"inherit\">{title}</Typography>\n\n  return (\n    <Box display=\"flex\" flexDirection=\"column\" width=\"100%\">\n      <Box\n        display=\"flex\"\n        alignItems=\"center\"\n        gap={1}\n        data-testid=\"OperationTitle\"\n      >\n        <OverflowTooltip title={title}>\n          {titleNode}\n        </OverflowTooltip>\n\n        {badgeText &&\n          <CustomChip\n            value={badgeText.toLowerCase()}\n            label={badgeText}\n            isExtraSmall\n          />\n        }\n      </Box>\n      {!onlyTitle && (\n        <Box display=\"flex\" alignItems=\"center\" gap={1} data-testid=\"OperationPath\">\n          <CustomChip value={type} variant=\"outlined\" />\n          <TextWithOverflowTooltip tooltipText={subtitle} variant=\"subtitle2\">\n            {subtitle}\n          </TextWithOverflowTooltip>\n        </Box>\n      )}\n    </Box>\n  )\n})\n","/**\n * Copyright 2024-2025 NetCracker Technology Corporation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { FC, ReactNode } from 'react'\nimport React, { memo, useCallback, useMemo, useRef, useState } from 'react'\nimport { OperationTitleWithMeta as OperationTitle } from './OperationTitleWithMeta'\nimport type { Path } from '@remix-run/router/history'\nimport Box from '@mui/material/Box'\nimport { CustomListItemButton, LIST_ITEM_SIZE_BIG } from '../CustomListItemButton'\nimport { Divider, Skeleton } from '@mui/material'\nimport { NAVIGATION_PLACEHOLDER_AREA, Placeholder } from '../Placeholder'\nimport type { ResizeCallback } from 're-resizable'\nimport { Resizable } from 're-resizable'\nimport { ExpandableItem } from '../ExpandableItem'\nimport type { FetchNextOperationList, OperationData, OperationsData, PackageRef } from '../../entities/operations'\nimport { useIntersectionObserver } from '../../hooks/common/useIntersectionObserver'\nimport { ListBox } from '../Panels/ListBox'\nimport { isNotEmpty } from '../../utils/arrays'\nimport type { Key } from '../../entities/keys'\n\nexport type OperationListSubComponentProps = {\n  operation: OperationData\n}\n\nexport type OperationWithMetaClickableListProps = {\n  operations: OperationsData\n  prepareLinkFn?: (operation: OperationData) => Partial<Path>\n  fetchNextPage?: FetchNextOperationList\n  isNextPageFetching?: boolean\n  hasNextPage?: boolean\n  onRowClick?: (operationKey: Key, packageRef?: PackageRef) => void\n  onLinkClick?: () => void\n  isLoading?: boolean\n  previewComponent?: ReactNode\n  selectedOperationKey?: Key\n  initialSize: number\n  handleResize?: ResizeCallback\n  maxWidth: number\n  isExpandableItem?: (operation: OperationData) => boolean\n  SubComponent?: FC<OperationListSubComponentProps>\n}\n\n// First Order Component //\nexport const OperationWithMetaClickableList: FC<OperationWithMetaClickableListProps> = memo<OperationWithMetaClickableListProps>((props) => {\n  const {\n    operations,\n    prepareLinkFn,\n    onRowClick,\n    onLinkClick,\n    hasNextPage,\n    isNextPageFetching,\n    fetchNextPage,\n    isLoading = false,\n    previewComponent,\n    selectedOperationKey,\n    initialSize,\n    handleResize,\n    maxWidth,\n    isExpandableItem,\n    SubComponent,\n  } = props\n\n  const handleRowClick = useCallback((operation: OperationData) => {\n    onRowClick?.(operation.operationKey, operation.packageRef)\n  }, [onRowClick])\n\n  const ref = useRef<HTMLDivElement>(null)\n  useIntersectionObserver(ref, isNextPageFetching, hasNextPage, fetchNextPage)\n\n  const operationsList = useMemo(\n    () => operations?.map(operation => {\n      const link = prepareLinkFn?.(operation) ?? {}\n      const { operationKey, deprecated } = operation\n      const expandable = isExpandableItem?.(operation) ?? false\n      const title = <OperationTitle\n        operation={operation}\n        link={link}\n        badgeText={deprecated ? 'Deprecated' : undefined}\n        onLinkClick={onLinkClick}\n      />\n\n      return (\n        <OperationItemButton\n          title={title}\n          operation={operation}\n          expandable={expandable}\n          SubComponent={SubComponent}\n          onClick={handleRowClick}\n          selected={selectedOperationKey === operationKey}\n        />\n      )\n    }),\n    [SubComponent, handleRowClick, isExpandableItem, onLinkClick, operations, prepareLinkFn, selectedOperationKey],\n  )\n\n  return (\n    <Box display=\"grid\" gridTemplateColumns=\"1fr auto\" height=\"inherit\">\n      <ListBox>\n        <Placeholder\n          sx={{ width: 'inherit' }}\n          invisible={isNotEmpty(operations) || isLoading}\n          area={NAVIGATION_PLACEHOLDER_AREA}\n          message=\"No operations\"\n          testId=\"NoOperationsPlaceholder\"\n        >\n          <Box overflow=\"auto\" height=\"inherit\">\n            {operationsList}\n\n            {isLoading && <ListSkeleton/>}\n            {hasNextPage && <Box ref={ref}><Skeleton variant=\"rectangular\" width=\"100%\"/></Box>}\n          </Box>\n        </Placeholder>\n      </ListBox>\n\n      <Resizable\n        style={{\n          borderLeft: '1px solid #D5DCE3',\n          backgroundColor: '#FFFFFF',\n          overflowY: 'scroll',\n        }}\n\n        enable={{\n          top: false,\n          right: false,\n          bottom: false,\n          left: true,\n          topRight: false,\n          bottomRight: false,\n          bottomLeft: false,\n          topLeft: false,\n        }}\n        boundsByDirection={true}\n        size={{ width: initialSize, height: '100%' }}\n        maxWidth={maxWidth}\n        onResizeStop={handleResize}\n      >\n        {previewComponent}\n      </Resizable>\n    </Box>\n  )\n})\n\nconst ListSkeleton: FC = memo(() => {\n  return (\n    <Box>\n      {[...Array(5)].map((_, index) => (\n        <Box key={index} mb={2}>\n          <Skeleton variant=\"rectangular\" height={20} width=\"100%\"/>\n        </Box>\n      ))}\n    </Box>\n  )\n})\n\ntype OperationItemButtonProps = {\n  title: ReactNode\n  operation: OperationData\n  expandable: boolean\n  SubComponent?: FC<OperationListSubComponentProps>\n  onClick: (operationData: OperationData) => void\n  selected: boolean\n}\n\nconst OperationItemButton: FC<OperationItemButtonProps> = memo<OperationItemButtonProps>(({\n    title,\n    operation,\n    expandable,\n    onClick,\n    SubComponent,\n    selected,\n  }) => {\n    const [expanded, setExpanded] = useState<boolean>(false)\n\n    return (\n      <>\n        <CustomListItemButton<OperationData>\n          keyProp={operation.operationKey}\n          data={operation}\n          itemComponent={<ExpandableItem showToggler={expandable} onToggle={setExpanded}>{title}</ExpandableItem>}\n          onClick={onClick}\n          size={LIST_ITEM_SIZE_BIG}\n          isSelected={selected}\n          testId=\"Cell-endpoints\"\n        />\n        <Divider orientation=\"horizontal\" variant=\"fullWidth\"/>\n\n        {expanded && SubComponent && (\n          <SubComponent operation={operation}/>\n        )}\n      </>\n    )\n  },\n)\n"],"names":["OperationTitleWithMeta","memo","operation","link","onLinkClick","badgeText","openLinkInNewTab","onlyTitle","title","subtitle","type","useMemo","isRestOperation","isGraphQlOperation","jsxs","Box","jsx","OverflowTooltip","Typography","Link","NavLink","event","CustomChip","TextWithOverflowTooltip","OperationWithMetaClickableList","props","operations","prepareLinkFn","onRowClick","hasNextPage","isNextPageFetching","fetchNextPage","isLoading","previewComponent","selectedOperationKey","initialSize","handleResize","maxWidth","isExpandableItem","SubComponent","handleRowClick","useCallback","ref","useRef","useIntersectionObserver","operationsList","operationKey","deprecated","expandable","OperationItemButton","OperationTitle","ListBox","Placeholder","isNotEmpty","NAVIGATION_PLACEHOLDER_AREA","ListSkeleton","Skeleton","Resizable","_","index","onClick","selected","expanded","setExpanded","useState","Fragment","CustomListItemButton","ExpandableItem","LIST_ITEM_SIZE_BIG","Divider"],"mappings":"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"}