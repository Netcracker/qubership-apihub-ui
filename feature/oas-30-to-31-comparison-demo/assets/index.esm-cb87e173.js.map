{"version":3,"file":"index.esm-cb87e173.js","sources":["../../node_modules/react-hook-form/dist/index.esm.mjs"],"sourcesContent":["import React from 'react';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isDateObject = (value) => value instanceof Date;\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\r\nvar isObject = (value) => !isNullOrUndefined(value) &&\r\n    !Array.isArray(value) &&\r\n    isObjectType(value) &&\r\n    !isDateObject(value);\n\nvar getEventValue = (event) => isObject(event) && event.target\r\n    ? isCheckBoxInput(event.target)\r\n        ? event.target.checked\r\n        : event.target.value\r\n    : event;\n\nvar getNodeParentName = (name) => name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n\nvar isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));\n\nvar compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (obj, path, defaultValue) => {\r\n    if (!path || !isObject(obj)) {\r\n        return defaultValue;\r\n    }\r\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], obj);\r\n    return isUndefined(result) || result === obj\r\n        ? isUndefined(obj[path])\r\n            ? defaultValue\r\n            : obj[path]\r\n        : result;\r\n};\n\nconst EVENTS = {\r\n    BLUR: 'blur',\r\n    FOCUS_OUT: 'focusout',\r\n    CHANGE: 'change',\r\n};\r\nconst VALIDATION_MODE = {\r\n    onBlur: 'onBlur',\r\n    onChange: 'onChange',\r\n    onSubmit: 'onSubmit',\r\n    onTouched: 'onTouched',\r\n    all: 'all',\r\n};\r\nconst INPUT_VALIDATION_RULES = {\r\n    max: 'max',\r\n    min: 'min',\r\n    maxLength: 'maxLength',\r\n    minLength: 'minLength',\r\n    pattern: 'pattern',\r\n    required: 'required',\r\n    validate: 'validate',\r\n};\n\nconst HookFormContext = React.createContext(null);\r\n/**\r\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\r\n *\r\n * @returns return all useForm methods\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const methods = useForm();\r\n *   const onSubmit = data => console.log(data);\r\n *\r\n *   return (\r\n *     <FormProvider {...methods} >\r\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\r\n *         <NestedInput />\r\n *         <input type=\"submit\" />\r\n *       </form>\r\n *     </FormProvider>\r\n *   );\r\n * }\r\n *\r\n *  function NestedInput() {\r\n *   const { register } = useFormContext(); // retrieve all hook methods\r\n *   return <input {...register(\"test\")} />;\r\n * }\r\n * ```\r\n */\r\nconst useFormContext = () => React.useContext(HookFormContext);\r\n/**\r\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\r\n *\r\n * @param props - all useFrom methods\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const methods = useForm();\r\n *   const onSubmit = data => console.log(data);\r\n *\r\n *   return (\r\n *     <FormProvider {...methods} >\r\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\r\n *         <NestedInput />\r\n *         <input type=\"submit\" />\r\n *       </form>\r\n *     </FormProvider>\r\n *   );\r\n * }\r\n *\r\n *  function NestedInput() {\r\n *   const { register } = useFormContext(); // retrieve all hook methods\r\n *   return <input {...register(\"test\")} />;\r\n * }\r\n * ```\r\n */\r\nconst FormProvider = (props) => {\r\n    const { children, ...data } = props;\r\n    return (React.createElement(HookFormContext.Provider, { value: data }, children));\r\n};\n\nvar getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {\r\n    const result = {\r\n        defaultValues: control._defaultValues,\r\n    };\r\n    for (const key in formState) {\r\n        Object.defineProperty(result, key, {\r\n            get: () => {\r\n                const _key = key;\r\n                if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\r\n                    control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\r\n                }\r\n                localProxyFormState && (localProxyFormState[_key] = true);\r\n                return formState[_key];\r\n            },\r\n        });\r\n    }\r\n    return result;\r\n};\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, isRoot) => {\r\n    const { name, ...formState } = formStateData;\r\n    return (isEmptyObject(formState) ||\r\n        Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\r\n        Object.keys(formState).find((key) => _proxyFormState[key] ===\r\n            (!isRoot || VALIDATION_MODE.all)));\r\n};\n\nvar convertToArrayPayload = (value) => (Array.isArray(value) ? value : [value]);\n\nvar shouldSubscribeByName = (name, signalName, exact) => exact && signalName\r\n    ? name === signalName\r\n    : !name ||\r\n        !signalName ||\r\n        name === signalName ||\r\n        convertToArrayPayload(name).some((currentName) => currentName &&\r\n            (currentName.startsWith(signalName) ||\r\n                signalName.startsWith(currentName)));\n\nfunction useSubscribe(props) {\r\n    const _props = React.useRef(props);\r\n    _props.current = props;\r\n    React.useEffect(() => {\r\n        const subscription = !props.disabled &&\r\n            _props.current.subject.subscribe({\r\n                next: _props.current.callback,\r\n            });\r\n        return () => {\r\n            subscription && subscription.unsubscribe();\r\n        };\r\n    }, [props.disabled]);\r\n}\n\n/**\r\n * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)\r\n *\r\n * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { register, handleSubmit, control } = useForm({\r\n *     defaultValues: {\r\n *     firstName: \"firstName\"\r\n *   }});\r\n *   const { dirtyFields } = useFormState({\r\n *     control\r\n *   });\r\n *   const onSubmit = (data) => console.log(data);\r\n *\r\n *   return (\r\n *     <form onSubmit={handleSubmit(onSubmit)}>\r\n *       <input {...register(\"firstName\")} placeholder=\"First Name\" />\r\n *       {dirtyFields.firstName && <p>Field is dirty.</p>}\r\n *       <input type=\"submit\" />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useFormState(props) {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, disabled, name, exact } = props || {};\r\n    const [formState, updateFormState] = React.useState(control._formState);\r\n    const _mounted = React.useRef(true);\r\n    const _localProxyFormState = React.useRef({\r\n        isDirty: false,\r\n        dirtyFields: false,\r\n        touchedFields: false,\r\n        isValidating: false,\r\n        isValid: false,\r\n        errors: false,\r\n    });\r\n    const _name = React.useRef(name);\r\n    _name.current = name;\r\n    useSubscribe({\r\n        disabled,\r\n        callback: React.useCallback((value) => _mounted.current &&\r\n            shouldSubscribeByName(_name.current, value.name, exact) &&\r\n            shouldRenderFormState(value, _localProxyFormState.current) &&\r\n            updateFormState({\r\n                ...control._formState,\r\n                ...value,\r\n            }), [control, exact]),\r\n        subject: control._subjects.state,\r\n    });\r\n    React.useEffect(() => {\r\n        _mounted.current = true;\r\n        const isDirty = control._proxyFormState.isDirty && control._getDirty();\r\n        if (isDirty !== control._formState.isDirty) {\r\n            control._subjects.state.next({\r\n                isDirty,\r\n            });\r\n        }\r\n        control._updateValid();\r\n        return () => {\r\n            _mounted.current = false;\r\n        };\r\n    }, [control]);\r\n    return getProxyFormState(formState, control, _localProxyFormState.current, false);\r\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal) => {\r\n    if (isString(names)) {\r\n        isGlobal && _names.watch.add(names);\r\n        return get(formValues, names);\r\n    }\r\n    if (Array.isArray(names)) {\r\n        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)));\r\n    }\r\n    isGlobal && (_names.watchAll = true);\r\n    return formValues;\r\n};\n\nvar isPlainObject = (tempObject) => {\r\n    const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;\r\n    return (isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf'));\r\n};\n\nvar isWeb = typeof window !== 'undefined' &&\r\n    typeof window.HTMLElement !== 'undefined' &&\r\n    typeof document !== 'undefined';\n\nfunction cloneObject(data) {\r\n    let copy;\r\n    const isArray = Array.isArray(data);\r\n    if (data instanceof Date) {\r\n        copy = new Date(data);\r\n    }\r\n    else if (data instanceof Set) {\r\n        copy = new Set(data);\r\n    }\r\n    else if (!(isWeb && (data instanceof Blob || data instanceof FileList)) &&\r\n        (isArray || isObject(data))) {\r\n        copy = isArray ? [] : {};\r\n        if (!Array.isArray(data) && !isPlainObject(data)) {\r\n            copy = data;\r\n        }\r\n        else {\r\n            for (const key in data) {\r\n                copy[key] = cloneObject(data[key]);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        return data;\r\n    }\r\n    return copy;\r\n}\n\n/**\r\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\r\n *\r\n * @remarks\r\n *\r\n * [API](https://react-hook-form.com/api/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\r\n *\r\n * @example\r\n * ```tsx\r\n * const { watch } = useForm();\r\n * const values = useWatch({\r\n *   name: \"fieldName\"\r\n *   control,\r\n * })\r\n * ```\r\n */\r\nfunction useWatch(props) {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, name, defaultValue, disabled, exact, } = props || {};\r\n    const _name = React.useRef(name);\r\n    _name.current = name;\r\n    useSubscribe({\r\n        disabled,\r\n        subject: control._subjects.watch,\r\n        callback: (formState) => {\r\n            if (shouldSubscribeByName(_name.current, formState.name, exact)) {\r\n                const fieldValues = generateWatchOutput(_name.current, control._names, formState.values || control._formValues);\r\n                updateValue(isUndefined(fieldValues) ? defaultValue : cloneObject(fieldValues));\r\n            }\r\n        },\r\n    });\r\n    const [value, updateValue] = React.useState(isUndefined(defaultValue)\r\n        ? control._getWatch(name)\r\n        : defaultValue);\r\n    React.useEffect(() => control._removeUnmounted());\r\n    return value;\r\n}\n\n/**\r\n * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)\r\n *\r\n * @param props - the path name to the form field value, and validation rules.\r\n *\r\n * @returns field properties, field and form state. {@link UseControllerReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function Input(props) {\r\n *   const { field, fieldState, formState } = useController(props);\r\n *   return (\r\n *     <div>\r\n *       <input {...field} placeholder={props.name} />\r\n *       <p>{fieldState.isTouched && \"Touched\"}</p>\r\n *       <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\r\n *     </div>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useController(props) {\r\n    const methods = useFormContext();\r\n    const { name, control = methods.control, shouldUnregister } = props;\r\n    const isArrayField = isNameInFieldArray(control._names.array, name);\r\n    const value = useWatch({\r\n        control,\r\n        name,\r\n        defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\r\n        exact: true,\r\n    });\r\n    const formState = useFormState({\r\n        control,\r\n        name,\r\n    });\r\n    const _registerProps = React.useRef(control.register(name, {\r\n        ...props.rules,\r\n        value,\r\n    }));\r\n    React.useEffect(() => {\r\n        const updateMounted = (name, value) => {\r\n            const field = get(control._fields, name);\r\n            if (field) {\r\n                field._f.mount = value;\r\n            }\r\n        };\r\n        updateMounted(name, true);\r\n        return () => {\r\n            const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\r\n            (isArrayField\r\n                ? _shouldUnregisterField && !control._stateFlags.action\r\n                : _shouldUnregisterField)\r\n                ? control.unregister(name)\r\n                : updateMounted(name, false);\r\n        };\r\n    }, [name, control, isArrayField, shouldUnregister]);\r\n    return {\r\n        field: {\r\n            name,\r\n            value,\r\n            onChange: React.useCallback((event) => _registerProps.current.onChange({\r\n                target: {\r\n                    value: getEventValue(event),\r\n                    name: name,\r\n                },\r\n                type: EVENTS.CHANGE,\r\n            }), [name]),\r\n            onBlur: React.useCallback(() => _registerProps.current.onBlur({\r\n                target: {\r\n                    value: get(control._formValues, name),\r\n                    name: name,\r\n                },\r\n                type: EVENTS.BLUR,\r\n            }), [name, control]),\r\n            ref: (elm) => {\r\n                const field = get(control._fields, name);\r\n                if (field && elm) {\r\n                    field._f.ref = {\r\n                        focus: () => elm.focus(),\r\n                        select: () => elm.select(),\r\n                        setCustomValidity: (message) => elm.setCustomValidity(message),\r\n                        reportValidity: () => elm.reportValidity(),\r\n                    };\r\n                }\r\n            },\r\n        },\r\n        formState,\r\n        fieldState: Object.defineProperties({}, {\r\n            invalid: {\r\n                enumerable: true,\r\n                get: () => !!get(formState.errors, name),\r\n            },\r\n            isDirty: {\r\n                enumerable: true,\r\n                get: () => !!get(formState.dirtyFields, name),\r\n            },\r\n            isTouched: {\r\n                enumerable: true,\r\n                get: () => !!get(formState.touchedFields, name),\r\n            },\r\n            error: {\r\n                enumerable: true,\r\n                get: () => get(formState.errors, name),\r\n            },\r\n        }),\r\n    };\r\n}\n\n/**\r\n * Component based on `useController` hook to work with controlled component.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\r\n *\r\n * @param props - the path name to the form field value, and validation rules.\r\n *\r\n * @returns provide field handler functions, field and form state.\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { control } = useForm<FormValues>({\r\n *     defaultValues: {\r\n *       test: \"\"\r\n *     }\r\n *   });\r\n *\r\n *   return (\r\n *     <form>\r\n *       <Controller\r\n *         control={control}\r\n *         name=\"test\"\r\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\r\n *           <>\r\n *             <input\r\n *               onChange={onChange} // send value to hook form\r\n *               onBlur={onBlur} // notify when input is touched\r\n *               value={value} // return updated value\r\n *               ref={ref} // set ref for focus management\r\n *             />\r\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\r\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\r\n *           </>\r\n *         )}\r\n *       />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nconst Controller = (props) => props.render(useController(props));\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\r\n    ? {\r\n        ...errors[name],\r\n        types: {\r\n            ...(errors[name] && errors[name].types ? errors[name].types : {}),\r\n            [type]: message || true,\r\n        },\r\n    }\r\n    : {};\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar stringToPath = (input) => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nfunction set(object, path, value) {\r\n    let index = -1;\r\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\r\n    const length = tempPath.length;\r\n    const lastIndex = length - 1;\r\n    while (++index < length) {\r\n        const key = tempPath[index];\r\n        let newValue = value;\r\n        if (index !== lastIndex) {\r\n            const objValue = object[key];\r\n            newValue =\r\n                isObject(objValue) || Array.isArray(objValue)\r\n                    ? objValue\r\n                    : !isNaN(+tempPath[index + 1])\r\n                        ? []\r\n                        : {};\r\n        }\r\n        object[key] = newValue;\r\n        object = object[key];\r\n    }\r\n    return object;\r\n}\n\nconst focusFieldBy = (fields, callback, fieldsNames) => {\r\n    for (const key of fieldsNames || Object.keys(fields)) {\r\n        const field = get(fields, key);\r\n        if (field) {\r\n            const { _f, ...currentField } = field;\r\n            if (_f && callback(_f.name)) {\r\n                if (_f.ref.focus) {\r\n                    _f.ref.focus();\r\n                    break;\r\n                }\r\n                else if (_f.refs && _f.refs[0].focus) {\r\n                    _f.refs[0].focus();\r\n                    break;\r\n                }\r\n            }\r\n            else if (isObject(currentField)) {\r\n                focusFieldBy(currentField, callback);\r\n            }\r\n        }\r\n    }\r\n};\n\nvar generateId = () => {\r\n    const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\r\n        const r = (Math.random() * 16 + d) % 16 | 0;\r\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n    });\r\n};\n\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus)\r\n    ? options.focusName ||\r\n        `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\r\n    : '';\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent &&\r\n    (_names.watchAll ||\r\n        _names.watch.has(name) ||\r\n        [..._names.watch].some((watchName) => name.startsWith(watchName) &&\r\n            /^\\.\\w+/.test(name.slice(watchName.length))));\n\nvar updateFieldArrayRootError = (errors, error, name) => {\r\n    const fieldArrayErrors = compact(get(errors, name));\r\n    set(fieldArrayErrors, 'root', error[name]);\r\n    set(errors, name, fieldArrayErrors);\r\n    return errors;\r\n};\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isMessage = (value) => isString(value) || React.isValidElement(value);\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isRegex = (value) => value instanceof RegExp;\n\nconst defaultResult = {\r\n    value: false,\r\n    isValid: false,\r\n};\r\nconst validResult = { value: true, isValid: true };\r\nvar getCheckboxValue = (options) => {\r\n    if (Array.isArray(options)) {\r\n        if (options.length > 1) {\r\n            const values = options\r\n                .filter((option) => option && option.checked && !option.disabled)\r\n                .map((option) => option.value);\r\n            return { value: values, isValid: !!values.length };\r\n        }\r\n        return options[0].checked && !options[0].disabled\r\n            ? // @ts-expect-error expected to work in the browser\r\n                options[0].attributes && !isUndefined(options[0].attributes.value)\r\n                    ? isUndefined(options[0].value) || options[0].value === ''\r\n                        ? validResult\r\n                        : { value: options[0].value, isValid: true }\r\n                    : validResult\r\n            : defaultResult;\r\n    }\r\n    return defaultResult;\r\n};\n\nconst defaultReturn = {\r\n    isValid: false,\r\n    value: null,\r\n};\r\nvar getRadioValue = (options) => Array.isArray(options)\r\n    ? options.reduce((previous, option) => option && option.checked && !option.disabled\r\n        ? {\r\n            isValid: true,\r\n            value: option.value,\r\n        }\r\n        : previous, defaultReturn)\r\n    : defaultReturn;\n\nfunction getValidateError(result, ref, type = 'validate') {\r\n    if (isMessage(result) ||\r\n        (Array.isArray(result) && result.every(isMessage)) ||\r\n        (isBoolean(result) && !result)) {\r\n        return {\r\n            type,\r\n            message: isMessage(result) ? result : '',\r\n            ref,\r\n        };\r\n    }\r\n}\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\r\n    ? validationData\r\n    : {\r\n        value: validationData,\r\n        message: '',\r\n    };\n\nvar validateField = async (field, inputValue, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {\r\n    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, disabled, } = field._f;\r\n    if (!mount || disabled) {\r\n        return {};\r\n    }\r\n    const inputRef = refs ? refs[0] : ref;\r\n    const setCustomValidity = (message) => {\r\n        if (shouldUseNativeValidation && inputRef.reportValidity) {\r\n            inputRef.setCustomValidity(isBoolean(message) ? '' : message || '');\r\n            inputRef.reportValidity();\r\n        }\r\n    };\r\n    const error = {};\r\n    const isRadio = isRadioInput(ref);\r\n    const isCheckBox = isCheckBoxInput(ref);\r\n    const isRadioOrCheckbox = isRadio || isCheckBox;\r\n    const isEmpty = ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\r\n        inputValue === '' ||\r\n        (Array.isArray(inputValue) && !inputValue.length);\r\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\r\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\r\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\r\n        error[name] = {\r\n            type: exceedMax ? maxType : minType,\r\n            message,\r\n            ref,\r\n            ...appendErrorsCurry(exceedMax ? maxType : minType, message),\r\n        };\r\n    };\r\n    if (isFieldArray\r\n        ? !Array.isArray(inputValue) || !inputValue.length\r\n        : required &&\r\n            ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\r\n                (isBoolean(inputValue) && !inputValue) ||\r\n                (isCheckBox && !getCheckboxValue(refs).isValid) ||\r\n                (isRadio && !getRadioValue(refs).isValid))) {\r\n        const { value, message } = isMessage(required)\r\n            ? { value: !!required, message: required }\r\n            : getValueAndMessage(required);\r\n        if (value) {\r\n            error[name] = {\r\n                type: INPUT_VALIDATION_RULES.required,\r\n                message,\r\n                ref: inputRef,\r\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\r\n            };\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\r\n        let exceedMax;\r\n        let exceedMin;\r\n        const maxOutput = getValueAndMessage(max);\r\n        const minOutput = getValueAndMessage(min);\r\n        if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {\r\n            const valueNumber = ref.valueAsNumber ||\r\n                (inputValue ? +inputValue : inputValue);\r\n            if (!isNullOrUndefined(maxOutput.value)) {\r\n                exceedMax = valueNumber > maxOutput.value;\r\n            }\r\n            if (!isNullOrUndefined(minOutput.value)) {\r\n                exceedMin = valueNumber < minOutput.value;\r\n            }\r\n        }\r\n        else {\r\n            const valueDate = ref.valueAsDate || new Date(inputValue);\r\n            const convertTimeToDate = (time) => new Date(new Date().toDateString() + ' ' + time);\r\n            const isTime = ref.type == 'time';\r\n            const isWeek = ref.type == 'week';\r\n            if (isString(maxOutput.value) && inputValue) {\r\n                exceedMax = isTime\r\n                    ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)\r\n                    : isWeek\r\n                        ? inputValue > maxOutput.value\r\n                        : valueDate > new Date(maxOutput.value);\r\n            }\r\n            if (isString(minOutput.value) && inputValue) {\r\n                exceedMin = isTime\r\n                    ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)\r\n                    : isWeek\r\n                        ? inputValue < minOutput.value\r\n                        : valueDate < new Date(minOutput.value);\r\n            }\r\n        }\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(error[name].message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if ((maxLength || minLength) &&\r\n        !isEmpty &&\r\n        (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))) {\r\n        const maxLengthOutput = getValueAndMessage(maxLength);\r\n        const minLengthOutput = getValueAndMessage(minLength);\r\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\r\n            inputValue.length > maxLengthOutput.value;\r\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\r\n            inputValue.length < minLengthOutput.value;\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(error[name].message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (pattern && !isEmpty && isString(inputValue)) {\r\n        const { value: patternValue, message } = getValueAndMessage(pattern);\r\n        if (isRegex(patternValue) && !inputValue.match(patternValue)) {\r\n            error[name] = {\r\n                type: INPUT_VALIDATION_RULES.pattern,\r\n                message,\r\n                ref,\r\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\r\n            };\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (validate) {\r\n        if (isFunction(validate)) {\r\n            const result = await validate(inputValue);\r\n            const validateError = getValidateError(result, inputRef);\r\n            if (validateError) {\r\n                error[name] = {\r\n                    ...validateError,\r\n                    ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message),\r\n                };\r\n                if (!validateAllFieldCriteria) {\r\n                    setCustomValidity(validateError.message);\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n        else if (isObject(validate)) {\r\n            let validationResult = {};\r\n            for (const key in validate) {\r\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\r\n                    break;\r\n                }\r\n                const validateError = getValidateError(await validate[key](inputValue), inputRef, key);\r\n                if (validateError) {\r\n                    validationResult = {\r\n                        ...validateError,\r\n                        ...appendErrorsCurry(key, validateError.message),\r\n                    };\r\n                    setCustomValidity(validateError.message);\r\n                    if (validateAllFieldCriteria) {\r\n                        error[name] = validationResult;\r\n                    }\r\n                }\r\n            }\r\n            if (!isEmptyObject(validationResult)) {\r\n                error[name] = {\r\n                    ref: inputRef,\r\n                    ...validationResult,\r\n                };\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    setCustomValidity(true);\r\n    return error;\r\n};\n\nfunction append(data, value) {\r\n    return [...data, ...convertToArrayPayload(value)];\r\n}\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nvar getValidationModes = (mode) => ({\r\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\r\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\r\n    isOnChange: mode === VALIDATION_MODE.onChange,\r\n    isOnAll: mode === VALIDATION_MODE.all,\r\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\r\n});\n\nfunction insert(data, index, value) {\r\n    return [\r\n        ...data.slice(0, index),\r\n        ...convertToArrayPayload(value),\r\n        ...data.slice(index),\r\n    ];\r\n}\n\nvar moveArrayAt = (data, from, to) => {\r\n    if (!Array.isArray(data)) {\r\n        return [];\r\n    }\r\n    if (isUndefined(data[to])) {\r\n        data[to] = undefined;\r\n    }\r\n    data.splice(to, 0, data.splice(from, 1)[0]);\r\n    return data;\r\n};\n\nfunction prepend(data, value) {\r\n    return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\r\n}\n\nfunction removeAtIndexes(data, indexes) {\r\n    let i = 0;\r\n    const temp = [...data];\r\n    for (const index of indexes) {\r\n        temp.splice(index - i, 1);\r\n        i++;\r\n    }\r\n    return compact(temp).length ? temp : [];\r\n}\r\nvar removeArrayAt = (data, index) => isUndefined(index)\r\n    ? []\r\n    : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\r\n    data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\r\n};\n\nfunction baseGet(object, updatePath) {\r\n    const length = updatePath.slice(0, -1).length;\r\n    let index = 0;\r\n    while (index < length) {\r\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\r\n    }\r\n    return object;\r\n}\r\nfunction isEmptyArray(obj) {\r\n    for (const key in obj) {\r\n        if (!isUndefined(obj[key])) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction unset(object, path) {\r\n    const updatePath = isKey(path) ? [path] : stringToPath(path);\r\n    const childObject = updatePath.length == 1 ? object : baseGet(object, updatePath);\r\n    const key = updatePath[updatePath.length - 1];\r\n    let previousObjRef;\r\n    if (childObject) {\r\n        delete childObject[key];\r\n    }\r\n    for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\r\n        let index = -1;\r\n        let objectRef;\r\n        const currentPaths = updatePath.slice(0, -(k + 1));\r\n        const currentPathsLength = currentPaths.length - 1;\r\n        if (k > 0) {\r\n            previousObjRef = object;\r\n        }\r\n        while (++index < currentPaths.length) {\r\n            const item = currentPaths[index];\r\n            objectRef = objectRef ? objectRef[item] : object[item];\r\n            if (currentPathsLength === index &&\r\n                ((isObject(objectRef) && isEmptyObject(objectRef)) ||\r\n                    (Array.isArray(objectRef) && isEmptyArray(objectRef)))) {\r\n                previousObjRef ? delete previousObjRef[item] : delete object[item];\r\n            }\r\n            previousObjRef = objectRef;\r\n        }\r\n    }\r\n    return object;\r\n}\n\nvar updateAt = (fieldValues, index, value) => {\r\n    fieldValues[index] = value;\r\n    return fieldValues;\r\n};\n\n/**\r\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc. • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn) • [Video](https://youtu.be/4MrbfGSFY2A)\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\r\n *\r\n * @param props - useFieldArray props\r\n *\r\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\r\n *     defaultValues: {\r\n *       test: []\r\n *     }\r\n *   });\r\n *   const { fields, append } = useFieldArray({\r\n *     control,\r\n *     name: \"test\"\r\n *   });\r\n *\r\n *   return (\r\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\r\n *       {fields.map((item, index) => (\r\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\r\n *       ))}\r\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\r\n *         append\r\n *       </button>\r\n *       <input type=\"submit\" />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useFieldArray(props) {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, name, keyName = 'id', shouldUnregister, } = props;\r\n    const [fields, setFields] = React.useState(control._getFieldArray(name));\r\n    const ids = React.useRef(control._getFieldArray(name).map(generateId));\r\n    const _fieldIds = React.useRef(fields);\r\n    const _name = React.useRef(name);\r\n    const _actioned = React.useRef(false);\r\n    _name.current = name;\r\n    _fieldIds.current = fields;\r\n    control._names.array.add(name);\r\n    props.rules &&\r\n        control.register(name, props.rules);\r\n    const callback = React.useCallback(({ values, name: fieldArrayName, }) => {\r\n        if (fieldArrayName === _name.current || !fieldArrayName) {\r\n            const fieldValues = get(values, _name.current);\r\n            if (Array.isArray(fieldValues)) {\r\n                setFields(fieldValues);\r\n                ids.current = fieldValues.map(generateId);\r\n            }\r\n        }\r\n    }, []);\r\n    useSubscribe({\r\n        callback,\r\n        subject: control._subjects.array,\r\n    });\r\n    const updateValues = React.useCallback((updatedFieldArrayValues) => {\r\n        _actioned.current = true;\r\n        control._updateFieldArray(name, updatedFieldArrayValues);\r\n    }, [control, name]);\r\n    const append$1 = (value, options) => {\r\n        const appendValue = convertToArrayPayload(cloneObject(value));\r\n        const updatedFieldArrayValues = append(control._getFieldArray(name), appendValue);\r\n        control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\r\n        ids.current = append(ids.current, appendValue.map(generateId));\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, append, {\r\n            argA: fillEmptyArray(value),\r\n        });\r\n    };\r\n    const prepend$1 = (value, options) => {\r\n        const prependValue = convertToArrayPayload(cloneObject(value));\r\n        const updatedFieldArrayValues = prepend(control._getFieldArray(name), prependValue);\r\n        control._names.focus = getFocusFieldName(name, 0, options);\r\n        ids.current = prepend(ids.current, prependValue.map(generateId));\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, prepend, {\r\n            argA: fillEmptyArray(value),\r\n        });\r\n    };\r\n    const remove = (index) => {\r\n        const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\r\n        ids.current = removeArrayAt(ids.current, index);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\r\n            argA: index,\r\n        });\r\n    };\r\n    const insert$1 = (index, value, options) => {\r\n        const insertValue = convertToArrayPayload(cloneObject(value));\r\n        const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\r\n        control._names.focus = getFocusFieldName(name, index, options);\r\n        ids.current = insert(ids.current, index, insertValue.map(generateId));\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, insert, {\r\n            argA: index,\r\n            argB: fillEmptyArray(value),\r\n        });\r\n    };\r\n    const swap = (indexA, indexB) => {\r\n        const updatedFieldArrayValues = control._getFieldArray(name);\r\n        swapArrayAt(updatedFieldArrayValues, indexA, indexB);\r\n        swapArrayAt(ids.current, indexA, indexB);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, swapArrayAt, {\r\n            argA: indexA,\r\n            argB: indexB,\r\n        }, false);\r\n    };\r\n    const move = (from, to) => {\r\n        const updatedFieldArrayValues = control._getFieldArray(name);\r\n        moveArrayAt(updatedFieldArrayValues, from, to);\r\n        moveArrayAt(ids.current, from, to);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, moveArrayAt, {\r\n            argA: from,\r\n            argB: to,\r\n        }, false);\r\n    };\r\n    const update = (index, value) => {\r\n        const updateValue = cloneObject(value);\r\n        const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, updateValue);\r\n        ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields([...updatedFieldArrayValues]);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, updateAt, {\r\n            argA: index,\r\n            argB: updateValue,\r\n        }, true, false);\r\n    };\r\n    const replace = (value) => {\r\n        const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\r\n        ids.current = updatedFieldArrayValues.map(generateId);\r\n        updateValues([...updatedFieldArrayValues]);\r\n        setFields([...updatedFieldArrayValues]);\r\n        control._updateFieldArray(name, [...updatedFieldArrayValues], (data) => data, {}, true, false);\r\n    };\r\n    React.useEffect(() => {\r\n        control._stateFlags.action = false;\r\n        isWatched(name, control._names) && control._subjects.state.next({});\r\n        if (_actioned.current &&\r\n            (!getValidationModes(control._options.mode).isOnSubmit ||\r\n                control._formState.isSubmitted)) {\r\n            if (control._options.resolver) {\r\n                control._executeSchema([name]).then((result) => {\r\n                    const error = get(result.errors, name);\r\n                    const existingError = get(control._formState.errors, name);\r\n                    if (existingError ? !error && existingError.type : error && error.type) {\r\n                        error\r\n                            ? set(control._formState.errors, name, error)\r\n                            : unset(control._formState.errors, name);\r\n                        control._subjects.state.next({\r\n                            errors: control._formState.errors,\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                const field = get(control._fields, name);\r\n                if (field && field._f) {\r\n                    validateField(field, get(control._formValues, name), control._options.criteriaMode === VALIDATION_MODE.all, control._options.shouldUseNativeValidation, true).then((error) => !isEmptyObject(error) &&\r\n                        control._subjects.state.next({\r\n                            errors: updateFieldArrayRootError(control._formState.errors, error, name),\r\n                        }));\r\n                }\r\n            }\r\n        }\r\n        control._subjects.watch.next({\r\n            name,\r\n            values: control._formValues,\r\n        });\r\n        control._names.focus &&\r\n            focusFieldBy(control._fields, (key) => !!key && key.startsWith(control._names.focus || ''));\r\n        control._names.focus = '';\r\n        control._proxyFormState.isValid && control._updateValid();\r\n    }, [fields, name, control]);\r\n    React.useEffect(() => {\r\n        !get(control._formValues, name) && control._updateFieldArray(name);\r\n        return () => {\r\n            (control._options.shouldUnregister || shouldUnregister) &&\r\n                control.unregister(name);\r\n        };\r\n    }, [name, control, keyName, shouldUnregister]);\r\n    return {\r\n        swap: React.useCallback(swap, [updateValues, name, control]),\r\n        move: React.useCallback(move, [updateValues, name, control]),\r\n        prepend: React.useCallback(prepend$1, [updateValues, name, control]),\r\n        append: React.useCallback(append$1, [updateValues, name, control]),\r\n        remove: React.useCallback(remove, [updateValues, name, control]),\r\n        insert: React.useCallback(insert$1, [updateValues, name, control]),\r\n        update: React.useCallback(update, [updateValues, name, control]),\r\n        replace: React.useCallback(replace, [updateValues, name, control]),\r\n        fields: React.useMemo(() => fields.map((field, index) => ({\r\n            ...field,\r\n            [keyName]: ids.current[index] || generateId(),\r\n        })), [fields, keyName]),\r\n    };\r\n}\n\nfunction createSubject() {\r\n    let _observers = [];\r\n    const next = (value) => {\r\n        for (const observer of _observers) {\r\n            observer.next(value);\r\n        }\r\n    };\r\n    const subscribe = (observer) => {\r\n        _observers.push(observer);\r\n        return {\r\n            unsubscribe: () => {\r\n                _observers = _observers.filter((o) => o !== observer);\r\n            },\r\n        };\r\n    };\r\n    const unsubscribe = () => {\r\n        _observers = [];\r\n    };\r\n    return {\r\n        get observers() {\r\n            return _observers;\r\n        },\r\n        next,\r\n        subscribe,\r\n        unsubscribe,\r\n    };\r\n}\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2) {\r\n    if (isPrimitive(object1) || isPrimitive(object2)) {\r\n        return object1 === object2;\r\n    }\r\n    if (isDateObject(object1) && isDateObject(object2)) {\r\n        return object1.getTime() === object2.getTime();\r\n    }\r\n    const keys1 = Object.keys(object1);\r\n    const keys2 = Object.keys(object2);\r\n    if (keys1.length !== keys2.length) {\r\n        return false;\r\n    }\r\n    for (const key of keys1) {\r\n        const val1 = object1[key];\r\n        if (!keys2.includes(key)) {\r\n            return false;\r\n        }\r\n        if (key !== 'ref') {\r\n            const val2 = object2[key];\r\n            if ((isDateObject(val1) && isDateObject(val2)) ||\r\n                (isObject(val1) && isObject(val2)) ||\r\n                (Array.isArray(val1) && Array.isArray(val2))\r\n                ? !deepEqual(val1, val2)\r\n                : val1 !== val2) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\n\nvar isHTMLElement = (value) => {\r\n    const owner = value ? value.ownerDocument : 0;\r\n    const ElementClass = owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement;\r\n    return value instanceof ElementClass;\r\n};\n\nvar isMultipleSelect = (element) => element.type === `select-multiple`;\n\nvar isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar live = (ref) => isHTMLElement(ref) && ref.isConnected;\n\nvar objectHasFunction = (data) => {\r\n    for (const key in data) {\r\n        if (isFunction(data[key])) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\n\nfunction markFieldsDirty(data, fields = {}) {\r\n    const isParentNodeArray = Array.isArray(data);\r\n    if (isObject(data) || isParentNodeArray) {\r\n        for (const key in data) {\r\n            if (Array.isArray(data[key]) ||\r\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\r\n                fields[key] = Array.isArray(data[key]) ? [] : {};\r\n                markFieldsDirty(data[key], fields[key]);\r\n            }\r\n            else if (!isNullOrUndefined(data[key])) {\r\n                fields[key] = true;\r\n            }\r\n        }\r\n    }\r\n    return fields;\r\n}\r\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\r\n    const isParentNodeArray = Array.isArray(data);\r\n    if (isObject(data) || isParentNodeArray) {\r\n        for (const key in data) {\r\n            if (Array.isArray(data[key]) ||\r\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\r\n                if (isUndefined(formValues) ||\r\n                    isPrimitive(dirtyFieldsFromValues[key])) {\r\n                    dirtyFieldsFromValues[key] = Array.isArray(data[key])\r\n                        ? markFieldsDirty(data[key], [])\r\n                        : { ...markFieldsDirty(data[key]) };\r\n                }\r\n                else {\r\n                    getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\r\n                }\r\n            }\r\n            else {\r\n                deepEqual(data[key], formValues[key])\r\n                    ? delete dirtyFieldsFromValues[key]\r\n                    : (dirtyFieldsFromValues[key] = true);\r\n            }\r\n        }\r\n    }\r\n    return dirtyFieldsFromValues;\r\n}\r\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nvar getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value)\r\n    ? value\r\n    : valueAsNumber\r\n        ? value === ''\r\n            ? NaN\r\n            : value\r\n                ? +value\r\n                : value\r\n        : valueAsDate && isString(value)\r\n            ? new Date(value)\r\n            : setValueAs\r\n                ? setValueAs(value)\r\n                : value;\n\nfunction getFieldValue(_f) {\r\n    const ref = _f.ref;\r\n    if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\r\n        return;\r\n    }\r\n    if (isFileInput(ref)) {\r\n        return ref.files;\r\n    }\r\n    if (isRadioInput(ref)) {\r\n        return getRadioValue(_f.refs).value;\r\n    }\r\n    if (isMultipleSelect(ref)) {\r\n        return [...ref.selectedOptions].map(({ value }) => value);\r\n    }\r\n    if (isCheckBoxInput(ref)) {\r\n        return getCheckboxValue(_f.refs).value;\r\n    }\r\n    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\r\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\r\n    const fields = {};\r\n    for (const name of fieldsNames) {\r\n        const field = get(_fields, name);\r\n        field && set(fields, name, field._f);\r\n    }\r\n    return {\r\n        criteriaMode,\r\n        names: [...fieldsNames],\r\n        fields,\r\n        shouldUseNativeValidation,\r\n    };\r\n};\n\nvar getRuleValue = (rule) => isUndefined(rule)\r\n    ? rule\r\n    : isRegex(rule)\r\n        ? rule.source\r\n        : isObject(rule)\r\n            ? isRegex(rule.value)\r\n                ? rule.value.source\r\n                : rule.value\r\n            : rule;\n\nvar hasValidation = (options) => options.mount &&\r\n    (options.required ||\r\n        options.min ||\r\n        options.max ||\r\n        options.maxLength ||\r\n        options.minLength ||\r\n        options.pattern ||\r\n        options.validate);\n\nfunction schemaErrorLookup(errors, _fields, name) {\r\n    const error = get(errors, name);\r\n    if (error || isKey(name)) {\r\n        return {\r\n            error,\r\n            name,\r\n        };\r\n    }\r\n    const names = name.split('.');\r\n    while (names.length) {\r\n        const fieldName = names.join('.');\r\n        const field = get(_fields, fieldName);\r\n        const foundError = get(errors, fieldName);\r\n        if (field && !Array.isArray(field) && name !== fieldName) {\r\n            return { name };\r\n        }\r\n        if (foundError && foundError.type) {\r\n            return {\r\n                name: fieldName,\r\n                error: foundError,\r\n            };\r\n        }\r\n        names.pop();\r\n    }\r\n    return {\r\n        name,\r\n    };\r\n}\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\r\n    if (mode.isOnAll) {\r\n        return false;\r\n    }\r\n    else if (!isSubmitted && mode.isOnTouch) {\r\n        return !(isTouched || isBlurEvent);\r\n    }\r\n    else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\r\n        return !isBlurEvent;\r\n    }\r\n    else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\r\n        return isBlurEvent;\r\n    }\r\n    return true;\r\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nconst defaultOptions = {\r\n    mode: VALIDATION_MODE.onSubmit,\r\n    reValidateMode: VALIDATION_MODE.onChange,\r\n    shouldFocusError: true,\r\n};\r\nfunction createFormControl(props = {}) {\r\n    let _options = {\r\n        ...defaultOptions,\r\n        ...props,\r\n    };\r\n    let _formState = {\r\n        submitCount: 0,\r\n        isDirty: false,\r\n        isValidating: false,\r\n        isSubmitted: false,\r\n        isSubmitting: false,\r\n        isSubmitSuccessful: false,\r\n        isValid: false,\r\n        touchedFields: {},\r\n        dirtyFields: {},\r\n        errors: {},\r\n    };\r\n    let _fields = {};\r\n    let _defaultValues = cloneObject(_options.defaultValues) || {};\r\n    let _formValues = _options.shouldUnregister\r\n        ? {}\r\n        : cloneObject(_defaultValues);\r\n    let _stateFlags = {\r\n        action: false,\r\n        mount: false,\r\n        watch: false,\r\n    };\r\n    let _names = {\r\n        mount: new Set(),\r\n        unMount: new Set(),\r\n        array: new Set(),\r\n        watch: new Set(),\r\n    };\r\n    let delayErrorCallback;\r\n    let timer = 0;\r\n    let validateFields = {};\r\n    const _proxyFormState = {\r\n        isDirty: false,\r\n        dirtyFields: false,\r\n        touchedFields: false,\r\n        isValidating: false,\r\n        isValid: false,\r\n        errors: false,\r\n    };\r\n    const _subjects = {\r\n        watch: createSubject(),\r\n        array: createSubject(),\r\n        state: createSubject(),\r\n    };\r\n    const validationModeBeforeSubmit = getValidationModes(_options.mode);\r\n    const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\r\n    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\r\n    const debounce = (callback) => (wait) => {\r\n        clearTimeout(timer);\r\n        timer = window.setTimeout(callback, wait);\r\n    };\r\n    const _updateValid = async () => {\r\n        if (_proxyFormState.isValid) {\r\n            const isValid = _options.resolver\r\n                ? isEmptyObject((await _executeSchema()).errors)\r\n                : (await executeBuiltInValidation(_fields, true)).valid;\r\n            if (isValid !== _formState.isValid) {\r\n                _formState.isValid = isValid;\r\n                _subjects.state.next({\r\n                    isValid,\r\n                });\r\n            }\r\n        }\r\n    };\r\n    const _updateFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {\r\n        if (args && method) {\r\n            _stateFlags.action = true;\r\n            if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\r\n                const fieldValues = method(get(_fields, name), args.argA, args.argB);\r\n                shouldSetValues && set(_fields, name, fieldValues);\r\n            }\r\n            if (shouldUpdateFieldsAndState &&\r\n                Array.isArray(get(_formState.errors, name))) {\r\n                const errors = method(get(_formState.errors, name), args.argA, args.argB);\r\n                shouldSetValues && set(_formState.errors, name, errors);\r\n                unsetEmptyArray(_formState.errors, name);\r\n            }\r\n            if (_proxyFormState.touchedFields &&\r\n                shouldUpdateFieldsAndState &&\r\n                Array.isArray(get(_formState.touchedFields, name))) {\r\n                const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\r\n                shouldSetValues && set(_formState.touchedFields, name, touchedFields);\r\n            }\r\n            if (_proxyFormState.dirtyFields) {\r\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\r\n            }\r\n            _subjects.state.next({\r\n                name,\r\n                isDirty: _getDirty(name, values),\r\n                dirtyFields: _formState.dirtyFields,\r\n                errors: _formState.errors,\r\n                isValid: _formState.isValid,\r\n            });\r\n        }\r\n        else {\r\n            set(_formValues, name, values);\r\n        }\r\n    };\r\n    const updateErrors = (name, error) => {\r\n        set(_formState.errors, name, error);\r\n        _subjects.state.next({\r\n            errors: _formState.errors,\r\n        });\r\n    };\r\n    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\r\n        const field = get(_fields, name);\r\n        if (field) {\r\n            const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\r\n            isUndefined(defaultValue) ||\r\n                (ref && ref.defaultChecked) ||\r\n                shouldSkipSetValueAs\r\n                ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f))\r\n                : setFieldValue(name, defaultValue);\r\n            _stateFlags.mount && _updateValid();\r\n        }\r\n    };\r\n    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {\r\n        let shouldUpdateField = false;\r\n        let isPreviousDirty = false;\r\n        const output = {\r\n            name,\r\n        };\r\n        if (_proxyFormState.isDirty) {\r\n            isPreviousDirty = _formState.isDirty;\r\n            _formState.isDirty = output.isDirty = _getDirty();\r\n            shouldUpdateField = isPreviousDirty !== output.isDirty;\r\n        }\r\n        if (_proxyFormState.dirtyFields && (!isBlurEvent || shouldDirty)) {\r\n            isPreviousDirty = get(_formState.dirtyFields, name);\r\n            const isCurrentFieldPristine = deepEqual(get(_defaultValues, name), fieldValue);\r\n            isCurrentFieldPristine\r\n                ? unset(_formState.dirtyFields, name)\r\n                : set(_formState.dirtyFields, name, true);\r\n            output.dirtyFields = _formState.dirtyFields;\r\n            shouldUpdateField =\r\n                shouldUpdateField || isPreviousDirty !== !isCurrentFieldPristine;\r\n        }\r\n        if (isBlurEvent) {\r\n            const isPreviousFieldTouched = get(_formState.touchedFields, name);\r\n            if (!isPreviousFieldTouched) {\r\n                set(_formState.touchedFields, name, isBlurEvent);\r\n                output.touchedFields = _formState.touchedFields;\r\n                shouldUpdateField =\r\n                    shouldUpdateField ||\r\n                        (_proxyFormState.touchedFields &&\r\n                            isPreviousFieldTouched !== isBlurEvent);\r\n            }\r\n        }\r\n        shouldUpdateField && shouldRender && _subjects.state.next(output);\r\n        return shouldUpdateField ? output : {};\r\n    };\r\n    const shouldRenderByError = (name, isValid, error, fieldState) => {\r\n        const previousFieldError = get(_formState.errors, name);\r\n        const shouldUpdateValid = _proxyFormState.isValid &&\r\n            isBoolean(isValid) &&\r\n            _formState.isValid !== isValid;\r\n        if (props.delayError && error) {\r\n            delayErrorCallback = debounce(() => updateErrors(name, error));\r\n            delayErrorCallback(props.delayError);\r\n        }\r\n        else {\r\n            clearTimeout(timer);\r\n            delayErrorCallback = null;\r\n            error\r\n                ? set(_formState.errors, name, error)\r\n                : unset(_formState.errors, name);\r\n        }\r\n        if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\r\n            !isEmptyObject(fieldState) ||\r\n            shouldUpdateValid) {\r\n            const updatedFormState = {\r\n                ...fieldState,\r\n                ...(shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}),\r\n                errors: _formState.errors,\r\n                name,\r\n            };\r\n            _formState = {\r\n                ..._formState,\r\n                ...updatedFormState,\r\n            };\r\n            _subjects.state.next(updatedFormState);\r\n        }\r\n        validateFields[name]--;\r\n        if (_proxyFormState.isValidating &&\r\n            !Object.values(validateFields).some((v) => v)) {\r\n            _subjects.state.next({\r\n                isValidating: false,\r\n            });\r\n            validateFields = {};\r\n        }\r\n    };\r\n    const _executeSchema = async (name) => await _options.resolver(_formValues, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));\r\n    const executeSchemaAndUpdateState = async (names) => {\r\n        const { errors } = await _executeSchema();\r\n        if (names) {\r\n            for (const name of names) {\r\n                const error = get(errors, name);\r\n                error\r\n                    ? set(_formState.errors, name, error)\r\n                    : unset(_formState.errors, name);\r\n            }\r\n        }\r\n        else {\r\n            _formState.errors = errors;\r\n        }\r\n        return errors;\r\n    };\r\n    const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {\r\n        valid: true,\r\n    }) => {\r\n        for (const name in fields) {\r\n            const field = fields[name];\r\n            if (field) {\r\n                const { _f, ...fieldValue } = field;\r\n                if (_f) {\r\n                    const isFieldArrayRoot = _names.array.has(_f.name);\r\n                    const fieldError = await validateField(field, get(_formValues, _f.name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation, isFieldArrayRoot);\r\n                    if (fieldError[_f.name]) {\r\n                        if (_f.name === context.name) {\r\n                            context.error = fieldError[context.name];\r\n                        }\r\n                        context.valid = false;\r\n                        if (shouldOnlyCheckValid) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    !shouldOnlyCheckValid &&\r\n                        (get(fieldError, _f.name)\r\n                            ? isFieldArrayRoot\r\n                                ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name)\r\n                                : set(_formState.errors, _f.name, fieldError[_f.name])\r\n                            : unset(_formState.errors, _f.name));\r\n                }\r\n                fieldValue &&\r\n                    (await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context));\r\n            }\r\n        }\r\n        return context;\r\n    };\r\n    const _removeUnmounted = () => {\r\n        for (const name of _names.unMount) {\r\n            const field = get(_fields, name);\r\n            field &&\r\n                (field._f.refs\r\n                    ? field._f.refs.every((ref) => !live(ref))\r\n                    : !live(field._f.ref)) &&\r\n                unregister(name);\r\n        }\r\n        _names.unMount = new Set();\r\n    };\r\n    const _getDirty = (name, data) => (name && data && set(_formValues, name, data),\r\n        !deepEqual(getValues(), _defaultValues));\r\n    const _getWatch = (names, defaultValue, isGlobal) => generateWatchOutput(names, _names, {\r\n        ...(_stateFlags.mount\r\n            ? _formValues\r\n            : isUndefined(defaultValue)\r\n                ? _defaultValues\r\n                : isString(names)\r\n                    ? { [names]: defaultValue }\r\n                    : defaultValue),\r\n    }, isGlobal);\r\n    const _getFieldArray = (name) => compact(get(_stateFlags.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []));\r\n    const setFieldValue = (name, value, options = {}) => {\r\n        const field = get(_fields, name);\r\n        let fieldValue = value;\r\n        if (field) {\r\n            const fieldReference = field._f;\r\n            if (fieldReference) {\r\n                !fieldReference.disabled &&\r\n                    set(_formValues, name, getFieldValueAs(value, fieldReference));\r\n                fieldValue =\r\n                    isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\r\n                        ? ''\r\n                        : value;\r\n                if (isMultipleSelect(fieldReference.ref)) {\r\n                    [...fieldReference.ref.options].forEach((optionRef) => (optionRef.selected = fieldValue.includes(optionRef.value)));\r\n                }\r\n                else if (fieldReference.refs) {\r\n                    if (isCheckBoxInput(fieldReference.ref)) {\r\n                        fieldReference.refs.length > 1\r\n                            ? fieldReference.refs.forEach((checkboxRef) => (!checkboxRef.defaultChecked || !checkboxRef.disabled) &&\r\n                                (checkboxRef.checked = Array.isArray(fieldValue)\r\n                                    ? !!fieldValue.find((data) => data === checkboxRef.value)\r\n                                    : fieldValue === checkboxRef.value))\r\n                            : fieldReference.refs[0] &&\r\n                                (fieldReference.refs[0].checked = !!fieldValue);\r\n                    }\r\n                    else {\r\n                        fieldReference.refs.forEach((radioRef) => (radioRef.checked = radioRef.value === fieldValue));\r\n                    }\r\n                }\r\n                else if (isFileInput(fieldReference.ref)) {\r\n                    fieldReference.ref.value = '';\r\n                }\r\n                else {\r\n                    fieldReference.ref.value = fieldValue;\r\n                    if (!fieldReference.ref.type) {\r\n                        _subjects.watch.next({\r\n                            name,\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        (options.shouldDirty || options.shouldTouch) &&\r\n            updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);\r\n        options.shouldValidate && trigger(name);\r\n    };\r\n    const setValues = (name, value, options) => {\r\n        for (const fieldKey in value) {\r\n            const fieldValue = value[fieldKey];\r\n            const fieldName = `${name}.${fieldKey}`;\r\n            const field = get(_fields, fieldName);\r\n            (_names.array.has(name) ||\r\n                !isPrimitive(fieldValue) ||\r\n                (field && !field._f)) &&\r\n                !isDateObject(fieldValue)\r\n                ? setValues(fieldName, fieldValue, options)\r\n                : setFieldValue(fieldName, fieldValue, options);\r\n        }\r\n    };\r\n    const setValue = (name, value, options = {}) => {\r\n        const field = get(_fields, name);\r\n        const isFieldArray = _names.array.has(name);\r\n        const cloneValue = cloneObject(value);\r\n        set(_formValues, name, cloneValue);\r\n        if (isFieldArray) {\r\n            _subjects.array.next({\r\n                name,\r\n                values: _formValues,\r\n            });\r\n            if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\r\n                options.shouldDirty) {\r\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\r\n                _subjects.state.next({\r\n                    name,\r\n                    dirtyFields: _formState.dirtyFields,\r\n                    isDirty: _getDirty(name, cloneValue),\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            field && !field._f && !isNullOrUndefined(cloneValue)\r\n                ? setValues(name, cloneValue, options)\r\n                : setFieldValue(name, cloneValue, options);\r\n        }\r\n        isWatched(name, _names) && _subjects.state.next({});\r\n        _subjects.watch.next({\r\n            name,\r\n        });\r\n    };\r\n    const onChange = async (event) => {\r\n        const target = event.target;\r\n        let name = target.name;\r\n        const field = get(_fields, name);\r\n        if (field) {\r\n            let error;\r\n            let isValid;\r\n            const fieldValue = target.type\r\n                ? getFieldValue(field._f)\r\n                : getEventValue(event);\r\n            const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\r\n            const shouldSkipValidation = (!hasValidation(field._f) &&\r\n                !_options.resolver &&\r\n                !get(_formState.errors, name) &&\r\n                !field._f.deps) ||\r\n                skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\r\n            const watched = isWatched(name, _names, isBlurEvent);\r\n            set(_formValues, name, fieldValue);\r\n            if (isBlurEvent) {\r\n                field._f.onBlur && field._f.onBlur(event);\r\n                delayErrorCallback && delayErrorCallback(0);\r\n            }\r\n            else if (field._f.onChange) {\r\n                field._f.onChange(event);\r\n            }\r\n            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\r\n            const shouldRender = !isEmptyObject(fieldState) || watched;\r\n            !isBlurEvent &&\r\n                _subjects.watch.next({\r\n                    name,\r\n                    type: event.type,\r\n                });\r\n            if (shouldSkipValidation) {\r\n                _proxyFormState.isValid && _updateValid();\r\n                return (shouldRender &&\r\n                    _subjects.state.next({ name, ...(watched ? {} : fieldState) }));\r\n            }\r\n            !isBlurEvent && watched && _subjects.state.next({});\r\n            validateFields[name] = validateFields[name]\r\n                ? validateFields[name] + 1\r\n                : 1;\r\n            _subjects.state.next({\r\n                isValidating: true,\r\n            });\r\n            if (_options.resolver) {\r\n                const { errors } = await _executeSchema([name]);\r\n                const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\r\n                const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\r\n                error = errorLookupResult.error;\r\n                name = errorLookupResult.name;\r\n                isValid = isEmptyObject(errors);\r\n            }\r\n            else {\r\n                if (_proxyFormState.isValid) {\r\n                    const buildInValidationResult = await executeBuiltInValidation(_fields, true, {\r\n                        name,\r\n                        valid: true,\r\n                    });\r\n                    error = buildInValidationResult.error || {};\r\n                    isValid = buildInValidationResult.valid;\r\n                }\r\n                if (!error || isEmptyObject(error)) {\r\n                    error = (await validateField(field, get(_formValues, name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\r\n                }\r\n            }\r\n            field._f.deps &&\r\n                trigger(field._f.deps);\r\n            shouldRenderByError(name, isValid, error, fieldState);\r\n        }\r\n    };\r\n    const trigger = async (name, options = {}) => {\r\n        let isValid;\r\n        let validationResult;\r\n        const fieldNames = convertToArrayPayload(name);\r\n        _subjects.state.next({\r\n            isValidating: true,\r\n        });\r\n        if (_options.resolver) {\r\n            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\r\n            isValid = isEmptyObject(errors);\r\n            validationResult = name\r\n                ? !fieldNames.some((name) => get(errors, name))\r\n                : isValid;\r\n        }\r\n        else if (name) {\r\n            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {\r\n                const field = get(_fields, fieldName);\r\n                return (await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field)).valid;\r\n            }))).every(Boolean);\r\n            !(!validationResult && !_formState.isValid) && _updateValid();\r\n        }\r\n        else {\r\n            validationResult = isValid = (await executeBuiltInValidation(_fields))\r\n                .valid;\r\n        }\r\n        _subjects.state.next({\r\n            ...(!isString(name) ||\r\n                (_proxyFormState.isValid && isValid !== _formState.isValid)\r\n                ? {}\r\n                : { name }),\r\n            ...(_options.resolver || !name ? { isValid } : {}),\r\n            errors: _formState.errors,\r\n            isValidating: false,\r\n        });\r\n        options.shouldFocus &&\r\n            !validationResult &&\r\n            focusFieldBy(_fields, (key) => key && get(_formState.errors, key), name ? fieldNames : _names.mount);\r\n        return validationResult;\r\n    };\r\n    const getValues = (fieldNames) => {\r\n        const values = {\r\n            ..._defaultValues,\r\n            ...(_stateFlags.mount ? _formValues : {}),\r\n        };\r\n        return isUndefined(fieldNames)\r\n            ? values\r\n            : isString(fieldNames)\r\n                ? get(values, fieldNames)\r\n                : fieldNames.map((name) => get(values, name));\r\n    };\r\n    const getFieldState = (name, formState) => ({\r\n        invalid: !!get((formState || _formState).errors, name),\r\n        isDirty: !!get((formState || _formState).dirtyFields, name),\r\n        isTouched: !!get((formState || _formState).touchedFields, name),\r\n        error: get((formState || _formState).errors, name),\r\n    });\r\n    const clearErrors = (name) => {\r\n        name\r\n            ? convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName))\r\n            : (_formState.errors = {});\r\n        _subjects.state.next({\r\n            errors: _formState.errors,\r\n        });\r\n    };\r\n    const setError = (name, error, options) => {\r\n        const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\r\n        set(_formState.errors, name, {\r\n            ...error,\r\n            ref,\r\n        });\r\n        _subjects.state.next({\r\n            name,\r\n            errors: _formState.errors,\r\n            isValid: false,\r\n        });\r\n        options && options.shouldFocus && ref && ref.focus && ref.focus();\r\n    };\r\n    const watch = (name, defaultValue) => isFunction(name)\r\n        ? _subjects.watch.subscribe({\r\n            next: (payload) => name(_getWatch(undefined, defaultValue), payload),\r\n        })\r\n        : _getWatch(name, defaultValue, true);\r\n    const unregister = (name, options = {}) => {\r\n        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\r\n            _names.mount.delete(fieldName);\r\n            _names.array.delete(fieldName);\r\n            if (get(_fields, fieldName)) {\r\n                if (!options.keepValue) {\r\n                    unset(_fields, fieldName);\r\n                    unset(_formValues, fieldName);\r\n                }\r\n                !options.keepError && unset(_formState.errors, fieldName);\r\n                !options.keepDirty && unset(_formState.dirtyFields, fieldName);\r\n                !options.keepTouched && unset(_formState.touchedFields, fieldName);\r\n                !_options.shouldUnregister &&\r\n                    !options.keepDefaultValue &&\r\n                    unset(_defaultValues, fieldName);\r\n            }\r\n        }\r\n        _subjects.watch.next({});\r\n        _subjects.state.next({\r\n            ..._formState,\r\n            ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\r\n        });\r\n        !options.keepIsValid && _updateValid();\r\n    };\r\n    const register = (name, options = {}) => {\r\n        let field = get(_fields, name);\r\n        const disabledIsDefined = isBoolean(options.disabled);\r\n        set(_fields, name, {\r\n            ...(field || {}),\r\n            _f: {\r\n                ...(field && field._f ? field._f : { ref: { name } }),\r\n                name,\r\n                mount: true,\r\n                ...options,\r\n            },\r\n        });\r\n        _names.mount.add(name);\r\n        field\r\n            ? disabledIsDefined &&\r\n                set(_formValues, name, options.disabled\r\n                    ? undefined\r\n                    : get(_formValues, name, getFieldValue(field._f)))\r\n            : updateValidAndValue(name, true, options.value);\r\n        return {\r\n            ...(disabledIsDefined ? { disabled: options.disabled } : {}),\r\n            ...(_options.shouldUseNativeValidation\r\n                ? {\r\n                    required: !!options.required,\r\n                    min: getRuleValue(options.min),\r\n                    max: getRuleValue(options.max),\r\n                    minLength: getRuleValue(options.minLength),\r\n                    maxLength: getRuleValue(options.maxLength),\r\n                    pattern: getRuleValue(options.pattern),\r\n                }\r\n                : {}),\r\n            name,\r\n            onChange,\r\n            onBlur: onChange,\r\n            ref: (ref) => {\r\n                if (ref) {\r\n                    register(name, options);\r\n                    field = get(_fields, name);\r\n                    const fieldRef = isUndefined(ref.value)\r\n                        ? ref.querySelectorAll\r\n                            ? ref.querySelectorAll('input,select,textarea')[0] || ref\r\n                            : ref\r\n                        : ref;\r\n                    const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\r\n                    const refs = field._f.refs || [];\r\n                    if (radioOrCheckbox\r\n                        ? refs.find((option) => option === fieldRef)\r\n                        : fieldRef === field._f.ref) {\r\n                        return;\r\n                    }\r\n                    set(_fields, name, {\r\n                        _f: {\r\n                            ...field._f,\r\n                            ...(radioOrCheckbox\r\n                                ? {\r\n                                    refs: [\r\n                                        ...refs.filter(live),\r\n                                        fieldRef,\r\n                                        ...(Array.isArray(get(_defaultValues, name)) ? [{}] : []),\r\n                                    ],\r\n                                    ref: { type: fieldRef.type, name },\r\n                                }\r\n                                : { ref: fieldRef }),\r\n                        },\r\n                    });\r\n                    updateValidAndValue(name, false, undefined, fieldRef);\r\n                }\r\n                else {\r\n                    field = get(_fields, name, {});\r\n                    if (field._f) {\r\n                        field._f.mount = false;\r\n                    }\r\n                    (_options.shouldUnregister || options.shouldUnregister) &&\r\n                        !(isNameInFieldArray(_names.array, name) && _stateFlags.action) &&\r\n                        _names.unMount.add(name);\r\n                }\r\n            },\r\n        };\r\n    };\r\n    const _focusError = () => _options.shouldFocusError &&\r\n        focusFieldBy(_fields, (key) => key && get(_formState.errors, key), _names.mount);\r\n    const handleSubmit = (onValid, onInvalid) => async (e) => {\r\n        if (e) {\r\n            e.preventDefault && e.preventDefault();\r\n            e.persist && e.persist();\r\n        }\r\n        let hasNoPromiseError = true;\r\n        let fieldValues = cloneObject(_formValues);\r\n        _subjects.state.next({\r\n            isSubmitting: true,\r\n        });\r\n        try {\r\n            if (_options.resolver) {\r\n                const { errors, values } = await _executeSchema();\r\n                _formState.errors = errors;\r\n                fieldValues = values;\r\n            }\r\n            else {\r\n                await executeBuiltInValidation(_fields);\r\n            }\r\n            if (isEmptyObject(_formState.errors)) {\r\n                _subjects.state.next({\r\n                    errors: {},\r\n                    isSubmitting: true,\r\n                });\r\n                await onValid(fieldValues, e);\r\n            }\r\n            else {\r\n                if (onInvalid) {\r\n                    await onInvalid({ ..._formState.errors }, e);\r\n                }\r\n                _focusError();\r\n            }\r\n        }\r\n        catch (err) {\r\n            hasNoPromiseError = false;\r\n            throw err;\r\n        }\r\n        finally {\r\n            _formState.isSubmitted = true;\r\n            _subjects.state.next({\r\n                isSubmitted: true,\r\n                isSubmitting: false,\r\n                isSubmitSuccessful: isEmptyObject(_formState.errors) && hasNoPromiseError,\r\n                submitCount: _formState.submitCount + 1,\r\n                errors: _formState.errors,\r\n            });\r\n        }\r\n    };\r\n    const resetField = (name, options = {}) => {\r\n        if (get(_fields, name)) {\r\n            if (isUndefined(options.defaultValue)) {\r\n                setValue(name, get(_defaultValues, name));\r\n            }\r\n            else {\r\n                setValue(name, options.defaultValue);\r\n                set(_defaultValues, name, options.defaultValue);\r\n            }\r\n            if (!options.keepTouched) {\r\n                unset(_formState.touchedFields, name);\r\n            }\r\n            if (!options.keepDirty) {\r\n                unset(_formState.dirtyFields, name);\r\n                _formState.isDirty = options.defaultValue\r\n                    ? _getDirty(name, get(_defaultValues, name))\r\n                    : _getDirty();\r\n            }\r\n            if (!options.keepError) {\r\n                unset(_formState.errors, name);\r\n                _proxyFormState.isValid && _updateValid();\r\n            }\r\n            _subjects.state.next({ ..._formState });\r\n        }\r\n    };\r\n    const _reset = (formValues, keepStateOptions = {}) => {\r\n        const updatedValues = formValues || _defaultValues;\r\n        const cloneUpdatedValues = cloneObject(updatedValues);\r\n        const values = formValues && !isEmptyObject(formValues)\r\n            ? cloneUpdatedValues\r\n            : _defaultValues;\r\n        if (!keepStateOptions.keepDefaultValues) {\r\n            _defaultValues = updatedValues;\r\n        }\r\n        if (!keepStateOptions.keepValues) {\r\n            if (keepStateOptions.keepDirtyValues) {\r\n                for (const fieldName of _names.mount) {\r\n                    get(_formState.dirtyFields, fieldName)\r\n                        ? set(values, fieldName, get(_formValues, fieldName))\r\n                        : setValue(fieldName, get(values, fieldName));\r\n                }\r\n            }\r\n            else {\r\n                if (isWeb && isUndefined(formValues)) {\r\n                    for (const name of _names.mount) {\r\n                        const field = get(_fields, name);\r\n                        if (field && field._f) {\r\n                            const fieldReference = Array.isArray(field._f.refs)\r\n                                ? field._f.refs[0]\r\n                                : field._f.ref;\r\n                            if (isHTMLElement(fieldReference)) {\r\n                                const form = fieldReference.closest('form');\r\n                                if (form) {\r\n                                    form.reset();\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                _fields = {};\r\n            }\r\n            _formValues = props.shouldUnregister\r\n                ? keepStateOptions.keepDefaultValues\r\n                    ? cloneObject(_defaultValues)\r\n                    : {}\r\n                : cloneUpdatedValues;\r\n            _subjects.array.next({\r\n                values,\r\n            });\r\n            _subjects.watch.next({\r\n                values,\r\n            });\r\n        }\r\n        _names = {\r\n            mount: new Set(),\r\n            unMount: new Set(),\r\n            array: new Set(),\r\n            watch: new Set(),\r\n            watchAll: false,\r\n            focus: '',\r\n        };\r\n        _stateFlags.mount =\r\n            !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\r\n        _stateFlags.watch = !!props.shouldUnregister;\r\n        _subjects.state.next({\r\n            submitCount: keepStateOptions.keepSubmitCount\r\n                ? _formState.submitCount\r\n                : 0,\r\n            isDirty: keepStateOptions.keepDirty || keepStateOptions.keepDirtyValues\r\n                ? _formState.isDirty\r\n                : !!(keepStateOptions.keepDefaultValues &&\r\n                    !deepEqual(formValues, _defaultValues)),\r\n            isSubmitted: keepStateOptions.keepIsSubmitted\r\n                ? _formState.isSubmitted\r\n                : false,\r\n            dirtyFields: keepStateOptions.keepDirty || keepStateOptions.keepDirtyValues\r\n                ? _formState.dirtyFields\r\n                : keepStateOptions.keepDefaultValues && formValues\r\n                    ? getDirtyFields(_defaultValues, formValues)\r\n                    : {},\r\n            touchedFields: keepStateOptions.keepTouched\r\n                ? _formState.touchedFields\r\n                : {},\r\n            errors: keepStateOptions.keepErrors ? _formState.errors : {},\r\n            isSubmitting: false,\r\n            isSubmitSuccessful: false,\r\n        });\r\n    };\r\n    const reset = (formValues, keepStateOptions) => _reset(isFunction(formValues)\r\n        ? formValues(_formValues)\r\n        : formValues, keepStateOptions);\r\n    const setFocus = (name, options = {}) => {\r\n        const field = get(_fields, name);\r\n        const fieldReference = field && field._f;\r\n        if (fieldReference) {\r\n            const fieldRef = fieldReference.refs\r\n                ? fieldReference.refs[0]\r\n                : fieldReference.ref;\r\n            if (fieldRef.focus) {\r\n                fieldRef.focus();\r\n                options.shouldSelect && fieldRef.select();\r\n            }\r\n        }\r\n    };\r\n    return {\r\n        control: {\r\n            register,\r\n            unregister,\r\n            getFieldState,\r\n            _executeSchema,\r\n            _focusError,\r\n            _getWatch,\r\n            _getDirty,\r\n            _updateValid,\r\n            _removeUnmounted,\r\n            _updateFieldArray,\r\n            _getFieldArray,\r\n            _subjects,\r\n            _proxyFormState,\r\n            get _fields() {\r\n                return _fields;\r\n            },\r\n            get _formValues() {\r\n                return _formValues;\r\n            },\r\n            get _stateFlags() {\r\n                return _stateFlags;\r\n            },\r\n            set _stateFlags(value) {\r\n                _stateFlags = value;\r\n            },\r\n            get _defaultValues() {\r\n                return _defaultValues;\r\n            },\r\n            get _names() {\r\n                return _names;\r\n            },\r\n            set _names(value) {\r\n                _names = value;\r\n            },\r\n            get _formState() {\r\n                return _formState;\r\n            },\r\n            set _formState(value) {\r\n                _formState = value;\r\n            },\r\n            get _options() {\r\n                return _options;\r\n            },\r\n            set _options(value) {\r\n                _options = {\r\n                    ..._options,\r\n                    ...value,\r\n                };\r\n            },\r\n        },\r\n        trigger,\r\n        register,\r\n        handleSubmit,\r\n        watch,\r\n        setValue,\r\n        getValues,\r\n        reset,\r\n        resetField,\r\n        clearErrors,\r\n        unregister,\r\n        setError,\r\n        setFocus,\r\n        getFieldState,\r\n    };\r\n}\n\n/**\r\n * Custom hook to manage the entire form.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\r\n *\r\n * @param props - form configuration and validation parameters.\r\n *\r\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\r\n *   const onSubmit = data => console.log(data);\r\n *\r\n *   console.log(watch(\"example\"));\r\n *\r\n *   return (\r\n *     <form onSubmit={handleSubmit(onSubmit)}>\r\n *       <input defaultValue=\"test\" {...register(\"example\")} />\r\n *       <input {...register(\"exampleRequired\", { required: true })} />\r\n *       {errors.exampleRequired && <span>This field is required</span>}\r\n *       <input type=\"submit\" />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useForm(props = {}) {\r\n    const _formControl = React.useRef();\r\n    const [formState, updateFormState] = React.useState({\r\n        isDirty: false,\r\n        isValidating: false,\r\n        isSubmitted: false,\r\n        isSubmitting: false,\r\n        isSubmitSuccessful: false,\r\n        isValid: false,\r\n        submitCount: 0,\r\n        dirtyFields: {},\r\n        touchedFields: {},\r\n        errors: {},\r\n        defaultValues: props.defaultValues,\r\n    });\r\n    if (!_formControl.current) {\r\n        _formControl.current = {\r\n            ...createFormControl(props),\r\n            formState,\r\n        };\r\n    }\r\n    const control = _formControl.current.control;\r\n    control._options = props;\r\n    useSubscribe({\r\n        subject: control._subjects.state,\r\n        callback: React.useCallback((value) => {\r\n            if (shouldRenderFormState(value, control._proxyFormState, true)) {\r\n                control._formState = {\r\n                    ...control._formState,\r\n                    ...value,\r\n                };\r\n                updateFormState({ ...control._formState });\r\n            }\r\n        }, [control]),\r\n    });\r\n    React.useEffect(() => {\r\n        if (!control._stateFlags.mount) {\r\n            control._proxyFormState.isValid && control._updateValid();\r\n            control._stateFlags.mount = true;\r\n        }\r\n        if (control._stateFlags.watch) {\r\n            control._stateFlags.watch = false;\r\n            control._subjects.state.next({});\r\n        }\r\n        control._removeUnmounted();\r\n    });\r\n    React.useEffect(() => {\r\n        formState.submitCount && control._focusError();\r\n    }, [control, formState.submitCount]);\r\n    _formControl.current.formState = getProxyFormState(formState, control);\r\n    return _formControl.current;\r\n}\n\nexport { Controller, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };\n//# sourceMappingURL=index.esm.mjs.map\n"],"names":["isCheckBoxInput","element","isDateObject","value","isNullOrUndefined","isObjectType","isObject","getEventValue","event","getNodeParentName","name","isNameInFieldArray","names","compact","isUndefined","val","get","obj","path","defaultValue","result","key","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","HookFormContext","React","useFormContext","getProxyFormState","formState","control","localProxyFormState","isRoot","_key","isEmptyObject","shouldRenderFormState","formStateData","_proxyFormState","convertToArrayPayload","shouldSubscribeByName","signalName","exact","currentName","useSubscribe","props","_props","subscription","useFormState","methods","disabled","updateFormState","_mounted","_localProxyFormState","_name","isDirty","isString","generateWatchOutput","_names","formValues","isGlobal","fieldName","isPlainObject","tempObject","prototypeCopy","isWeb","cloneObject","data","copy","isArray","useWatch","fieldValues","updateValue","useController","shouldUnregister","isArrayField","_registerProps","updateMounted","field","_shouldUnregisterField","elm","message","Controller","appendErrors","validateAllFieldCriteria","errors","type","isKey","stringToPath","input","set","object","index","tempPath","length","lastIndex","newValue","objValue","focusFieldBy","fields","callback","fieldsNames","_f","currentField","isWatched","isBlurEvent","watchName","updateFieldArrayRootError","error","fieldArrayErrors","isBoolean","isFileInput","isFunction","isMessage","isRadioInput","isRegex","defaultResult","validResult","getCheckboxValue","options","values","option","defaultReturn","getRadioValue","previous","getValidateError","ref","getValueAndMessage","validationData","validateField","inputValue","shouldUseNativeValidation","isFieldArray","refs","required","maxLength","minLength","min","max","pattern","validate","valueAsNumber","mount","inputRef","setCustomValidity","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueNumber","valueDate","convertTimeToDate","time","isTime","isWeek","maxLengthOutput","minLengthOutput","patternValue","validateError","validationResult","getValidationModes","mode","baseGet","updatePath","isEmptyArray","unset","childObject","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","createSubject","_observers","observer","o","isPrimitive","deepEqual","object1","object2","keys1","keys2","val1","val2","isHTMLElement","owner","ElementClass","isMultipleSelect","live","objectHasFunction","markFieldsDirty","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","defaultValues","getFieldValueAs","valueAsDate","setValueAs","getFieldValue","getResolverOptions","_fields","criteriaMode","getRuleValue","rule","hasValidation","schemaErrorLookup","foundError","skipValidation","isTouched","isSubmitted","reValidateMode","unsetEmptyArray","defaultOptions","createFormControl","_options","_formState","_defaultValues","_formValues","_stateFlags","delayErrorCallback","timer","validateFields","_subjects","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","wait","_updateValid","isValid","_executeSchema","executeBuiltInValidation","_updateFieldArray","method","args","shouldSetValues","shouldUpdateFieldsAndState","touchedFields","_getDirty","updateErrors","updateValidAndValue","shouldSkipSetValueAs","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","shouldUpdateField","isPreviousDirty","output","isCurrentFieldPristine","isPreviousFieldTouched","shouldRenderByError","fieldState","previousFieldError","shouldUpdateValid","updatedFormState","v","executeSchemaAndUpdateState","shouldOnlyCheckValid","context","isFieldArrayRoot","fieldError","_removeUnmounted","unregister","getValues","_getWatch","_getFieldArray","fieldReference","optionRef","checkboxRef","radioRef","trigger","setValues","fieldKey","setValue","cloneValue","onChange","target","shouldSkipValidation","watched","previousErrorLookupResult","errorLookupResult","buildInValidationResult","fieldNames","getFieldState","clearErrors","inputName","setError","watch","payload","register","disabledIsDefined","fieldRef","radioOrCheckbox","_focusError","handleSubmit","onValid","onInvalid","e","hasNoPromiseError","err","resetField","_reset","keepStateOptions","updatedValues","cloneUpdatedValues","form","useForm","_formControl"],"mappings":"wCAEA,IAAIA,GAAmBC,GAAYA,EAAQ,OAAS,WAEhDC,EAAgBC,GAAUA,aAAiB,KAE3CC,EAAqBD,GAAUA,GAAS,KAE5C,MAAME,GAAgBF,GAAU,OAAOA,GAAU,SACjD,IAAIG,EAAYH,GAAU,CAACC,EAAkBD,CAAK,GAC9C,CAAC,MAAM,QAAQA,CAAK,GACpBE,GAAaF,CAAK,GAClB,CAACD,EAAaC,CAAK,EAEnBI,GAAiBC,GAAUF,EAASE,CAAK,GAAKA,EAAM,OAClDR,GAAgBQ,EAAM,MAAM,EACxBA,EAAM,OAAO,QACbA,EAAM,OAAO,MACjBA,EAEFC,GAAqBC,GAASA,EAAK,UAAU,EAAGA,EAAK,OAAO,aAAa,CAAC,GAAKA,EAE/EC,GAAqB,CAACC,EAAOF,IAASE,EAAM,IAAIH,GAAkBC,CAAI,CAAC,EAEvEG,GAAWV,GAAU,MAAM,QAAQA,CAAK,EAAIA,EAAM,OAAO,OAAO,EAAI,GAEpEW,EAAeC,GAAQA,IAAQ,OAE/BC,EAAM,CAACC,EAAKC,EAAMC,IAAiB,CACnC,GAAI,CAACD,GAAQ,CAACZ,EAASW,CAAG,EACtB,OAAOE,EAEX,MAAMC,EAASP,GAAQK,EAAK,MAAM,WAAW,CAAC,EAAE,OAAO,CAACE,EAAQC,IAAQjB,EAAkBgB,CAAM,EAAIA,EAASA,EAAOC,CAAG,EAAGJ,CAAG,EAC7H,OAAOH,EAAYM,CAAM,GAAKA,IAAWH,EACnCH,EAAYG,EAAIC,CAAI,CAAC,EACjBC,EACAF,EAAIC,CAAI,EACZE,CACV,EAEA,MAAME,GAAS,CACX,KAAM,OACN,UAAW,WACX,OAAQ,QACZ,EACMC,EAAkB,CACpB,OAAQ,SACR,SAAU,WACV,SAAU,WACV,UAAW,YACX,IAAK,KACT,EACMC,EAAyB,CAC3B,IAAK,MACL,IAAK,MACL,UAAW,YACX,UAAW,YACX,QAAS,UACT,SAAU,WACV,SAAU,UACd,EAEMC,GAAkBC,EAAM,cAAc,IAAI,EA+B1CC,GAAiB,IAAMD,EAAM,WAAWD,EAAe,EAoC7D,IAAIG,GAAoB,CAACC,EAAWC,EAASC,EAAqBC,EAAS,KAAS,CAChF,MAAMZ,EAAS,CACX,cAAeU,EAAQ,cAC/B,EACI,UAAWT,KAAOQ,EACd,OAAO,eAAeT,EAAQC,EAAK,CAC/B,IAAK,IAAM,CACP,MAAMY,EAAOZ,EACb,OAAIS,EAAQ,gBAAgBG,CAAI,IAAMV,EAAgB,MAClDO,EAAQ,gBAAgBG,CAAI,EAAI,CAACD,GAAUT,EAAgB,KAE/DQ,IAAwBA,EAAoBE,CAAI,EAAI,IAC7CJ,EAAUI,CAAI,CACxB,CACb,CAAS,EAEL,OAAOb,CACX,EAEIc,EAAiB/B,GAAUG,EAASH,CAAK,GAAK,CAAC,OAAO,KAAKA,CAAK,EAAE,OAElEgC,GAAwB,CAACC,EAAeC,EAAiBL,IAAW,CACpE,KAAM,CAAE,KAAAtB,EAAM,GAAGmB,CAAS,EAAKO,EAC/B,OAAQF,EAAcL,CAAS,GAC3B,OAAO,KAAKA,CAAS,EAAE,QAAU,OAAO,KAAKQ,CAAe,EAAE,QAC9D,OAAO,KAAKR,CAAS,EAAE,KAAMR,GAAQgB,EAAgBhB,CAAG,KACnD,CAACW,GAAUT,EAAgB,IAAI,CAC5C,EAEIe,GAAyBnC,GAAW,MAAM,QAAQA,CAAK,EAAIA,EAAQ,CAACA,CAAK,EAEzEoC,GAAwB,CAAC7B,EAAM8B,EAAYC,IAAUA,GAASD,EAC5D9B,IAAS8B,EACT,CAAC9B,GACC,CAAC8B,GACD9B,IAAS8B,GACTF,GAAsB5B,CAAI,EAAE,KAAMgC,GAAgBA,IAC7CA,EAAY,WAAWF,CAAU,GAC9BA,EAAW,WAAWE,CAAW,EAAE,EAEnD,SAASC,GAAaC,EAAO,CACzB,MAAMC,EAASnB,EAAM,OAAOkB,CAAK,EACjCC,EAAO,QAAUD,EACjBlB,EAAM,UAAU,IAAM,CAClB,MAAMoB,EAAe,CAACF,EAAM,UACxBC,EAAO,QAAQ,QAAQ,UAAU,CAC7B,KAAMA,EAAO,QAAQ,QACrC,CAAa,EACL,MAAO,IAAM,CACTC,GAAgBA,EAAa,aACzC,CACA,EAAO,CAACF,EAAM,QAAQ,CAAC,CACvB,CAgCA,SAASG,GAAaH,EAAO,CACzB,MAAMI,EAAUrB,KACV,CAAE,QAAAG,EAAUkB,EAAQ,QAAS,SAAAC,EAAU,KAAAvC,EAAM,MAAA+B,CAAK,EAAKG,GAAS,GAChE,CAACf,EAAWqB,CAAe,EAAIxB,EAAM,SAASI,EAAQ,UAAU,EAChEqB,EAAWzB,EAAM,OAAO,EAAI,EAC5B0B,EAAuB1B,EAAM,OAAO,CACtC,QAAS,GACT,YAAa,GACb,cAAe,GACf,aAAc,GACd,QAAS,GACT,OAAQ,EAChB,CAAK,EACK2B,EAAQ3B,EAAM,OAAOhB,CAAI,EAC/B,OAAA2C,EAAM,QAAU3C,EAChBiC,GAAa,CACT,SAAAM,EACA,SAAUvB,EAAM,YAAavB,GAAUgD,EAAS,SAC5CZ,GAAsBc,EAAM,QAASlD,EAAM,KAAMsC,CAAK,GACtDN,GAAsBhC,EAAOiD,EAAqB,OAAO,GACzDF,EAAgB,CACZ,GAAGpB,EAAQ,WACX,GAAG3B,CACnB,CAAa,EAAG,CAAC2B,EAASW,CAAK,CAAC,EACxB,QAASX,EAAQ,UAAU,KACnC,CAAK,EACDJ,EAAM,UAAU,IAAM,CAClByB,EAAS,QAAU,GACnB,MAAMG,EAAUxB,EAAQ,gBAAgB,SAAWA,EAAQ,YAC3D,OAAIwB,IAAYxB,EAAQ,WAAW,SAC/BA,EAAQ,UAAU,MAAM,KAAK,CACzB,QAAAwB,CAChB,CAAa,EAELxB,EAAQ,aAAY,EACb,IAAM,CACTqB,EAAS,QAAU,EAC/B,CACA,EAAO,CAACrB,CAAO,CAAC,EACLF,GAAkBC,EAAWC,EAASsB,EAAqB,QAAS,EAAK,CACpF,CAEA,IAAIG,EAAYpD,GAAU,OAAOA,GAAU,SAEvCqD,GAAsB,CAAC5C,EAAO6C,EAAQC,EAAYC,IAC9CJ,EAAS3C,CAAK,GACd+C,GAAYF,EAAO,MAAM,IAAI7C,CAAK,EAC3BI,EAAI0C,EAAY9C,CAAK,GAE5B,MAAM,QAAQA,CAAK,EACZA,EAAM,IAAKgD,IAAeD,GAAYF,EAAO,MAAM,IAAIG,CAAS,EAAG5C,EAAI0C,EAAYE,CAAS,EAAE,GAEzGD,IAAaF,EAAO,SAAW,IACxBC,GAGPG,GAAiBC,GAAe,CAChC,MAAMC,EAAgBD,EAAW,aAAeA,EAAW,YAAY,UACvE,OAAQxD,EAASyD,CAAa,GAAKA,EAAc,eAAe,eAAe,CACnF,EAEIC,GAAQ,OAAO,OAAW,KAC1B,OAAO,OAAO,YAAgB,KAC9B,OAAO,SAAa,IAExB,SAASC,EAAYC,EAAM,CACvB,IAAIC,EACJ,MAAMC,EAAU,MAAM,QAAQF,CAAI,EAClC,GAAIA,aAAgB,KAChBC,EAAO,IAAI,KAAKD,CAAI,UAEfA,aAAgB,IACrBC,EAAO,IAAI,IAAID,CAAI,UAEd,EAAEF,KAAUE,aAAgB,MAAQA,aAAgB,aACxDE,GAAW9D,EAAS4D,CAAI,GAEzB,GADAC,EAAOC,EAAU,CAAE,EAAG,GAClB,CAAC,MAAM,QAAQF,CAAI,GAAK,CAACL,GAAcK,CAAI,EAC3CC,EAAOD,MAGP,WAAW7C,KAAO6C,EACdC,EAAK9C,CAAG,EAAI4C,EAAYC,EAAK7C,CAAG,CAAC,MAKzC,QAAO6C,EAEX,OAAOC,CACX,CAkBA,SAASE,GAASzB,EAAO,CACrB,MAAMI,EAAUrB,KACV,CAAE,QAAAG,EAAUkB,EAAQ,QAAS,KAAAtC,EAAM,aAAAS,EAAc,SAAA8B,EAAU,MAAAR,CAAK,EAAMG,GAAS,GAC/ES,EAAQ3B,EAAM,OAAOhB,CAAI,EAC/B2C,EAAM,QAAU3C,EAChBiC,GAAa,CACT,SAAAM,EACA,QAASnB,EAAQ,UAAU,MAC3B,SAAWD,GAAc,CACrB,GAAIU,GAAsBc,EAAM,QAASxB,EAAU,KAAMY,CAAK,EAAG,CAC7D,MAAM6B,EAAcd,GAAoBH,EAAM,QAASvB,EAAQ,OAAQD,EAAU,QAAUC,EAAQ,WAAW,EAC9GyC,EAAYzD,EAAYwD,CAAW,EAAInD,EAAe8C,EAAYK,CAAW,CAAC,CACjF,CACJ,CACT,CAAK,EACD,KAAM,CAACnE,EAAOoE,CAAW,EAAI7C,EAAM,SAASZ,EAAYK,CAAY,EAC9DW,EAAQ,UAAUpB,CAAI,EACtBS,CAAY,EAClB,OAAAO,EAAM,UAAU,IAAMI,EAAQ,iBAAkB,CAAA,EACzC3B,CACX,CA0BA,SAASqE,GAAc5B,EAAO,CAC1B,MAAMI,EAAUrB,KACV,CAAE,KAAAjB,EAAM,QAAAoB,EAAUkB,EAAQ,QAAS,iBAAAyB,CAAkB,EAAG7B,EACxD8B,EAAe/D,GAAmBmB,EAAQ,OAAO,MAAOpB,CAAI,EAC5DP,EAAQkE,GAAS,CACnB,QAAAvC,EACA,KAAApB,EACA,aAAcM,EAAIc,EAAQ,YAAapB,EAAMM,EAAIc,EAAQ,eAAgBpB,EAAMkC,EAAM,YAAY,CAAC,EAClG,MAAO,EACf,CAAK,EACKf,EAAYkB,GAAa,CAC3B,QAAAjB,EACA,KAAApB,CACR,CAAK,EACKiE,EAAiBjD,EAAM,OAAOI,EAAQ,SAASpB,EAAM,CACvD,GAAGkC,EAAM,MACT,MAAAzC,CACH,CAAA,CAAC,EACF,OAAAuB,EAAM,UAAU,IAAM,CAClB,MAAMkD,EAAgB,CAAClE,EAAMP,IAAU,CACnC,MAAM0E,EAAQ7D,EAAIc,EAAQ,QAASpB,CAAI,EACnCmE,IACAA,EAAM,GAAG,MAAQ1E,EAEjC,EACQ,OAAAyE,EAAclE,EAAM,EAAI,EACjB,IAAM,CACT,MAAMoE,EAAyBhD,EAAQ,SAAS,kBAAoB2C,GACnEC,EACKI,GAA0B,CAAChD,EAAQ,YAAY,OAC/CgD,GACAhD,EAAQ,WAAWpB,CAAI,EACvBkE,EAAclE,EAAM,EAAK,CAC3C,CACK,EAAE,CAACA,EAAMoB,EAAS4C,EAAcD,CAAgB,CAAC,EAC3C,CACH,MAAO,CACH,KAAA/D,EACA,MAAAP,EACA,SAAUuB,EAAM,YAAalB,GAAUmE,EAAe,QAAQ,SAAS,CACnE,OAAQ,CACJ,MAAOpE,GAAcC,CAAK,EAC1B,KAAME,CACT,EACD,KAAMY,GAAO,MAC7B,CAAa,EAAG,CAACZ,CAAI,CAAC,EACV,OAAQgB,EAAM,YAAY,IAAMiD,EAAe,QAAQ,OAAO,CAC1D,OAAQ,CACJ,MAAO3D,EAAIc,EAAQ,YAAapB,CAAI,EACpC,KAAMA,CACT,EACD,KAAMY,GAAO,IAC7B,CAAa,EAAG,CAACZ,EAAMoB,CAAO,CAAC,EACnB,IAAMiD,GAAQ,CACV,MAAMF,EAAQ7D,EAAIc,EAAQ,QAASpB,CAAI,EACnCmE,GAASE,IACTF,EAAM,GAAG,IAAM,CACX,MAAO,IAAME,EAAI,MAAO,EACxB,OAAQ,IAAMA,EAAI,OAAQ,EAC1B,kBAAoBC,GAAYD,EAAI,kBAAkBC,CAAO,EAC7D,eAAgB,IAAMD,EAAI,eAAgB,CAClE,EAEa,CACJ,EACD,UAAAlD,EACA,WAAY,OAAO,iBAAiB,GAAI,CACpC,QAAS,CACL,WAAY,GACZ,IAAK,IAAM,CAAC,CAACb,EAAIa,EAAU,OAAQnB,CAAI,CAC1C,EACD,QAAS,CACL,WAAY,GACZ,IAAK,IAAM,CAAC,CAACM,EAAIa,EAAU,YAAanB,CAAI,CAC/C,EACD,UAAW,CACP,WAAY,GACZ,IAAK,IAAM,CAAC,CAACM,EAAIa,EAAU,cAAenB,CAAI,CACjD,EACD,MAAO,CACH,WAAY,GACZ,IAAK,IAAMM,EAAIa,EAAU,OAAQnB,CAAI,CACxC,CACb,CAAS,CACT,CACA,CA4CK,MAACuE,GAAcrC,GAAUA,EAAM,OAAO4B,GAAc5B,CAAK,CAAC,EAE/D,IAAIsC,GAAe,CAACxE,EAAMyE,EAA0BC,EAAQC,EAAML,IAAYG,EACxE,CACE,GAAGC,EAAO1E,CAAI,EACd,MAAO,CACH,GAAI0E,EAAO1E,CAAI,GAAK0E,EAAO1E,CAAI,EAAE,MAAQ0E,EAAO1E,CAAI,EAAE,MAAQ,CAAA,EAC9D,CAAC2E,CAAI,EAAGL,GAAW,EACtB,CACJ,EACC,GAEFM,GAASnF,GAAU,QAAQ,KAAKA,CAAK,EAErCoF,GAAgBC,GAAU3E,GAAQ2E,EAAM,QAAQ,YAAa,EAAE,EAAE,MAAM,OAAO,CAAC,EAEnF,SAASC,EAAIC,EAAQxE,EAAMf,EAAO,CAC9B,IAAIwF,EAAQ,GACZ,MAAMC,EAAWN,GAAMpE,CAAI,EAAI,CAACA,CAAI,EAAIqE,GAAarE,CAAI,EACnD2E,EAASD,EAAS,OAClBE,EAAYD,EAAS,EAC3B,KAAO,EAAEF,EAAQE,GAAQ,CACrB,MAAMxE,EAAMuE,EAASD,CAAK,EAC1B,IAAII,EAAW5F,EACf,GAAIwF,IAAUG,EAAW,CACrB,MAAME,EAAWN,EAAOrE,CAAG,EAC3B0E,EACIzF,EAAS0F,CAAQ,GAAK,MAAM,QAAQA,CAAQ,EACtCA,EACC,MAAM,CAACJ,EAASD,EAAQ,CAAC,CAAC,EAEvB,GADA,CAAE,CAEnB,CACDD,EAAOrE,CAAG,EAAI0E,EACdL,EAASA,EAAOrE,CAAG,CACtB,CACD,OAAOqE,CACX,CAEA,MAAMO,GAAe,CAACC,EAAQC,EAAUC,IAAgB,CACpD,UAAW/E,KAAO+E,GAAe,OAAO,KAAKF,CAAM,EAAG,CAClD,MAAMrB,EAAQ7D,EAAIkF,EAAQ7E,CAAG,EAC7B,GAAIwD,EAAO,CACP,KAAM,CAAE,GAAAwB,EAAI,GAAGC,CAAY,EAAKzB,EAChC,GAAIwB,GAAMF,EAASE,EAAG,IAAI,GACtB,GAAIA,EAAG,IAAI,MAAO,CACdA,EAAG,IAAI,QACP,KACH,SACQA,EAAG,MAAQA,EAAG,KAAK,CAAC,EAAE,MAAO,CAClCA,EAAG,KAAK,CAAC,EAAE,MAAK,EAChB,KACH,OAEI/F,EAASgG,CAAY,GAC1BL,GAAaK,EAAcH,CAAQ,CAE1C,CACJ,CACL,EAeA,IAAII,GAAY,CAAC7F,EAAM+C,EAAQ+C,IAAgB,CAACA,IAC3C/C,EAAO,UACJA,EAAO,MAAM,IAAI/C,CAAI,GACrB,CAAC,GAAG+C,EAAO,KAAK,EAAE,KAAMgD,GAAc/F,EAAK,WAAW+F,CAAS,GAC3D,SAAS,KAAK/F,EAAK,MAAM+F,EAAU,MAAM,CAAC,CAAC,GAEnDC,GAA4B,CAACtB,EAAQuB,EAAOjG,IAAS,CACrD,MAAMkG,EAAmB/F,GAAQG,EAAIoE,EAAQ1E,CAAI,CAAC,EAClD,OAAA+E,EAAImB,EAAkB,OAAQD,EAAMjG,CAAI,CAAC,EACzC+E,EAAIL,EAAQ1E,EAAMkG,CAAgB,EAC3BxB,CACX,EAEIyB,EAAa1G,GAAU,OAAOA,GAAU,UAExC2G,GAAe7G,GAAYA,EAAQ,OAAS,OAE5C8G,GAAc5G,GAAU,OAAOA,GAAU,WAEzC6G,GAAa7G,GAAUoD,EAASpD,CAAK,GAAKuB,EAAM,eAAevB,CAAK,EAEpE8G,GAAgBhH,GAAYA,EAAQ,OAAS,QAE7CiH,GAAW/G,GAAUA,aAAiB,OAE1C,MAAMgH,GAAgB,CAClB,MAAO,GACP,QAAS,EACb,EACMC,GAAc,CAAE,MAAO,GAAM,QAAS,EAAI,EAChD,IAAIC,GAAoBC,GAAY,CAChC,GAAI,MAAM,QAAQA,CAAO,EAAG,CACxB,GAAIA,EAAQ,OAAS,EAAG,CACpB,MAAMC,EAASD,EACV,OAAQE,GAAWA,GAAUA,EAAO,SAAW,CAACA,EAAO,QAAQ,EAC/D,IAAKA,GAAWA,EAAO,KAAK,EACjC,MAAO,CAAE,MAAOD,EAAQ,QAAS,CAAC,CAACA,EAAO,OAC7C,CACD,OAAOD,EAAQ,CAAC,EAAE,SAAW,CAACA,EAAQ,CAAC,EAAE,SAEjCA,EAAQ,CAAC,EAAE,YAAc,CAACxG,EAAYwG,EAAQ,CAAC,EAAE,WAAW,KAAK,EAC3DxG,EAAYwG,EAAQ,CAAC,EAAE,KAAK,GAAKA,EAAQ,CAAC,EAAE,QAAU,GAClDF,GACA,CAAE,MAAOE,EAAQ,CAAC,EAAE,MAAO,QAAS,EAAM,EAC9CF,GACRD,EACT,CACD,OAAOA,EACX,EAEA,MAAMM,GAAgB,CAClB,QAAS,GACT,MAAO,IACX,EACA,IAAIC,GAAiBJ,GAAY,MAAM,QAAQA,CAAO,EAChDA,EAAQ,OAAO,CAACK,EAAUH,IAAWA,GAAUA,EAAO,SAAW,CAACA,EAAO,SACrE,CACE,QAAS,GACT,MAAOA,EAAO,KACjB,EACCG,EAAUF,EAAa,EAC3BA,GAEN,SAASG,GAAiBxG,EAAQyG,EAAKxC,EAAO,WAAY,CACtD,GAAI2B,GAAU5F,CAAM,GACf,MAAM,QAAQA,CAAM,GAAKA,EAAO,MAAM4F,EAAS,GAC/CH,EAAUzF,CAAM,GAAK,CAACA,EACvB,MAAO,CACH,KAAAiE,EACA,QAAS2B,GAAU5F,CAAM,EAAIA,EAAS,GACtC,IAAAyG,CACZ,CAEA,CAEA,IAAIC,EAAsBC,GAAmBzH,EAASyH,CAAc,GAAK,CAACb,GAAQa,CAAc,EAC1FA,EACA,CACE,MAAOA,EACP,QAAS,EACjB,EAEIC,GAAgB,MAAOnD,EAAOoD,EAAY9C,EAA0B+C,EAA2BC,IAAiB,CAChH,KAAM,CAAE,IAAAN,EAAK,KAAAO,EAAM,SAAAC,EAAU,UAAAC,EAAW,UAAAC,EAAW,IAAAC,EAAK,IAAAC,EAAK,QAAAC,EAAS,SAAAC,EAAU,KAAAjI,EAAM,cAAAkI,GAAe,MAAAC,GAAO,SAAA5F,CAAW,EAAG4B,EAAM,GAChI,GAAI,CAACgE,IAAS5F,EACV,MAAO,GAEX,MAAM6F,EAAWV,EAAOA,EAAK,CAAC,EAAIP,EAC5BkB,EAAqB/D,GAAY,CAC/BkD,GAA6BY,EAAS,iBACtCA,EAAS,kBAAkBjC,EAAU7B,CAAO,EAAI,GAAKA,GAAW,EAAE,EAClE8D,EAAS,eAAc,EAEnC,EACUnC,EAAQ,CAAA,EACRqC,GAAU/B,GAAaY,CAAG,EAC1BoB,GAAajJ,GAAgB6H,CAAG,EAChCqB,EAAoBF,IAAWC,GAC/BE,GAAYP,IAAiB9B,GAAYe,CAAG,IAAM,CAACA,EAAI,OACzDI,IAAe,IACd,MAAM,QAAQA,CAAU,GAAK,CAACA,EAAW,OACxCmB,EAAoBlE,GAAa,KAAK,KAAMxE,EAAMyE,EAA0BwB,CAAK,EACjF0C,GAAmB,CAACC,EAAWC,EAAkBC,EAAkBC,EAAUjI,EAAuB,UAAWkI,EAAUlI,EAAuB,YAAc,CAChK,MAAMwD,EAAUsE,EAAYC,EAAmBC,EAC/C7C,EAAMjG,CAAI,EAAI,CACV,KAAM4I,EAAYG,EAAUC,EAC5B,QAAA1E,EACA,IAAA6C,EACA,GAAGuB,EAAkBE,EAAYG,EAAUC,EAAS1E,CAAO,CACvE,CACA,EACI,GAAImD,EACE,CAAC,MAAM,QAAQF,CAAU,GAAK,CAACA,EAAW,OAC1CI,IACI,CAACa,IAAsBC,GAAW/I,EAAkB6H,CAAU,IAC3DpB,EAAUoB,CAAU,GAAK,CAACA,GAC1BgB,IAAc,CAAC5B,GAAiBe,CAAI,EAAE,SACtCY,IAAW,CAACtB,GAAcU,CAAI,EAAE,SAAW,CACpD,KAAM,CAAE,MAAAjI,EAAO,QAAA6E,GAAYgC,GAAUqB,CAAQ,EACvC,CAAE,MAAO,CAAC,CAACA,EAAU,QAASA,CAAU,EACxCP,EAAmBO,CAAQ,EACjC,GAAIlI,IACAwG,EAAMjG,CAAI,EAAI,CACV,KAAMc,EAAuB,SAC7B,QAAAwD,EACA,IAAK8D,EACL,GAAGM,EAAkB5H,EAAuB,SAAUwD,CAAO,CAC7E,EACgB,CAACG,GACD,OAAA4D,EAAkB/D,CAAO,EAClB2B,CAGlB,CACD,GAAI,CAACwC,IAAY,CAAC/I,EAAkBoI,CAAG,GAAK,CAACpI,EAAkBqI,CAAG,GAAI,CAClE,IAAIa,EACAK,EACJ,MAAMC,EAAY9B,EAAmBW,CAAG,EAClCoB,EAAY/B,EAAmBU,CAAG,EACxC,GAAI,CAACpI,EAAkB6H,CAAU,GAAK,CAAC,MAAMA,CAAU,EAAG,CACtD,MAAM6B,EAAcjC,EAAI,eACnBI,GAAa,CAACA,EACd7H,EAAkBwJ,EAAU,KAAK,IAClCN,EAAYQ,EAAcF,EAAU,OAEnCxJ,EAAkByJ,EAAU,KAAK,IAClCF,EAAYG,EAAcD,EAAU,MAE3C,KACI,CACD,MAAME,EAAYlC,EAAI,aAAe,IAAI,KAAKI,CAAU,EAClD+B,EAAqBC,IAAS,IAAI,KAAK,IAAI,KAAM,EAAC,aAAc,EAAG,IAAMA,EAAI,EAC7EC,GAASrC,EAAI,MAAQ,OACrBsC,EAAStC,EAAI,MAAQ,OACvBtE,EAASqG,EAAU,KAAK,GAAK3B,IAC7BqB,EAAYY,GACNF,EAAkB/B,CAAU,EAAI+B,EAAkBJ,EAAU,KAAK,EACjEO,EACIlC,EAAa2B,EAAU,MACvBG,EAAY,IAAI,KAAKH,EAAU,KAAK,GAE9CrG,EAASsG,EAAU,KAAK,GAAK5B,IAC7B0B,EAAYO,GACNF,EAAkB/B,CAAU,EAAI+B,EAAkBH,EAAU,KAAK,EACjEM,EACIlC,EAAa4B,EAAU,MACvBE,EAAY,IAAI,KAAKF,EAAU,KAAK,EAErD,CACD,IAAIP,GAAaK,KACbN,GAAiB,CAAC,CAACC,EAAWM,EAAU,QAASC,EAAU,QAASrI,EAAuB,IAAKA,EAAuB,GAAG,EACtH,CAAC2D,GACD,OAAA4D,EAAkBpC,EAAMjG,CAAI,EAAE,OAAO,EAC9BiG,CAGlB,CACD,IAAK2B,GAAaC,IACd,CAACY,IACA5F,EAAS0E,CAAU,GAAME,GAAgB,MAAM,QAAQF,CAAU,GAAK,CACvE,MAAMmC,EAAkBtC,EAAmBQ,CAAS,EAC9C+B,EAAkBvC,EAAmBS,CAAS,EAC9Ce,EAAY,CAAClJ,EAAkBgK,EAAgB,KAAK,GACtDnC,EAAW,OAASmC,EAAgB,MAClCT,EAAY,CAACvJ,EAAkBiK,EAAgB,KAAK,GACtDpC,EAAW,OAASoC,EAAgB,MACxC,IAAIf,GAAaK,KACbN,GAAiBC,EAAWc,EAAgB,QAASC,EAAgB,OAAO,EACxE,CAAClF,GACD,OAAA4D,EAAkBpC,EAAMjG,CAAI,EAAE,OAAO,EAC9BiG,CAGlB,CACD,GAAI+B,GAAW,CAACS,GAAW5F,EAAS0E,CAAU,EAAG,CAC7C,KAAM,CAAE,MAAOqC,EAAc,QAAAtF,CAAO,EAAK8C,EAAmBY,CAAO,EACnE,GAAIxB,GAAQoD,CAAY,GAAK,CAACrC,EAAW,MAAMqC,CAAY,IACvD3D,EAAMjG,CAAI,EAAI,CACV,KAAMc,EAAuB,QAC7B,QAAAwD,EACA,IAAA6C,EACA,GAAGuB,EAAkB5H,EAAuB,QAASwD,CAAO,CAC5E,EACgB,CAACG,GACD,OAAA4D,EAAkB/D,CAAO,EAClB2B,CAGlB,CACD,GAAIgC,GACA,GAAI5B,GAAW4B,CAAQ,EAAG,CACtB,MAAMvH,EAAS,MAAMuH,EAASV,CAAU,EAClCsC,EAAgB3C,GAAiBxG,EAAQ0H,CAAQ,EACvD,GAAIyB,IACA5D,EAAMjG,CAAI,EAAI,CACV,GAAG6J,EACH,GAAGnB,EAAkB5H,EAAuB,SAAU+I,EAAc,OAAO,CAC/F,EACoB,CAACpF,GACD,OAAA4D,EAAkBwB,EAAc,OAAO,EAChC5D,CAGlB,SACQrG,EAASqI,CAAQ,EAAG,CACzB,IAAI6B,EAAmB,CAAA,EACvB,UAAWnJ,KAAOsH,EAAU,CACxB,GAAI,CAACzG,EAAcsI,CAAgB,GAAK,CAACrF,EACrC,MAEJ,MAAMoF,EAAgB3C,GAAiB,MAAMe,EAAStH,CAAG,EAAE4G,CAAU,EAAGa,EAAUzH,CAAG,EACjFkJ,IACAC,EAAmB,CACf,GAAGD,EACH,GAAGnB,EAAkB/H,EAAKkJ,EAAc,OAAO,CACvE,EACoBxB,EAAkBwB,EAAc,OAAO,EACnCpF,IACAwB,EAAMjG,CAAI,EAAI8J,GAGzB,CACD,GAAI,CAACtI,EAAcsI,CAAgB,IAC/B7D,EAAMjG,CAAI,EAAI,CACV,IAAKoI,EACL,GAAG0B,CACvB,EACoB,CAACrF,GACD,OAAOwB,CAGlB,EAEL,OAAAoC,EAAkB,EAAI,EACfpC,CACX,EAQI8D,GAAsBC,IAAU,CAChC,WAAY,CAACA,GAAQA,IAASnJ,EAAgB,SAC9C,SAAUmJ,IAASnJ,EAAgB,OACnC,WAAYmJ,IAASnJ,EAAgB,SACrC,QAASmJ,IAASnJ,EAAgB,IAClC,UAAWmJ,IAASnJ,EAAgB,SACxC,GA0CA,SAASoJ,GAAQjF,EAAQkF,EAAY,CACjC,MAAM/E,EAAS+E,EAAW,MAAM,EAAG,EAAE,EAAE,OACvC,IAAIjF,EAAQ,EACZ,KAAOA,EAAQE,GACXH,EAAS5E,EAAY4E,CAAM,EAAIC,IAAUD,EAAOkF,EAAWjF,GAAO,CAAC,EAEvE,OAAOD,CACX,CACA,SAASmF,GAAa5J,EAAK,CACvB,UAAWI,KAAOJ,EACd,GAAI,CAACH,EAAYG,EAAII,CAAG,CAAC,EACrB,MAAO,GAGf,MAAO,EACX,CACA,SAASyJ,EAAMpF,EAAQxE,EAAM,CACzB,MAAM0J,EAAatF,GAAMpE,CAAI,EAAI,CAACA,CAAI,EAAIqE,GAAarE,CAAI,EACrD6J,EAAcH,EAAW,QAAU,EAAIlF,EAASiF,GAAQjF,EAAQkF,CAAU,EAC1EvJ,EAAMuJ,EAAWA,EAAW,OAAS,CAAC,EAC5C,IAAII,EACAD,GACA,OAAOA,EAAY1J,CAAG,EAE1B,QAAS4J,EAAI,EAAGA,EAAIL,EAAW,MAAM,EAAG,EAAE,EAAE,OAAQK,IAAK,CACrD,IAAItF,EAAQ,GACRuF,EACJ,MAAMC,EAAeP,EAAW,MAAM,EAAG,EAAEK,EAAI,EAAE,EAC3CG,EAAqBD,EAAa,OAAS,EAIjD,IAHIF,EAAI,IACJD,EAAiBtF,GAEd,EAAEC,EAAQwF,EAAa,QAAQ,CAClC,MAAME,EAAOF,EAAaxF,CAAK,EAC/BuF,EAAYA,EAAYA,EAAUG,CAAI,EAAI3F,EAAO2F,CAAI,EACjDD,IAAuBzF,IACrBrF,EAAS4K,CAAS,GAAKhJ,EAAcgJ,CAAS,GAC3C,MAAM,QAAQA,CAAS,GAAKL,GAAaK,CAAS,KACvDF,EAAiB,OAAOA,EAAeK,CAAI,EAAI,OAAO3F,EAAO2F,CAAI,GAErEL,EAAiBE,CACpB,CACJ,CACD,OAAOxF,CACX,CA2NA,SAAS4F,IAAgB,CACrB,IAAIC,EAAa,CAAA,EAiBjB,MAAO,CACH,IAAI,WAAY,CACZ,OAAOA,CACV,EACD,KApBUpL,GAAU,CACpB,UAAWqL,KAAYD,EACnBC,EAAS,KAAKrL,CAAK,CAE/B,EAiBQ,UAhBeqL,IACfD,EAAW,KAAKC,CAAQ,EACjB,CACH,YAAa,IAAM,CACfD,EAAaA,EAAW,OAAQE,GAAMA,IAAMD,CAAQ,CACvD,CACb,GAWQ,YATgB,IAAM,CACtBD,EAAa,CAAA,CACrB,CAQA,CACA,CAEA,IAAIG,GAAevL,GAAUC,EAAkBD,CAAK,GAAK,CAACE,GAAaF,CAAK,EAE5E,SAASwL,EAAUC,EAASC,EAAS,CACjC,GAAIH,GAAYE,CAAO,GAAKF,GAAYG,CAAO,EAC3C,OAAOD,IAAYC,EAEvB,GAAI3L,EAAa0L,CAAO,GAAK1L,EAAa2L,CAAO,EAC7C,OAAOD,EAAQ,QAAO,IAAOC,EAAQ,QAAO,EAEhD,MAAMC,EAAQ,OAAO,KAAKF,CAAO,EAC3BG,EAAQ,OAAO,KAAKF,CAAO,EACjC,GAAIC,EAAM,SAAWC,EAAM,OACvB,MAAO,GAEX,UAAW1K,KAAOyK,EAAO,CACrB,MAAME,EAAOJ,EAAQvK,CAAG,EACxB,GAAI,CAAC0K,EAAM,SAAS1K,CAAG,EACnB,MAAO,GAEX,GAAIA,IAAQ,MAAO,CACf,MAAM4K,EAAOJ,EAAQxK,CAAG,EACxB,GAAKnB,EAAa8L,CAAI,GAAK9L,EAAa+L,CAAI,GACvC3L,EAAS0L,CAAI,GAAK1L,EAAS2L,CAAI,GAC/B,MAAM,QAAQD,CAAI,GAAK,MAAM,QAAQC,CAAI,EACxC,CAACN,EAAUK,EAAMC,CAAI,EACrBD,IAASC,EACX,MAAO,EAEd,CACJ,CACD,MAAO,EACX,CAEA,IAAIC,GAAiB/L,GAAU,CAC3B,MAAMgM,EAAQhM,EAAQA,EAAM,cAAgB,EACtCiM,EAAeD,GAASA,EAAM,YAAcA,EAAM,YAAY,YAAc,YAClF,OAAOhM,aAAiBiM,CAC5B,EAEIC,GAAoBpM,GAAYA,EAAQ,OAAS,kBAEjDiJ,GAAqBrB,GAAQZ,GAAaY,CAAG,GAAK7H,GAAgB6H,CAAG,EAErEyE,GAAQzE,GAAQqE,GAAcrE,CAAG,GAAKA,EAAI,YAE1C0E,GAAqBrI,GAAS,CAC9B,UAAW7C,KAAO6C,EACd,GAAI6C,GAAW7C,EAAK7C,CAAG,CAAC,EACpB,MAAO,GAGf,MAAO,EACX,EAEA,SAASmL,GAAgBtI,EAAMgC,EAAS,GAAI,CACxC,MAAMuG,EAAoB,MAAM,QAAQvI,CAAI,EAC5C,GAAI5D,EAAS4D,CAAI,GAAKuI,EAClB,UAAWpL,KAAO6C,EACV,MAAM,QAAQA,EAAK7C,CAAG,CAAC,GACtBf,EAAS4D,EAAK7C,CAAG,CAAC,GAAK,CAACkL,GAAkBrI,EAAK7C,CAAG,CAAC,GACpD6E,EAAO7E,CAAG,EAAI,MAAM,QAAQ6C,EAAK7C,CAAG,CAAC,EAAI,CAAE,EAAG,GAC9CmL,GAAgBtI,EAAK7C,CAAG,EAAG6E,EAAO7E,CAAG,CAAC,GAEhCjB,EAAkB8D,EAAK7C,CAAG,CAAC,IACjC6E,EAAO7E,CAAG,EAAI,IAI1B,OAAO6E,CACX,CACA,SAASwG,GAAgCxI,EAAMR,EAAYiJ,EAAuB,CAC9E,MAAMF,EAAoB,MAAM,QAAQvI,CAAI,EAC5C,GAAI5D,EAAS4D,CAAI,GAAKuI,EAClB,UAAWpL,KAAO6C,EACV,MAAM,QAAQA,EAAK7C,CAAG,CAAC,GACtBf,EAAS4D,EAAK7C,CAAG,CAAC,GAAK,CAACkL,GAAkBrI,EAAK7C,CAAG,CAAC,EAChDP,EAAY4C,CAAU,GACtBgI,GAAYiB,EAAsBtL,CAAG,CAAC,EACtCsL,EAAsBtL,CAAG,EAAI,MAAM,QAAQ6C,EAAK7C,CAAG,CAAC,EAC9CmL,GAAgBtI,EAAK7C,CAAG,EAAG,EAAE,EAC7B,CAAE,GAAGmL,GAAgBtI,EAAK7C,CAAG,CAAC,CAAC,EAGrCqL,GAAgCxI,EAAK7C,CAAG,EAAGjB,EAAkBsD,CAAU,EAAI,GAAKA,EAAWrC,CAAG,EAAGsL,EAAsBtL,CAAG,CAAC,EAI/HsK,EAAUzH,EAAK7C,CAAG,EAAGqC,EAAWrC,CAAG,CAAC,EAC9B,OAAOsL,EAAsBtL,CAAG,EAC/BsL,EAAsBtL,CAAG,EAAI,GAIhD,OAAOsL,CACX,CACA,IAAIC,GAAiB,CAACC,EAAenJ,IAAegJ,GAAgCG,EAAenJ,EAAY8I,GAAgB9I,CAAU,CAAC,EAEtIoJ,GAAkB,CAAC3M,EAAO,CAAE,cAAAyI,EAAe,YAAAmE,EAAa,WAAAC,CAAY,IAAKlM,EAAYX,CAAK,EACxFA,EACAyI,EACIzI,IAAU,GACN,IACAA,GACI,CAACA,EAET4M,GAAexJ,EAASpD,CAAK,EACzB,IAAI,KAAKA,CAAK,EACd6M,EACIA,EAAW7M,CAAK,EAChBA,EAElB,SAAS8M,GAAc5G,EAAI,CACvB,MAAMwB,EAAMxB,EAAG,IACf,GAAI,EAAAA,EAAG,KAAOA,EAAG,KAAK,MAAOwB,GAAQA,EAAI,QAAQ,EAAIA,EAAI,UAGzD,OAAIf,GAAYe,CAAG,EACRA,EAAI,MAEXZ,GAAaY,CAAG,EACTH,GAAcrB,EAAG,IAAI,EAAE,MAE9BgG,GAAiBxE,CAAG,EACb,CAAC,GAAGA,EAAI,eAAe,EAAE,IAAI,CAAC,CAAE,MAAA1H,KAAYA,CAAK,EAExDH,GAAgB6H,CAAG,EACZR,GAAiBhB,EAAG,IAAI,EAAE,MAE9ByG,GAAgBhM,EAAY+G,EAAI,KAAK,EAAIxB,EAAG,IAAI,MAAQwB,EAAI,MAAOxB,CAAE,CAChF,CAEA,IAAI6G,GAAqB,CAAC9G,EAAa+G,EAASC,EAAclF,IAA8B,CACxF,MAAMhC,EAAS,CAAA,EACf,UAAWxF,KAAQ0F,EAAa,CAC5B,MAAMvB,EAAQ7D,EAAImM,EAASzM,CAAI,EAC/BmE,GAASY,EAAIS,EAAQxF,EAAMmE,EAAM,EAAE,CACtC,CACD,MAAO,CACH,aAAAuI,EACA,MAAO,CAAC,GAAGhH,CAAW,EACtB,OAAAF,EACA,0BAAAgC,CACR,CACA,EAEImF,GAAgBC,GAASxM,EAAYwM,CAAI,EACvCA,EACApG,GAAQoG,CAAI,EACRA,EAAK,OACLhN,EAASgN,CAAI,EACTpG,GAAQoG,EAAK,KAAK,EACdA,EAAK,MAAM,OACXA,EAAK,MACTA,EAEVC,GAAiBjG,GAAYA,EAAQ,QACpCA,EAAQ,UACLA,EAAQ,KACRA,EAAQ,KACRA,EAAQ,WACRA,EAAQ,WACRA,EAAQ,SACRA,EAAQ,UAEhB,SAASkG,GAAkBpI,EAAQ+H,EAASzM,EAAM,CAC9C,MAAMiG,EAAQ3F,EAAIoE,EAAQ1E,CAAI,EAC9B,GAAIiG,GAASrB,GAAM5E,CAAI,EACnB,MAAO,CACH,MAAAiG,EACA,KAAAjG,CACZ,EAEI,MAAME,EAAQF,EAAK,MAAM,GAAG,EAC5B,KAAOE,EAAM,QAAQ,CACjB,MAAMgD,EAAYhD,EAAM,KAAK,GAAG,EAC1BiE,EAAQ7D,EAAImM,EAASvJ,CAAS,EAC9B6J,EAAazM,EAAIoE,EAAQxB,CAAS,EACxC,GAAIiB,GAAS,CAAC,MAAM,QAAQA,CAAK,GAAKnE,IAASkD,EAC3C,MAAO,CAAE,KAAAlD,CAAI,EAEjB,GAAI+M,GAAcA,EAAW,KACzB,MAAO,CACH,KAAM7J,EACN,MAAO6J,CACvB,EAEQ7M,EAAM,IAAG,CACZ,CACD,MAAO,CACH,KAAAF,CACR,CACA,CAEA,IAAIgN,GAAiB,CAAClH,EAAamH,EAAWC,EAAaC,EAAgBnD,IACnEA,EAAK,QACE,GAEF,CAACkD,GAAelD,EAAK,UACnB,EAAEiD,GAAanH,IAEjBoH,EAAcC,EAAe,SAAWnD,EAAK,UAC3C,CAAClE,GAEHoH,EAAcC,EAAe,WAAanD,EAAK,YAC7ClE,EAEJ,GAGPsH,GAAkB,CAACjG,EAAKnH,IAAS,CAACG,GAAQG,EAAI6G,EAAKnH,CAAI,CAAC,EAAE,QAAUoK,EAAMjD,EAAKnH,CAAI,EAEvF,MAAMqN,GAAiB,CACnB,KAAMxM,EAAgB,SACtB,eAAgBA,EAAgB,SAChC,iBAAkB,EACtB,EACA,SAASyM,GAAkBpL,EAAQ,GAAI,CACnC,IAAIqL,EAAW,CACX,GAAGF,GACH,GAAGnL,CACX,EACQsL,EAAa,CACb,YAAa,EACb,QAAS,GACT,aAAc,GACd,YAAa,GACb,aAAc,GACd,mBAAoB,GACpB,QAAS,GACT,cAAe,CAAE,EACjB,YAAa,CAAE,EACf,OAAQ,CAAE,CAClB,EACQf,EAAU,CAAA,EACVgB,EAAiBlK,EAAYgK,EAAS,aAAa,GAAK,CAAA,EACxDG,EAAcH,EAAS,iBACrB,CAAE,EACFhK,EAAYkK,CAAc,EAC5BE,EAAc,CACd,OAAQ,GACR,MAAO,GACP,MAAO,EACf,EACQ5K,EAAS,CACT,MAAO,IAAI,IACX,QAAS,IAAI,IACb,MAAO,IAAI,IACX,MAAO,IAAI,GACnB,EACQ6K,EACAC,EAAQ,EACRC,EAAiB,CAAA,EACrB,MAAMnM,EAAkB,CACpB,QAAS,GACT,YAAa,GACb,cAAe,GACf,aAAc,GACd,QAAS,GACT,OAAQ,EAChB,EACUoM,EAAY,CACd,MAAOnD,GAAe,EACtB,MAAOA,GAAe,EACtB,MAAOA,GAAe,CAC9B,EACUoD,EAA6BjE,GAAmBwD,EAAS,IAAI,EAC7DU,EAA4BlE,GAAmBwD,EAAS,cAAc,EACtEW,GAAmCX,EAAS,eAAiB1M,EAAgB,IAC7EsN,GAAY1I,GAAc2I,GAAS,CACrC,aAAaP,CAAK,EAClBA,EAAQ,OAAO,WAAWpI,EAAU2I,CAAI,CAChD,EACUC,EAAe,SAAY,CAC7B,GAAI1M,EAAgB,QAAS,CACzB,MAAM2M,EAAUf,EAAS,SACnB/L,GAAe,MAAM+M,EAAgB,GAAE,MAAM,GAC5C,MAAMC,EAAyB/B,EAAS,EAAI,GAAG,MAClD6B,IAAYd,EAAW,UACvBA,EAAW,QAAUc,EACrBP,EAAU,MAAM,KAAK,CACjB,QAAAO,CACpB,CAAiB,EAER,CACT,EACUG,EAAoB,CAACzO,EAAM6G,EAAS,CAAE,EAAE6H,EAAQC,EAAMC,EAAkB,GAAMC,EAA6B,KAAS,CACtH,GAAIF,GAAQD,EAAQ,CAEhB,GADAf,EAAY,OAAS,GACjBkB,GAA8B,MAAM,QAAQvO,EAAImM,EAASzM,CAAI,CAAC,EAAG,CACjE,MAAM4D,EAAc8K,EAAOpO,EAAImM,EAASzM,CAAI,EAAG2O,EAAK,KAAMA,EAAK,IAAI,EACnEC,GAAmB7J,EAAI0H,EAASzM,EAAM4D,CAAW,CACpD,CACD,GAAIiL,GACA,MAAM,QAAQvO,EAAIkN,EAAW,OAAQxN,CAAI,CAAC,EAAG,CAC7C,MAAM0E,EAASgK,EAAOpO,EAAIkN,EAAW,OAAQxN,CAAI,EAAG2O,EAAK,KAAMA,EAAK,IAAI,EACxEC,GAAmB7J,EAAIyI,EAAW,OAAQxN,EAAM0E,CAAM,EACtD0I,GAAgBI,EAAW,OAAQxN,CAAI,CAC1C,CACD,GAAI2B,EAAgB,eAChBkN,GACA,MAAM,QAAQvO,EAAIkN,EAAW,cAAexN,CAAI,CAAC,EAAG,CACpD,MAAM8O,EAAgBJ,EAAOpO,EAAIkN,EAAW,cAAexN,CAAI,EAAG2O,EAAK,KAAMA,EAAK,IAAI,EACtFC,GAAmB7J,EAAIyI,EAAW,cAAexN,EAAM8O,CAAa,CACvE,CACGnN,EAAgB,cAChB6L,EAAW,YAActB,GAAeuB,EAAgBC,CAAW,GAEvEK,EAAU,MAAM,KAAK,CACjB,KAAA/N,EACA,QAAS+O,EAAU/O,EAAM6G,CAAM,EAC/B,YAAa2G,EAAW,YACxB,OAAQA,EAAW,OACnB,QAASA,EAAW,OACpC,CAAa,CACJ,MAEGzI,EAAI2I,EAAa1N,EAAM6G,CAAM,CAEzC,EACUmI,EAAe,CAAChP,EAAMiG,IAAU,CAClClB,EAAIyI,EAAW,OAAQxN,EAAMiG,CAAK,EAClC8H,EAAU,MAAM,KAAK,CACjB,OAAQP,EAAW,MAC/B,CAAS,CACT,EACUyB,EAAsB,CAACjP,EAAMkP,EAAsBzP,EAAO0H,IAAQ,CACpE,MAAMhD,EAAQ7D,EAAImM,EAASzM,CAAI,EAC/B,GAAImE,EAAO,CACP,MAAM1D,EAAeH,EAAIoN,EAAa1N,EAAMI,EAAYX,CAAK,EAAIa,EAAImN,EAAgBzN,CAAI,EAAIP,CAAK,EAClGW,EAAYK,CAAY,GACnB0G,GAAOA,EAAI,gBACZ+H,EACEnK,EAAI2I,EAAa1N,EAAMkP,EAAuBzO,EAAe8L,GAAcpI,EAAM,EAAE,CAAC,EACpFgL,EAAcnP,EAAMS,CAAY,EACtCkN,EAAY,OAASU,GACxB,CACT,EACUe,GAAsB,CAACpP,EAAMqP,EAAYvJ,EAAawJ,EAAaC,IAAiB,CACtF,IAAIC,EAAoB,GACpBC,EAAkB,GACtB,MAAMC,EAAS,CACX,KAAA1P,CACZ,EAMQ,GALI2B,EAAgB,UAChB8N,EAAkBjC,EAAW,QAC7BA,EAAW,QAAUkC,EAAO,QAAUX,EAAS,EAC/CS,EAAoBC,IAAoBC,EAAO,SAE/C/N,EAAgB,cAAgB,CAACmE,GAAewJ,GAAc,CAC9DG,EAAkBnP,EAAIkN,EAAW,YAAaxN,CAAI,EAClD,MAAM2P,EAAyB1E,EAAU3K,EAAImN,EAAgBzN,CAAI,EAAGqP,CAAU,EAC9EM,EACMvF,EAAMoD,EAAW,YAAaxN,CAAI,EAClC+E,EAAIyI,EAAW,YAAaxN,EAAM,EAAI,EAC5C0P,EAAO,YAAclC,EAAW,YAChCgC,EACIA,GAAqBC,IAAoB,CAACE,CACjD,CACD,GAAI7J,EAAa,CACb,MAAM8J,EAAyBtP,EAAIkN,EAAW,cAAexN,CAAI,EAC5D4P,IACD7K,EAAIyI,EAAW,cAAexN,EAAM8F,CAAW,EAC/C4J,EAAO,cAAgBlC,EAAW,cAClCgC,EACIA,GACK7N,EAAgB,eACbiO,IAA2B9J,EAE9C,CACD,OAAA0J,GAAqBD,GAAgBxB,EAAU,MAAM,KAAK2B,CAAM,EACzDF,EAAoBE,EAAS,EAC5C,EACUG,GAAsB,CAAC7P,EAAMsO,EAASrI,EAAO6J,IAAe,CAC9D,MAAMC,EAAqBzP,EAAIkN,EAAW,OAAQxN,CAAI,EAChDgQ,EAAoBrO,EAAgB,SACtCwE,EAAUmI,CAAO,GACjBd,EAAW,UAAYc,EAY3B,GAXIpM,EAAM,YAAc+D,GACpB2H,EAAqBO,GAAS,IAAMa,EAAahP,EAAMiG,CAAK,CAAC,EAC7D2H,EAAmB1L,EAAM,UAAU,IAGnC,aAAa2L,CAAK,EAClBD,EAAqB,KACrB3H,EACMlB,EAAIyI,EAAW,OAAQxN,EAAMiG,CAAK,EAClCmE,EAAMoD,EAAW,OAAQxN,CAAI,IAElCiG,EAAQ,CAACgF,EAAU8E,EAAoB9J,CAAK,EAAI8J,IACjD,CAACvO,EAAcsO,CAAU,GACzBE,EAAmB,CACnB,MAAMC,EAAmB,CACrB,GAAGH,EACH,GAAIE,GAAqB7J,EAAUmI,CAAO,EAAI,CAAE,QAAAA,CAAS,EAAG,GAC5D,OAAQd,EAAW,OACnB,KAAAxN,CAChB,EACYwN,EAAa,CACT,GAAGA,EACH,GAAGyC,CACnB,EACYlC,EAAU,MAAM,KAAKkC,CAAgB,CACxC,CACDnC,EAAe9N,CAAI,IACf2B,EAAgB,cAChB,CAAC,OAAO,OAAOmM,CAAc,EAAE,KAAMoC,GAAMA,CAAC,IAC5CnC,EAAU,MAAM,KAAK,CACjB,aAAc,EAC9B,CAAa,EACDD,EAAiB,CAAA,EAE7B,EACUS,EAAiB,MAAOvO,GAAS,MAAMuN,EAAS,SAASG,EAAaH,EAAS,QAASf,GAAmBxM,GAAQ+C,EAAO,MAAO0J,EAASc,EAAS,aAAcA,EAAS,yBAAyB,CAAC,EACpM4C,EAA8B,MAAOjQ,GAAU,CACjD,KAAM,CAAE,OAAAwE,CAAM,EAAK,MAAM6J,IACzB,GAAIrO,EACA,UAAWF,KAAQE,EAAO,CACtB,MAAM+F,EAAQ3F,EAAIoE,EAAQ1E,CAAI,EAC9BiG,EACMlB,EAAIyI,EAAW,OAAQxN,EAAMiG,CAAK,EAClCmE,EAAMoD,EAAW,OAAQxN,CAAI,CACtC,MAGDwN,EAAW,OAAS9I,EAExB,OAAOA,CACf,EACU8J,EAA2B,MAAOhJ,EAAQ4K,EAAsBC,EAAU,CAC5E,MAAO,EACf,IAAU,CACF,UAAWrQ,KAAQwF,EAAQ,CACvB,MAAMrB,EAAQqB,EAAOxF,CAAI,EACzB,GAAImE,EAAO,CACP,KAAM,CAAE,GAAAwB,EAAI,GAAG0J,CAAU,EAAKlL,EAC9B,GAAIwB,EAAI,CACJ,MAAM2K,EAAmBvN,EAAO,MAAM,IAAI4C,EAAG,IAAI,EAC3C4K,EAAa,MAAMjJ,GAAcnD,EAAO7D,EAAIoN,EAAa/H,EAAG,IAAI,EAAGuI,GAAkCX,EAAS,0BAA2B+C,CAAgB,EAC/J,GAAIC,EAAW5K,EAAG,IAAI,IACdA,EAAG,OAAS0K,EAAQ,OACpBA,EAAQ,MAAQE,EAAWF,EAAQ,IAAI,GAE3CA,EAAQ,MAAQ,GACZD,GACA,MAGR,CAACA,IACI9P,EAAIiQ,EAAY5K,EAAG,IAAI,EAClB2K,EACItK,GAA0BwH,EAAW,OAAQ+C,EAAY5K,EAAG,IAAI,EAChEZ,EAAIyI,EAAW,OAAQ7H,EAAG,KAAM4K,EAAW5K,EAAG,IAAI,CAAC,EACvDyE,EAAMoD,EAAW,OAAQ7H,EAAG,IAAI,EAC7C,CACD0J,GACK,MAAMb,EAAyBa,EAAYe,EAAsBC,CAAO,CAChF,CACJ,CACD,OAAOA,CACf,EACUG,GAAmB,IAAM,CAC3B,UAAWxQ,KAAQ+C,EAAO,QAAS,CAC/B,MAAMoB,EAAQ7D,EAAImM,EAASzM,CAAI,EAC/BmE,IACKA,EAAM,GAAG,KACJA,EAAM,GAAG,KAAK,MAAOgD,GAAQ,CAACyE,GAAKzE,CAAG,CAAC,EACvC,CAACyE,GAAKzH,EAAM,GAAG,GAAG,IACxBsM,GAAWzQ,CAAI,CACtB,CACD+C,EAAO,QAAU,IAAI,GAC7B,EACUgM,EAAY,CAAC/O,EAAMwD,KAAUxD,GAAQwD,GAAQuB,EAAI2I,EAAa1N,EAAMwD,CAAI,EAC1E,CAACyH,EAAUyF,KAAajD,CAAc,GACpCkD,EAAY,CAACzQ,EAAOO,EAAcwC,IAAaH,GAAoB5C,EAAO6C,EAAQ,CACpF,GAAI4K,EAAY,MACVD,EACAtN,EAAYK,CAAY,EACpBgN,EACA5K,EAAS3C,CAAK,EACV,CAAE,CAACA,CAAK,EAAGO,CAAc,EACzBA,CACjB,EAAEwC,CAAQ,EACL2N,EAAkB5Q,GAASG,GAAQG,EAAIqN,EAAY,MAAQD,EAAcD,EAAgBzN,EAAMkC,EAAM,iBAAmB5B,EAAImN,EAAgBzN,EAAM,EAAE,EAAI,CAAE,CAAA,CAAC,EAC3JmP,EAAgB,CAACnP,EAAMP,EAAOmH,EAAU,CAAA,IAAO,CACjD,MAAMzC,EAAQ7D,EAAImM,EAASzM,CAAI,EAC/B,IAAIqP,EAAa5P,EACjB,GAAI0E,EAAO,CACP,MAAM0M,EAAiB1M,EAAM,GACzB0M,IACA,CAACA,EAAe,UACZ9L,EAAI2I,EAAa1N,EAAMoM,GAAgB3M,EAAOoR,CAAc,CAAC,EACjExB,EACI/L,IAASkI,GAAcqF,EAAe,GAAG,GAAKnR,EAAkBD,CAAK,EAC/D,GACAA,EACNkM,GAAiBkF,EAAe,GAAG,EACnC,CAAC,GAAGA,EAAe,IAAI,OAAO,EAAE,QAASC,GAAeA,EAAU,SAAWzB,EAAW,SAASyB,EAAU,KAAK,CAAE,EAE7GD,EAAe,KAChBvR,GAAgBuR,EAAe,GAAG,EAClCA,EAAe,KAAK,OAAS,EACvBA,EAAe,KAAK,QAASE,IAAiB,CAACA,EAAY,gBAAkB,CAACA,EAAY,YACvFA,EAAY,QAAU,MAAM,QAAQ1B,CAAU,EACzC,CAAC,CAACA,EAAW,KAAM7L,GAASA,IAASuN,EAAY,KAAK,EACtD1B,IAAe0B,EAAY,MAAM,EACzCF,EAAe,KAAK,CAAC,IAClBA,EAAe,KAAK,CAAC,EAAE,QAAU,CAAC,CAACxB,GAG5CwB,EAAe,KAAK,QAASG,GAAcA,EAAS,QAAUA,EAAS,QAAU3B,CAAW,EAG3FjJ,GAAYyK,EAAe,GAAG,EACnCA,EAAe,IAAI,MAAQ,IAG3BA,EAAe,IAAI,MAAQxB,EACtBwB,EAAe,IAAI,MACpB9C,EAAU,MAAM,KAAK,CACjB,KAAA/N,CAC5B,CAAyB,GAIhB,EACA4G,EAAQ,aAAeA,EAAQ,cAC5BwI,GAAoBpP,EAAMqP,EAAYzI,EAAQ,YAAaA,EAAQ,YAAa,EAAI,EACxFA,EAAQ,gBAAkBqK,EAAQjR,CAAI,CAC9C,EACUkR,EAAY,CAAClR,EAAMP,EAAOmH,IAAY,CACxC,UAAWuK,KAAY1R,EAAO,CAC1B,MAAM4P,EAAa5P,EAAM0R,CAAQ,EAC3BjO,EAAY,GAAGlD,CAAI,IAAImR,CAAQ,GAC/BhN,EAAQ7D,EAAImM,EAASvJ,CAAS,GACnCH,EAAO,MAAM,IAAI/C,CAAI,GAClB,CAACgL,GAAYqE,CAAU,GACtBlL,GAAS,CAACA,EAAM,KACjB,CAAC3E,EAAa6P,CAAU,EACtB6B,EAAUhO,EAAWmM,EAAYzI,CAAO,EACxCuI,EAAcjM,EAAWmM,EAAYzI,CAAO,CACrD,CACT,EACUwK,EAAW,CAACpR,EAAMP,EAAOmH,EAAU,CAAA,IAAO,CAC5C,MAAMzC,EAAQ7D,EAAImM,EAASzM,CAAI,EACzByH,EAAe1E,EAAO,MAAM,IAAI/C,CAAI,EACpCqR,EAAa9N,EAAY9D,CAAK,EACpCsF,EAAI2I,EAAa1N,EAAMqR,CAAU,EAC7B5J,GACAsG,EAAU,MAAM,KAAK,CACjB,KAAA/N,EACA,OAAQ0N,CACxB,CAAa,GACI/L,EAAgB,SAAWA,EAAgB,cAC5CiF,EAAQ,cACR4G,EAAW,YAActB,GAAeuB,EAAgBC,CAAW,EACnEK,EAAU,MAAM,KAAK,CACjB,KAAA/N,EACA,YAAawN,EAAW,YACxB,QAASuB,EAAU/O,EAAMqR,CAAU,CACvD,CAAiB,IAILlN,GAAS,CAACA,EAAM,IAAM,CAACzE,EAAkB2R,CAAU,EAC7CH,EAAUlR,EAAMqR,EAAYzK,CAAO,EACnCuI,EAAcnP,EAAMqR,EAAYzK,CAAO,EAEjDf,GAAU7F,EAAM+C,CAAM,GAAKgL,EAAU,MAAM,KAAK,CAAA,CAAE,EAClDA,EAAU,MAAM,KAAK,CACjB,KAAA/N,CACZ,CAAS,CACT,EACUsR,GAAW,MAAOxR,GAAU,CAC9B,MAAMyR,EAASzR,EAAM,OACrB,IAAIE,EAAOuR,EAAO,KAClB,MAAMpN,EAAQ7D,EAAImM,EAASzM,CAAI,EAC/B,GAAImE,EAAO,CACP,IAAI8B,EACAqI,EACJ,MAAMe,EAAakC,EAAO,KACpBhF,GAAcpI,EAAM,EAAE,EACtBtE,GAAcC,CAAK,EACnBgG,EAAchG,EAAM,OAASc,GAAO,MAAQd,EAAM,OAASc,GAAO,UAClE4Q,EAAwB,CAAC3E,GAAc1I,EAAM,EAAE,GACjD,CAACoJ,EAAS,UACV,CAACjN,EAAIkN,EAAW,OAAQxN,CAAI,GAC5B,CAACmE,EAAM,GAAG,MACV6I,GAAelH,EAAaxF,EAAIkN,EAAW,cAAexN,CAAI,EAAGwN,EAAW,YAAaS,EAA2BD,CAA0B,EAC5IyD,GAAU5L,GAAU7F,EAAM+C,EAAQ+C,CAAW,EACnDf,EAAI2I,EAAa1N,EAAMqP,CAAU,EAC7BvJ,GACA3B,EAAM,GAAG,QAAUA,EAAM,GAAG,OAAOrE,CAAK,EACxC8N,GAAsBA,EAAmB,CAAC,GAErCzJ,EAAM,GAAG,UACdA,EAAM,GAAG,SAASrE,CAAK,EAE3B,MAAMgQ,GAAaV,GAAoBpP,EAAMqP,EAAYvJ,EAAa,EAAK,EACrEyJ,GAAe,CAAC/N,EAAcsO,EAAU,GAAK2B,GAMnD,GALA,CAAC3L,GACGiI,EAAU,MAAM,KAAK,CACjB,KAAA/N,EACA,KAAMF,EAAM,IAChC,CAAiB,EACD0R,EACA,OAAA7P,EAAgB,SAAW0M,IACnBkB,IACJxB,EAAU,MAAM,KAAK,CAAE,KAAA/N,EAAM,GAAIyR,GAAU,CAAE,EAAG3B,EAAW,CAAE,EASrE,GAPA,CAAChK,GAAe2L,IAAW1D,EAAU,MAAM,KAAK,CAAA,CAAE,EAClDD,EAAe9N,CAAI,EAAI8N,EAAe9N,CAAI,EACpC8N,EAAe9N,CAAI,EAAI,EACvB,EACN+N,EAAU,MAAM,KAAK,CACjB,aAAc,EAC9B,CAAa,EACGR,EAAS,SAAU,CACnB,KAAM,CAAE,OAAA7I,EAAM,EAAK,MAAM6J,EAAe,CAACvO,CAAI,CAAC,EACxC0R,GAA4B5E,GAAkBU,EAAW,OAAQf,EAASzM,CAAI,EAC9E2R,GAAoB7E,GAAkBpI,GAAQ+H,EAASiF,GAA0B,MAAQ1R,CAAI,EACnGiG,EAAQ0L,GAAkB,MAC1B3R,EAAO2R,GAAkB,KACzBrD,EAAU9M,EAAckD,EAAM,CACjC,KACI,CACD,GAAI/C,EAAgB,QAAS,CACzB,MAAMiQ,GAA0B,MAAMpD,EAAyB/B,EAAS,GAAM,CAC1E,KAAAzM,EACA,MAAO,EAC/B,CAAqB,EACDiG,EAAQ2L,GAAwB,OAAS,GACzCtD,EAAUsD,GAAwB,KACrC,EACG,CAAC3L,GAASzE,EAAcyE,CAAK,KAC7BA,GAAS,MAAMqB,GAAcnD,EAAO7D,EAAIoN,EAAa1N,CAAI,EAAGkO,GAAkCX,EAAS,yBAAyB,GAAGvN,CAAI,EAE9I,CACDmE,EAAM,GAAG,MACL8M,EAAQ9M,EAAM,GAAG,IAAI,EACzB0L,GAAoB7P,EAAMsO,EAASrI,EAAO6J,EAAU,CACvD,CACT,EACUmB,EAAU,MAAOjR,EAAM4G,EAAU,CAAA,IAAO,CAC1C,IAAI0H,EACAxE,EACJ,MAAM+H,EAAajQ,GAAsB5B,CAAI,EAI7C,GAHA+N,EAAU,MAAM,KAAK,CACjB,aAAc,EAC1B,CAAS,EACGR,EAAS,SAAU,CACnB,MAAM7I,EAAS,MAAMyL,EAA4B/P,EAAYJ,CAAI,EAAIA,EAAO6R,CAAU,EACtFvD,EAAU9M,EAAckD,CAAM,EAC9BoF,EAAmB9J,EACb,CAAC6R,EAAW,KAAM7R,GAASM,EAAIoE,EAAQ1E,CAAI,CAAC,EAC5CsO,CACT,MACQtO,GACL8J,GAAoB,MAAM,QAAQ,IAAI+H,EAAW,IAAI,MAAO3O,GAAc,CACtE,MAAMiB,EAAQ7D,EAAImM,EAASvJ,CAAS,EACpC,OAAQ,MAAMsL,EAAyBrK,GAASA,EAAM,GAAK,CAAE,CAACjB,CAAS,EAAGiB,CAAK,EAAKA,CAAK,GAAG,KAC5G,CAAa,CAAC,GAAG,MAAM,OAAO,EAClB,EAAE,CAAC2F,GAAoB,CAAC0D,EAAW,UAAYa,EAAY,GAG3DvE,EAAmBwE,GAAW,MAAME,EAAyB/B,CAAO,GAC/D,MAET,OAAAsB,EAAU,MAAM,KAAK,CACjB,GAAI,CAAClL,EAAS7C,CAAI,GACb2B,EAAgB,SAAW2M,IAAYd,EAAW,QACjD,CAAE,EACF,CAAE,KAAAxN,CAAI,EACZ,GAAIuN,EAAS,UAAY,CAACvN,EAAO,CAAE,QAAAsO,CAAS,EAAG,GAC/C,OAAQd,EAAW,OACnB,aAAc,EAC1B,CAAS,EACD5G,EAAQ,aACJ,CAACkD,GACDvE,GAAakH,EAAU9L,GAAQA,GAAOL,EAAIkN,EAAW,OAAQ7M,CAAG,EAAGX,EAAO6R,EAAa9O,EAAO,KAAK,EAChG+G,CACf,EACU4G,GAAamB,GAAe,CAC9B,MAAMhL,EAAS,CACX,GAAG4G,EACH,GAAIE,EAAY,MAAQD,EAAc,EAClD,EACQ,OAAOtN,EAAYyR,CAAU,EACvBhL,EACAhE,EAASgP,CAAU,EACfvR,EAAIuG,EAAQgL,CAAU,EACtBA,EAAW,IAAK7R,GAASM,EAAIuG,EAAQ7G,CAAI,CAAC,CAC5D,EACU8R,GAAgB,CAAC9R,EAAMmB,KAAe,CACxC,QAAS,CAAC,CAACb,GAAKa,GAAaqM,GAAY,OAAQxN,CAAI,EACrD,QAAS,CAAC,CAACM,GAAKa,GAAaqM,GAAY,YAAaxN,CAAI,EAC1D,UAAW,CAAC,CAACM,GAAKa,GAAaqM,GAAY,cAAexN,CAAI,EAC9D,MAAOM,GAAKa,GAAaqM,GAAY,OAAQxN,CAAI,CACzD,GACU+R,GAAe/R,GAAS,CAC1BA,EACM4B,GAAsB5B,CAAI,EAAE,QAASgS,GAAc5H,EAAMoD,EAAW,OAAQwE,CAAS,CAAC,EACrFxE,EAAW,OAAS,CAAA,EAC3BO,EAAU,MAAM,KAAK,CACjB,OAAQP,EAAW,MAC/B,CAAS,CACT,EACUyE,GAAW,CAACjS,EAAMiG,EAAOW,IAAY,CACvC,MAAMO,GAAO7G,EAAImM,EAASzM,EAAM,CAAE,GAAI,CAAA,EAAI,EAAE,IAAM,CAAA,GAAI,IACtD+E,EAAIyI,EAAW,OAAQxN,EAAM,CACzB,GAAGiG,EACH,IAAAkB,CACZ,CAAS,EACD4G,EAAU,MAAM,KAAK,CACjB,KAAA/N,EACA,OAAQwN,EAAW,OACnB,QAAS,EACrB,CAAS,EACD5G,GAAWA,EAAQ,aAAeO,GAAOA,EAAI,OAASA,EAAI,OAClE,EACU+K,GAAQ,CAAClS,EAAMS,IAAiB4F,GAAWrG,CAAI,EAC/C+N,EAAU,MAAM,UAAU,CACxB,KAAOoE,GAAYnS,EAAK2Q,EAAU,OAAWlQ,CAAY,EAAG0R,CAAO,CAC/E,CAAS,EACCxB,EAAU3Q,EAAMS,EAAc,EAAI,EAClCgQ,GAAa,CAACzQ,EAAM4G,EAAU,CAAA,IAAO,CACvC,UAAW1D,KAAalD,EAAO4B,GAAsB5B,CAAI,EAAI+C,EAAO,MAChEA,EAAO,MAAM,OAAOG,CAAS,EAC7BH,EAAO,MAAM,OAAOG,CAAS,EACzB5C,EAAImM,EAASvJ,CAAS,IACjB0D,EAAQ,YACTwD,EAAMqC,EAASvJ,CAAS,EACxBkH,EAAMsD,EAAaxK,CAAS,GAEhC,CAAC0D,EAAQ,WAAawD,EAAMoD,EAAW,OAAQtK,CAAS,EACxD,CAAC0D,EAAQ,WAAawD,EAAMoD,EAAW,YAAatK,CAAS,EAC7D,CAAC0D,EAAQ,aAAewD,EAAMoD,EAAW,cAAetK,CAAS,EACjE,CAACqK,EAAS,kBACN,CAAC3G,EAAQ,kBACTwD,EAAMqD,EAAgBvK,CAAS,GAG3C6K,EAAU,MAAM,KAAK,CAAA,CAAE,EACvBA,EAAU,MAAM,KAAK,CACjB,GAAGP,EACH,GAAK5G,EAAQ,UAAiB,CAAE,QAASmI,EAAS,GAAzB,CAAA,CACrC,CAAS,EACD,CAACnI,EAAQ,aAAeyH,GAChC,EACU+D,GAAW,CAACpS,EAAM4G,EAAU,CAAA,IAAO,CACrC,IAAIzC,EAAQ7D,EAAImM,EAASzM,CAAI,EAC7B,MAAMqS,EAAoBlM,EAAUS,EAAQ,QAAQ,EACpD,OAAA7B,EAAI0H,EAASzM,EAAM,CACf,GAAImE,GAAS,CAAA,EACb,GAAI,CACA,GAAIA,GAASA,EAAM,GAAKA,EAAM,GAAK,CAAE,IAAK,CAAE,KAAAnE,CAAI,GAChD,KAAAA,EACA,MAAO,GACP,GAAG4G,CACN,CACb,CAAS,EACD7D,EAAO,MAAM,IAAI/C,CAAI,EACrBmE,EACMkO,GACEtN,EAAI2I,EAAa1N,EAAM4G,EAAQ,SACzB,OACAtG,EAAIoN,EAAa1N,EAAMuM,GAAcpI,EAAM,EAAE,CAAC,CAAC,EACvD8K,EAAoBjP,EAAM,GAAM4G,EAAQ,KAAK,EAC5C,CACH,GAAIyL,EAAoB,CAAE,SAAUzL,EAAQ,QAAQ,EAAK,CAAA,EACzD,GAAI2G,EAAS,0BACP,CACE,SAAU,CAAC,CAAC3G,EAAQ,SACpB,IAAK+F,GAAa/F,EAAQ,GAAG,EAC7B,IAAK+F,GAAa/F,EAAQ,GAAG,EAC7B,UAAW+F,GAAa/F,EAAQ,SAAS,EACzC,UAAW+F,GAAa/F,EAAQ,SAAS,EACzC,QAAS+F,GAAa/F,EAAQ,OAAO,CACxC,EACC,GACN,KAAA5G,EACA,SAAAsR,GACA,OAAQA,GACR,IAAMnK,GAAQ,CACV,GAAIA,EAAK,CACLiL,GAASpS,EAAM4G,CAAO,EACtBzC,EAAQ7D,EAAImM,EAASzM,CAAI,EACzB,MAAMsS,EAAWlS,EAAY+G,EAAI,KAAK,GAChCA,EAAI,kBACAA,EAAI,iBAAiB,uBAAuB,EAAE,CAAC,GAAKA,EAGxDoL,EAAkB/J,GAAkB8J,CAAQ,EAC5C5K,EAAOvD,EAAM,GAAG,MAAQ,CAAA,EAC9B,GAAIoO,EACE7K,EAAK,KAAMZ,GAAWA,IAAWwL,CAAQ,EACzCA,IAAanO,EAAM,GAAG,IACxB,OAEJY,EAAI0H,EAASzM,EAAM,CACf,GAAI,CACA,GAAGmE,EAAM,GACT,GAAIoO,EACE,CACE,KAAM,CACF,GAAG7K,EAAK,OAAOkE,EAAI,EACnB0G,EACA,GAAI,MAAM,QAAQhS,EAAImN,EAAgBzN,CAAI,CAAC,EAAI,CAAC,EAAE,EAAI,EACzD,EACD,IAAK,CAAE,KAAMsS,EAAS,KAAM,KAAAtS,CAAM,CACrC,EACC,CAAE,IAAKsS,EAChB,CACzB,CAAqB,EACDrD,EAAoBjP,EAAM,GAAO,OAAWsS,CAAQ,CACvD,MAEGnO,EAAQ7D,EAAImM,EAASzM,EAAM,CAAE,CAAA,EACzBmE,EAAM,KACNA,EAAM,GAAG,MAAQ,KAEpBoJ,EAAS,kBAAoB3G,EAAQ,mBAClC,EAAE3G,GAAmB8C,EAAO,MAAO/C,CAAI,GAAK2N,EAAY,SACxD5K,EAAO,QAAQ,IAAI/C,CAAI,CAElC,CACb,CACA,EACUwS,GAAc,IAAMjF,EAAS,kBAC/BhI,GAAakH,EAAU9L,GAAQA,GAAOL,EAAIkN,EAAW,OAAQ7M,CAAG,EAAGoC,EAAO,KAAK,EAC7E0P,GAAe,CAACC,EAASC,IAAc,MAAOC,GAAM,CAClDA,IACAA,EAAE,gBAAkBA,EAAE,iBACtBA,EAAE,SAAWA,EAAE,WAEnB,IAAIC,EAAoB,GACpBjP,EAAcL,EAAYmK,CAAW,EACzCK,EAAU,MAAM,KAAK,CACjB,aAAc,EAC1B,CAAS,EACD,GAAI,CACA,GAAIR,EAAS,SAAU,CACnB,KAAM,CAAE,OAAA7I,EAAQ,OAAAmC,GAAW,MAAM0H,EAAc,EAC/Cf,EAAW,OAAS9I,EACpBd,EAAciD,CACjB,MAEG,MAAM2H,EAAyB/B,CAAO,EAEtCjL,EAAcgM,EAAW,MAAM,GAC/BO,EAAU,MAAM,KAAK,CACjB,OAAQ,CAAE,EACV,aAAc,EAClC,CAAiB,EACD,MAAM2E,EAAQ9O,EAAagP,CAAC,IAGxBD,GACA,MAAMA,EAAU,CAAE,GAAGnF,EAAW,MAAQ,EAAEoF,CAAC,EAE/CJ,KAEP,OACMM,EAAK,CACR,MAAAD,EAAoB,GACdC,CACT,QACO,CACJtF,EAAW,YAAc,GACzBO,EAAU,MAAM,KAAK,CACjB,YAAa,GACb,aAAc,GACd,mBAAoBvM,EAAcgM,EAAW,MAAM,GAAKqF,EACxD,YAAarF,EAAW,YAAc,EACtC,OAAQA,EAAW,MACnC,CAAa,CACJ,CACT,EACUuF,GAAa,CAAC/S,EAAM4G,EAAU,CAAA,IAAO,CACnCtG,EAAImM,EAASzM,CAAI,IACbI,EAAYwG,EAAQ,YAAY,EAChCwK,EAASpR,EAAMM,EAAImN,EAAgBzN,CAAI,CAAC,GAGxCoR,EAASpR,EAAM4G,EAAQ,YAAY,EACnC7B,EAAI0I,EAAgBzN,EAAM4G,EAAQ,YAAY,GAE7CA,EAAQ,aACTwD,EAAMoD,EAAW,cAAexN,CAAI,EAEnC4G,EAAQ,YACTwD,EAAMoD,EAAW,YAAaxN,CAAI,EAClCwN,EAAW,QAAU5G,EAAQ,aACvBmI,EAAU/O,EAAMM,EAAImN,EAAgBzN,CAAI,CAAC,EACzC+O,KAELnI,EAAQ,YACTwD,EAAMoD,EAAW,OAAQxN,CAAI,EAC7B2B,EAAgB,SAAW0M,KAE/BN,EAAU,MAAM,KAAK,CAAE,GAAGP,CAAY,CAAA,EAElD,EACUwF,GAAS,CAAChQ,EAAYiQ,EAAmB,CAAA,IAAO,CAClD,MAAMC,EAAgBlQ,GAAcyK,EAC9B0F,EAAqB5P,EAAY2P,CAAa,EAC9CrM,EAAS7D,GAAc,CAACxB,EAAcwB,CAAU,EAChDmQ,EACA1F,EAIN,GAHKwF,EAAiB,oBAClBxF,EAAiByF,GAEjB,CAACD,EAAiB,WAAY,CAC9B,GAAIA,EAAiB,gBACjB,UAAW/P,KAAaH,EAAO,MAC3BzC,EAAIkN,EAAW,YAAatK,CAAS,EAC/B6B,EAAI8B,EAAQ3D,EAAW5C,EAAIoN,EAAaxK,CAAS,CAAC,EAClDkO,EAASlO,EAAW5C,EAAIuG,EAAQ3D,CAAS,CAAC,MAGnD,CACD,GAAII,IAASlD,EAAY4C,CAAU,EAC/B,UAAWhD,KAAQ+C,EAAO,MAAO,CAC7B,MAAMoB,EAAQ7D,EAAImM,EAASzM,CAAI,EAC/B,GAAImE,GAASA,EAAM,GAAI,CACnB,MAAM0M,EAAiB,MAAM,QAAQ1M,EAAM,GAAG,IAAI,EAC5CA,EAAM,GAAG,KAAK,CAAC,EACfA,EAAM,GAAG,IACf,GAAIqH,GAAcqF,CAAc,EAAG,CAC/B,MAAMuC,EAAOvC,EAAe,QAAQ,MAAM,EAC1C,GAAIuC,EAAM,CACNA,EAAK,MAAK,EACV,KACH,CACJ,CACJ,CACJ,CAEL3G,EAAU,CAAA,CACb,CACDiB,EAAcxL,EAAM,iBACd+Q,EAAiB,kBACb1P,EAAYkK,CAAc,EAC1B,CAAE,EACN0F,EACNpF,EAAU,MAAM,KAAK,CACjB,OAAAlH,CAChB,CAAa,EACDkH,EAAU,MAAM,KAAK,CACjB,OAAAlH,CAChB,CAAa,CACJ,CACD9D,EAAS,CACL,MAAO,IAAI,IACX,QAAS,IAAI,IACb,MAAO,IAAI,IACX,MAAO,IAAI,IACX,SAAU,GACV,MAAO,EACnB,EACQ4K,EAAY,MACR,CAAChM,EAAgB,SAAW,CAAC,CAACsR,EAAiB,YACnDtF,EAAY,MAAQ,CAAC,CAACzL,EAAM,iBAC5B6L,EAAU,MAAM,KAAK,CACjB,YAAakF,EAAiB,gBACxBzF,EAAW,YACX,EACN,QAASyF,EAAiB,WAAaA,EAAiB,gBAClDzF,EAAW,QACX,CAAC,EAAEyF,EAAiB,mBAClB,CAAChI,EAAUjI,EAAYyK,CAAc,GAC7C,YAAawF,EAAiB,gBACxBzF,EAAW,YACX,GACN,YAAayF,EAAiB,WAAaA,EAAiB,gBACtDzF,EAAW,YACXyF,EAAiB,mBAAqBjQ,EAClCkJ,GAAeuB,EAAgBzK,CAAU,EACzC,CAAE,EACZ,cAAeiQ,EAAiB,YAC1BzF,EAAW,cACX,CAAE,EACR,OAAQyF,EAAiB,WAAazF,EAAW,OAAS,CAAE,EAC5D,aAAc,GACd,mBAAoB,EAChC,CAAS,CACT,EAiBI,MAAO,CACH,QAAS,CACL,SAAA4E,GACA,WAAA3B,GACA,cAAAqB,GACA,eAAAvD,EACA,YAAAiE,GACA,UAAA7B,EACA,UAAA5B,EACA,aAAAV,EACA,iBAAAmC,GACA,kBAAA/B,EACA,eAAAmC,EACA,UAAA7C,EACA,gBAAApM,EACA,IAAI,SAAU,CACV,OAAO8K,CACV,EACD,IAAI,aAAc,CACd,OAAOiB,CACV,EACD,IAAI,aAAc,CACd,OAAOC,CACV,EACD,IAAI,YAAYlO,EAAO,CACnBkO,EAAclO,CACjB,EACD,IAAI,gBAAiB,CACjB,OAAOgO,CACV,EACD,IAAI,QAAS,CACT,OAAO1K,CACV,EACD,IAAI,OAAOtD,EAAO,CACdsD,EAAStD,CACZ,EACD,IAAI,YAAa,CACb,OAAO+N,CACV,EACD,IAAI,WAAW/N,EAAO,CAClB+N,EAAa/N,CAChB,EACD,IAAI,UAAW,CACX,OAAO8N,CACV,EACD,IAAI,SAAS9N,EAAO,CAChB8N,EAAW,CACP,GAAGA,EACH,GAAG9N,CACvB,CACa,CACJ,EACD,QAAAwR,EACA,SAAAmB,GACA,aAAAK,GACA,MAAAP,GACA,SAAAd,EACA,UAAAV,GACA,MA1EU,CAAC1N,EAAYiQ,IAAqBD,GAAO3M,GAAWrD,CAAU,EACtEA,EAAW0K,CAAW,EACtB1K,EAAYiQ,CAAgB,EAyE9B,WAAAF,GACA,YAAAhB,GACA,WAAAtB,GACA,SAAAwB,GACA,SA5Ea,CAACjS,EAAM4G,EAAU,CAAA,IAAO,CACrC,MAAMzC,EAAQ7D,EAAImM,EAASzM,CAAI,EACzB6Q,EAAiB1M,GAASA,EAAM,GACtC,GAAI0M,EAAgB,CAChB,MAAMyB,EAAWzB,EAAe,KAC1BA,EAAe,KAAK,CAAC,EACrBA,EAAe,IACjByB,EAAS,QACTA,EAAS,MAAK,EACd1L,EAAQ,cAAgB0L,EAAS,SAExC,CACT,EAiEQ,cAAAR,EACR,CACA,CA+BA,SAASuB,GAAQnR,EAAQ,GAAI,CACzB,MAAMoR,EAAetS,EAAM,SACrB,CAACG,EAAWqB,CAAe,EAAIxB,EAAM,SAAS,CAChD,QAAS,GACT,aAAc,GACd,YAAa,GACb,aAAc,GACd,mBAAoB,GACpB,QAAS,GACT,YAAa,EACb,YAAa,CAAE,EACf,cAAe,CAAE,EACjB,OAAQ,CAAE,EACV,cAAekB,EAAM,aAC7B,CAAK,EACIoR,EAAa,UACdA,EAAa,QAAU,CACnB,GAAGhG,GAAkBpL,CAAK,EAC1B,UAAAf,CACZ,GAEI,MAAMC,EAAUkS,EAAa,QAAQ,QACrC,OAAAlS,EAAQ,SAAWc,EACnBD,GAAa,CACT,QAASb,EAAQ,UAAU,MAC3B,SAAUJ,EAAM,YAAavB,GAAU,CAC/BgC,GAAsBhC,EAAO2B,EAAQ,gBAAiB,EAAI,IAC1DA,EAAQ,WAAa,CACjB,GAAGA,EAAQ,WACX,GAAG3B,CACvB,EACgB+C,EAAgB,CAAE,GAAGpB,EAAQ,UAAY,CAAA,EAEzD,EAAW,CAACA,CAAO,CAAC,CACpB,CAAK,EACDJ,EAAM,UAAU,IAAM,CACbI,EAAQ,YAAY,QACrBA,EAAQ,gBAAgB,SAAWA,EAAQ,aAAY,EACvDA,EAAQ,YAAY,MAAQ,IAE5BA,EAAQ,YAAY,QACpBA,EAAQ,YAAY,MAAQ,GAC5BA,EAAQ,UAAU,MAAM,KAAK,CAAE,CAAA,GAEnCA,EAAQ,iBAAgB,CAChC,CAAK,EACDJ,EAAM,UAAU,IAAM,CAClBG,EAAU,aAAeC,EAAQ,aACpC,EAAE,CAACA,EAASD,EAAU,WAAW,CAAC,EACnCmS,EAAa,QAAQ,UAAYpS,GAAkBC,EAAWC,CAAO,EAC9DkS,EAAa,OACxB","x_google_ignoreList":[0]}