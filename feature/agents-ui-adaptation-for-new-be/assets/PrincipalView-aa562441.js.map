{"version":3,"file":"PrincipalView-aa562441.js","sources":["../../packages/shared/src/components/PrincipalView.tsx"],"sourcesContent":["/**\n * Copyright 2024-2025 NetCracker Technology Corporation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { FC } from 'react'\nimport React, { memo } from 'react'\nimport { Box } from '@mui/material'\nimport { KeyIcon } from '../icons/KeyIcon'\nimport { TextWithOverflowTooltip } from './TextWithOverflowTooltip'\nimport type { Principal } from '../entities/principals'\nimport { API_KEY, JOB } from '../entities/principals'\nimport { UserView } from './Users/UserView'\nimport { RobotIcon } from '../icons/RobotIcon'\n\nexport type PrincipalViewProps = {\n  value: Principal | undefined\n}\n\nexport const PrincipalView: FC<PrincipalViewProps> = memo<PrincipalViewProps>(({ value }) => {\n\n  if (!value) {\n    return null\n  }\n\n  if (value.type === API_KEY || value.type === JOB) {\n    return <TokenAndJobView type={value.type} name={value.name}/>\n  }\n\n  return (\n    <UserView\n      name={value.name || value.id}\n      avatarUrl={value.avatarUrl}\n    />\n  )\n})\n\ntype TokenAndJobViewProps = {\n  name?: string\n  type: string\n}\n\nconst TokenAndJobView: FC<TokenAndJobViewProps> = memo<TokenAndJobViewProps>(({ name, type }) => {\n  let viewName: string | undefined\n  let viewIcon: JSX.Element = <></>\n  switch (type) {\n    case API_KEY:\n      viewName = `API key: ${name}`\n      viewIcon = <KeyIcon/>\n      break\n    case JOB:\n      viewName = `Job: ${name}`\n      viewIcon = <RobotIcon color=\"muted\" fontSize=\"small\"/>\n      break\n  }\n\n  return (\n    <Box display=\"flex\" alignItems=\"center\" gap=\"4px\" overflow=\"hidden\" data-testid=\"TokenView\">\n      {viewIcon}\n      <TextWithOverflowTooltip tooltipText={viewName}>\n        {viewName}\n      </TextWithOverflowTooltip>\n    </Box>\n  )\n})\n\n"],"names":["PrincipalView","memo","value","API_KEY","JOB","jsx","TokenAndJobView","UserView","name","type","viewName","viewIcon","Fragment","KeyIcon","RobotIcon","jsxs","Box","TextWithOverflowTooltip"],"mappings":"sVA8BO,MAAAA,EAAAC,EAAA,KAAA,CAAA,CAAA,MAAAC,KAELA,EAIAA,EAAA,OAAAC,GAAAD,EAAA,OAAAE,EACEC,EAAAC,EAAA,CAAA,KAAAJ,EAAA,KAAA,KAAAA,EAAA,IAAA,CAAA,EAGFG,EACEE,EAAC,CAAA,KAAAL,EAAA,MAAAA,EAAA,GAC2B,UAAAA,EAAA,SACT,CAAA,EAVnB,IAaJ,EAOAI,EAAAL,EAAAA,KAAA,CAAA,CAAA,KAAAO,EAAA,KAAAC,CAAA,IAAA,CACE,IAAAC,EACAC,EAAAN,EAAAO,EAAA,CAAA,CAAA,EACA,OAAAH,EAAA,CAAc,KAAAN,EAEVO,EAAA,YAAAF,CAAA,GACAG,EAAAN,EAAAQ,EAAA,CAAA,CAAA,EACA,MAAA,KAAAT,EAEAM,EAAA,QAAAF,CAAA,GACAG,EAAAN,EAAAS,EAAA,CAAA,MAAA,QAAA,SAAA,OAAA,CAAA,EACA,KAAA,CAGJ,OAAAC,EAAAC,EAAA,CAAA,QAAA,OAAA,WAAA,SAAA,IAAA,MAAA,SAAA,SAAA,cAAA,YAAA,SAAA,CAEKL,EAAAN,EAAAY,EAAA,CAAA,YAAAP,EAAA,SAAAA,EAAA,CAGD,CAAA,CAAA,CAGN,CAAA"}