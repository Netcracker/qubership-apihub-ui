{"version":3,"file":"CustomTagsTree-2eed9095.js","sources":["../../packages/shared/src/components/CustomTagsTree.tsx"],"sourcesContent":["/**\n * Copyright 2024-2025 NetCracker Technology Corporation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { FC, ReactNode } from 'react'\nimport * as React from 'react'\nimport { memo } from 'react'\nimport { Box, Typography } from '@mui/material'\nimport type { JSONValue } from '../entities/operations'\n\nexport type TagsTreeProps = {\n  tree: JSONValue\n}\n\nexport type Primitive = null | undefined | number | string | boolean\n\nexport function isPrimitive(tree: JSONValue): tree is Primitive {\n  return ['undefined', 'number', 'string', 'boolean'].includes(typeof tree) || tree === null\n}\n\nconst getTree = (tree: JSONValue): ReactNode => {\n  if (isPrimitive(tree)) {\n    return (\n      <ul>\n        <li>\n          <Typography lineHeight={1.75} fontSize={13} marginLeft=\"8px\" display=\"block\">{`${tree}`}</Typography>\n        </li>\n      </ul>\n    )\n  }\n  if (Array.isArray(tree)) {\n    return (\n      <ul>\n        {tree.map((item, index) => {\n          return (\n            <li key={index}>\n              <Box display=\"flex\" marginLeft=\"8px\">\n                <Typography display=\"block\" variant=\"subtitle1\">- </Typography>\n                {getTree(item)}\n              </Box>\n            </li>\n          )\n        })}\n      </ul>\n    )\n  }\n  if (typeof tree === 'object') {\n    return (\n      <ul>\n        {Object.entries(tree).map(([key, value]) => {\n          return (\n            <li key={key} style={{ marginLeft: '8px' }}>\n              <Box display=\"flex\" flexDirection={isPrimitive(value) ? 'row' : 'column'}>\n                <Typography sx={{ textWrap: 'nowrap' }} display=\"block\" variant=\"subtitle1\">{key}: </Typography>\n                {getTree(value)}\n              </Box>\n            </li>\n          )\n        })}\n      </ul>\n    )\n  }\n}\n\nexport const CustomTagsTree: FC<TagsTreeProps> = memo<TagsTreeProps>(({ tree }) => {\n  return (\n    <>\n      {getTree(tree)}\n    </>\n  )\n})\n"],"names":["isPrimitive","tree","getTree","jsx","Typography","item","index","jsxs","Box","key","value","CustomTagsTree","memo","Fragment"],"mappings":"kLA4BO,SAAAA,EAAAC,EAAA,CACL,MAAA,CAAA,YAAA,SAAA,SAAA,SAAA,EAAA,SAAA,OAAAA,CAAA,GAAAA,IAAA,IACF,CAEA,MAAAC,EAAAD,GAAA,CACE,GAAAD,EAAAC,CAAA,EACE,OAAAE,EAAA,KAAA,CAAA,SAAAA,EAAA,KAAA,CAAA,SAAAA,EAAAC,EAAA,CAAA,WAAA,KAAA,SAAA,GAAA,WAAA,MAAA,QAAA,QAAA,SAAA,GAAAH,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAQF,GAAA,MAAA,QAAAA,CAAA,EACE,OAAAE,EAAA,KAAA,CAAA,SAAAF,EAAA,IAAA,CAAAI,EAAAC,IAGMH,EAAA,KAAA,CAAA,SAAAI,EAAAC,EAAA,CAAA,QAAA,OAAA,WAAA,MAAA,SAAA,CAGML,EAAAC,EAAA,CAAA,QAAA,QAAA,QAAA,YAAA,SAAA,KAAA,EAAkDF,EAAAG,CAAA,CACrC,EAAA,CAAA,EAAAC,CAAA,CAEjB,CAAA,CAAA,EAMV,GAAA,OAAAL,GAAA,SACE,OAAAE,EAAA,KAAA,CAAA,SAAA,OAAA,QAAAF,CAAA,EAAA,IAAA,CAAA,CAAAQ,EAAAC,CAAA,IAGMP,EAAA,KAAA,CAAA,MAAA,CAAA,WAAA,KAAA,EAAA,SAAAI,EAAAC,EAAA,CAAA,QAAA,OAAA,cAAAR,EAAAU,CAAA,EAAA,MAAA,SAAA,SAAA,CAGMH,EAAAH,EAAA,CAAA,GAAA,CAAA,SAAA,UAAA,QAAA,QAAA,QAAA,YAAA,SAAA,CAA6EK,EAAA,IAAI,EAAA,EAAEP,EAAAQ,CAAA,CACrE,EAAA,CAAA,EAAAD,CAAA,CAElB,CAAA,CAAA,CAMZ,EAEOE,EAAAC,EAAA,KAAA,CAAA,CAAA,KAAAX,KACLE,EAAAU,EAAA,CAAA,SAAAX,EAAAD,CAAA,CAAA,CAAA,CAKF"}