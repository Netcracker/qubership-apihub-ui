{"version":3,"file":"CompareOperationPathsForm.stories-9f4b0072.js","sources":["../../packages/shared/src/components/OperationOptionItem.tsx","../../packages/shared/src/components/CompareOperationPathsForm.tsx"],"sourcesContent":["/**\n * Copyright 2024-2025 NetCracker Technology Corporation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { FC, HTMLAttributes } from 'react'\nimport * as React from 'react'\nimport { memo, useMemo } from 'react'\nimport type { Operation } from '../entities/operations'\nimport { isRestOperation } from '../entities/operations'\nimport type { TestableProps } from './Testable'\nimport { OptionItem } from './OptionItem'\n\nexport type OperationOptionItemProps = {\n  props: HTMLAttributes<HTMLLIElement>\n  operation: Operation\n} & TestableProps\n\nexport const OperationOptionItem: FC<OperationOptionItemProps> = memo<OperationOptionItemProps>(({\n  props,\n  operation,\n  testId,\n}) => {\n  const [subtitle, chipValue] = useMemo(() => (\n    isRestOperation(operation)\n      ? [operation.path, operation.method]\n      : [operation.method, operation.type]\n  ), [operation])\n\n  return (\n    <OptionItem\n      title={operation.title}\n      subtitle={subtitle}\n      chipValue={chipValue}\n      testId={testId}\n      props={props}\n    />\n  )\n})\n","/**\n * Copyright 2024-2025 NetCracker Technology Corporation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { FC, SyntheticEvent } from 'react'\nimport * as React from 'react'\nimport { memo } from 'react'\nimport {\n  Autocomplete,\n  Box,\n  Button,\n  debounce,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  TextField,\n  Typography,\n} from '@mui/material'\nimport type { Control } from 'react-hook-form'\nimport { Controller } from 'react-hook-form'\nimport type { Operation, OperationData, OperationsData } from '../entities/operations'\nimport { disableAutocompleteSearch } from '../utils/mui'\nimport { DEFAULT_DEBOUNCE } from '../utils/constants'\nimport type { IsLoading } from '../utils/aliases'\nimport type { TestableProps } from './Testable'\nimport { OperationOptionItem } from './OperationOptionItem'\nimport { DialogForm } from './DialogForm'\nimport { Swapper } from './Swapper'\n\nexport type CompareOperationPathsDialogFormData = {\n  originalOperation: OperationData | null\n  changedOperation: OperationData | null\n}\n\nexport type CompareOperationPathsDialogData = {\n  control: Control<CompareOperationPathsDialogFormData>\n  originalOperationOptions: OperationsData\n  changedOperationOptions: OperationsData\n  onSwap: () => void\n  onSubmit: () => void\n  isOriginalOperationsLoading: boolean\n  isChangedOperationsLoading: boolean\n}\n\nexport type CompareOperationPathsDialogFormProps = CompareOperationPathsDialogData & {\n  open: boolean\n  setOpen: (value: boolean) => void\n  onOriginalInputChange: (event: SyntheticEvent, value: string) => void\n  onChangedInputChange: (event: SyntheticEvent, value: string) => void\n}\n\n// First Order Component //\nexport const CompareOperationPathsDialogForm: FC<CompareOperationPathsDialogFormProps> = memo(({\n  open,\n  setOpen,\n  control,\n  originalOperationOptions,\n  changedOperationOptions,\n  onSwap,\n  onSubmit,\n  isOriginalOperationsLoading,\n  isChangedOperationsLoading,\n  onOriginalInputChange,\n  onChangedInputChange,\n}) => {\n  return (\n    <DialogForm\n      open={open}\n      onClose={() => setOpen(false)}\n      onSubmit={onSubmit}\n      maxWidth=\"md\"\n    >\n      <DialogTitle>\n        Select Operations to Compare\n      </DialogTitle>\n      <DialogContent sx={DIALOG_CONTENT_STYLES}>\n        <Typography variant=\"button\" sx={{ gridArea: 'originalTitle' }}>\n          Original\n        </Typography>\n        <OperationController\n          name=\"originalOperation\"\n          control={control}\n          options={originalOperationOptions}\n          isLoading={isOriginalOperationsLoading}\n          onInputChange={onOriginalInputChange}\n          testId=\"OriginalOperationAutocomplete\"\n        />\n\n        <Box sx={{ gridArea: 'swapper', alignSelf: 'center' }}>\n          <Swapper onSwap={onSwap}/>\n        </Box>\n\n        <Typography variant=\"button\" sx={{ gridArea: 'changedTitle' }}>\n          Changed\n        </Typography>\n        <OperationController\n          name=\"changedOperation\"\n          control={control}\n          options={changedOperationOptions}\n          isLoading={isChangedOperationsLoading}\n          onInputChange={onChangedInputChange}\n          testId=\"ChangedOperationAutocomplete\"\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button variant=\"contained\" type=\"submit\" data-testid=\"CompareButton\">\n          Compare\n        </Button>\n        <Button variant=\"outlined\" onClick={() => setOpen(false)} data-testid=\"CancelButton\">\n          Cancel\n        </Button>\n      </DialogActions>\n    </DialogForm>\n  )\n})\n\ntype OperationControllerProps = {\n  name: keyof CompareOperationPathsDialogFormData\n  control: Control<CompareOperationPathsDialogFormData, unknown>\n  options: OperationsData\n  isLoading: IsLoading\n  onInputChange: (event: SyntheticEvent, value: string) => void\n} & TestableProps\n\nconst OperationController: FC<OperationControllerProps> = memo<OperationControllerProps>(({\n  name,\n  control,\n  options,\n  isLoading,\n  testId,\n  onInputChange,\n}) => {\n  return (\n    <Controller\n      name={name}\n      control={control}\n      render={({ field: { value, onChange } }) => (\n        <Autocomplete\n          autoSelect\n          filterOptions={disableAutocompleteSearch}\n          onInputChange={debounce(onInputChange, DEFAULT_DEBOUNCE)}\n          sx={{ gridArea: name }}\n          loading={isLoading}\n          value={value}\n          options={options}\n          getOptionLabel={({ title }: Operation) => title}\n          isOptionEqualToValue={(option, value) => option.operationKey === value.operationKey}\n          renderOption={(props, operation) => <OperationOptionItem\n            key={crypto.randomUUID()}\n            props={props}\n            operation={operation}\n          />}\n          renderInput={(params) => <TextField {...params} required label=\"Operation\"/>}\n          onChange={(_, value) => onChange(value)}\n          data-testid={testId}\n        />\n      )}\n    />\n  )\n})\n\nconst DIALOG_CONTENT_STYLES = {\n  display: 'grid',\n  columnGap: 1,\n  gridTemplateRows: 'repeat(2, max-content)',\n  gridTemplateColumns: '400px max-content 400px',\n  gridTemplateAreas: `\n    'originalTitle        originalTitle     changedTitle'\n    'originalOperation    swapper           changedOperation'\n  `,\n}\n"],"names":["OperationOptionItem","memo","props","operation","testId","subtitle","chipValue","useMemo","isRestOperation","jsx","OptionItem","CompareOperationPathsDialogForm","open","setOpen","control","originalOperationOptions","changedOperationOptions","onSwap","onSubmit","isOriginalOperationsLoading","isChangedOperationsLoading","onOriginalInputChange","onChangedInputChange","jsxs","DialogForm","DialogTitle","DialogContent","DIALOG_CONTENT_STYLES","Typography","OperationController","Box","Swapper","DialogActions","Button","name","options","isLoading","onInputChange","Controller","value","onChange","Autocomplete","disableAutocompleteSearch","debounce","DEFAULT_DEBOUNCE","title","option","value2","params","TextField","_"],"mappings":"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"}