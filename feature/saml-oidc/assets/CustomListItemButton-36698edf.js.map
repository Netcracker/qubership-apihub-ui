{"version":3,"file":"CustomListItemButton-36698edf.js","sources":["../../packages/shared/src/components/CustomListItemButton.tsx"],"sourcesContent":["/**\n * Copyright 2024-2025 NetCracker Technology Corporation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ReactNode } from 'react'\nimport React, { memo, useCallback } from 'react'\nimport { ListItemButton } from '@mui/material'\nimport type { TestableProps } from './Testable'\n\nconst SELECTED_BUTTON_BCG_COLOR = '#ECEDEF'\n\n// First Order Component //\nexport type CustomListItemButtonProps<T> = {\n  keyProp: string\n  data: T\n  itemComponent: ReactNode\n  onClick?: (data: T) => void\n  refObject?: React.RefObject<HTMLDivElement>\n  isSelected?: boolean\n  isSubListItem?: boolean\n  size?: ListItemSize\n} & TestableProps\n\nfunction CustomListItemButtonComponent<T>(props: CustomListItemButtonProps<T>): JSX.Element {\n  const {\n    keyProp,\n    data,\n    itemComponent,\n    refObject,\n    onClick,\n    testId,\n    isSelected,\n    isSubListItem = false,\n    size = LIST_ITEM_SIZE_SMALL,\n  } = props\n\n  const handleClick = useCallback(() => onClick?.(data), [onClick, data])\n\n  return (\n    <ListItemButton\n      ref={refObject}\n      sx={{\n        backgroundColor: isSelected ? SELECTED_BUTTON_BCG_COLOR : 'transparent',\n        pl: isSubListItem ? 4 : 1,\n        height: SIZE_TO_HEIGHT_MAP[size],\n      }}\n      key={keyProp}\n      onClick={handleClick}\n      data-testid={testId}\n    >\n      {itemComponent}\n    </ListItemButton>\n  )\n}\n\nconst genericMemo: <T>  (component: T) => T = memo\nexport const CustomListItemButton = genericMemo(CustomListItemButtonComponent)\n\nexport const LIST_ITEM_SIZE_BIG = 'big'\nexport const LIST_ITEM_SIZE_SMALL = 'small'\n\nexport type ListItemSize = typeof LIST_ITEM_SIZE_BIG | typeof LIST_ITEM_SIZE_SMALL\n\nconst SIZE_TO_HEIGHT_MAP: Record<ListItemSize, number> = {\n  [LIST_ITEM_SIZE_BIG]: 55,\n  [LIST_ITEM_SIZE_SMALL]: 24,\n}\n"],"names":["SELECTED_BUTTON_BCG_COLOR","CustomListItemButtonComponent","props","keyProp","data","itemComponent","refObject","onClick","testId","isSelected","isSubListItem","size","LIST_ITEM_SIZE_SMALL","handleClick","useCallback","jsx","ListItemButton","SIZE_TO_HEIGHT_MAP","genericMemo","memo","CustomListItemButton","LIST_ITEM_SIZE_BIG"],"mappings":"uIAqBA,MAAAA,EAAA,UAcA,SAAAC,EAAAC,EAAA,CACE,KAAA,CAAM,QAAAC,EACJ,KAAAC,EACA,cAAAC,EACA,UAAAC,EACA,QAAAC,EACA,OAAAC,EACA,WAAAC,EACA,cAAAC,EAAA,GACgB,KAAAC,EAAAC,CACT,EAAAV,EAGTW,EAAAC,EAAA,YAAA,IAAAP,GAAA,YAAAA,EAAAH,GAAA,CAAAG,EAAAH,CAAA,CAAA,EAEA,OAAAW,EACEC,EAAC,CAAA,IAAAV,EACM,GAAA,CACD,gBAAAG,EAAAT,EAAA,cACwD,GAAAU,EAAA,EAAA,EAClC,OAAAO,EAAAN,CAAA,CACO,EACjC,QAAAE,EAES,cAAAL,EACI,SAAAH,CAEZ,EAAAF,CAJI,CAOX,CAEA,MAAAe,EAAAC,EAAAA,KACOC,EAAAF,EAAAjB,CAAA,EAEAoB,EAAA,MACAT,EAAA,QAIPK,EAAA,CAAyD,CAAAI,CAAA,EAAA,GACjC,CAAAT,CAAA,EAAA,EAExB"}