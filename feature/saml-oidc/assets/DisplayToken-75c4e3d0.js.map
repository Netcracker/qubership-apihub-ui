{"version":3,"file":"DisplayToken-75c4e3d0.js","sources":["../../node_modules/react-use/esm/useMountedState.js","../../node_modules/react-use/esm/useSetState.js","../../node_modules/react-use/esm/useCopyToClipboard.js","../../node_modules/@mui/icons-material/ContentCopy.js","../../packages/shared/src/components/DisplayToken.tsx"],"sourcesContent":["import { useCallback, useEffect, useRef } from 'react';\nexport default function useMountedState() {\n    var mountedRef = useRef(false);\n    var get = useCallback(function () { return mountedRef.current; }, []);\n    useEffect(function () {\n        mountedRef.current = true;\n        return function () {\n            mountedRef.current = false;\n        };\n    }, []);\n    return get;\n}\n","import { useCallback, useState } from 'react';\nvar useSetState = function (initialState) {\n    if (initialState === void 0) { initialState = {}; }\n    var _a = useState(initialState), state = _a[0], set = _a[1];\n    var setState = useCallback(function (patch) {\n        set(function (prevState) {\n            return Object.assign({}, prevState, patch instanceof Function ? patch(prevState) : patch);\n        });\n    }, []);\n    return [state, setState];\n};\nexport default useSetState;\n","import writeText from 'copy-to-clipboard';\nimport { useCallback } from 'react';\nimport useMountedState from './useMountedState';\nimport useSetState from './useSetState';\nvar useCopyToClipboard = function () {\n    var isMounted = useMountedState();\n    var _a = useSetState({\n        value: undefined,\n        error: undefined,\n        noUserInteraction: true,\n    }), state = _a[0], setState = _a[1];\n    var copyToClipboard = useCallback(function (value) {\n        if (!isMounted()) {\n            return;\n        }\n        var noUserInteraction;\n        var normalizedValue;\n        try {\n            // only strings and numbers casted to strings can be copied to clipboard\n            if (typeof value !== 'string' && typeof value !== 'number') {\n                var error = new Error(\"Cannot copy typeof \" + typeof value + \" to clipboard, must be a string\");\n                if (process.env.NODE_ENV === 'development')\n                    console.error(error);\n                setState({\n                    value: value,\n                    error: error,\n                    noUserInteraction: true,\n                });\n                return;\n            }\n            // empty strings are also considered invalid\n            else if (value === '') {\n                var error = new Error(\"Cannot copy empty string to clipboard.\");\n                if (process.env.NODE_ENV === 'development')\n                    console.error(error);\n                setState({\n                    value: value,\n                    error: error,\n                    noUserInteraction: true,\n                });\n                return;\n            }\n            normalizedValue = value.toString();\n            noUserInteraction = writeText(normalizedValue);\n            setState({\n                value: normalizedValue,\n                error: undefined,\n                noUserInteraction: noUserInteraction,\n            });\n        }\n        catch (error) {\n            setState({\n                value: normalizedValue,\n                error: error,\n                noUserInteraction: noUserInteraction,\n            });\n        }\n    }, []);\n    return [state, copyToClipboard];\n};\nexport default useCopyToClipboard;\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z\"\n}), 'ContentCopy');\nexports.default = _default;","/**\n * Copyright 2024-2025 NetCracker Technology Corporation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { FC } from 'react'\nimport * as React from 'react'\nimport { memo, useCallback } from 'react'\nimport { Box, TextField, Typography } from '@mui/material'\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy'\nimport { useCopyToClipboard } from 'react-use'\nimport type { Key } from '../entities/keys'\nimport { InfoContextIcon } from '../icons/InfoContextIcon'\nimport type { LinkType } from './Notifications/Notification'\n\nexport type NotificationDetail = {\n  title?: string\n  message: string\n  link?: LinkType\n}\n\nexport type DisplayTokenProps = {\n  generatedApiKey: Key\n  showSuccessNotification: (detail: NotificationDetail) => void\n}\n\n//First Order Component\nexport const DisplayToken: FC<DisplayTokenProps> = memo(({\n  generatedApiKey,\n  showSuccessNotification,\n}) => {\n  const [, copyToClipboard] = useCopyToClipboard()\n\n  const handleCopyToClipboard = useCallback((event: React.MouseEvent) => {\n    // prevents the Notification from closing by avoiding the Snackbar's \"clickaway\" event handling\n    event.stopPropagation()\n    copyToClipboard(generatedApiKey ?? '')\n    showSuccessNotification({ message: 'Access token copied' })\n  }, [copyToClipboard, showSuccessNotification, generatedApiKey])\n\n  return (\n    <Box>\n      <TextField\n        sx={{ width: '681px' }}\n        label=\"Access token\"\n        value={generatedApiKey}\n        InputProps={{\n          readOnly: true,\n          endAdornment: <ContentCopyIcon\n            sx={{\n              cursor: 'pointer',\n              '&:hover': { color: '#0068FF' },\n              '&:active': { color: '#003AB8' },\n            }}\n            onClick={handleCopyToClipboard}\n            data-testid=\"CopyIcon\"\n          />,\n        }}\n        data-testid=\"AccessTokenTextField\"\n      />\n      <Box display=\"flex\" alignItems=\"center\" marginTop=\"4px\" data-testid=\"TokenWarning\">\n        <InfoContextIcon/>\n        <Typography sx={{ ml: '4px', fontSize: '12px', color: '#626D82' }}>\n          Copy and save this token because it wonâ€™t be saved\n        </Typography>\n      </Box>\n    </Box>\n  )\n})\n"],"names":["useMountedState","mountedRef","useRef","get","useCallback","useEffect","useSetState","initialState","_a","useState","state","set","setState","patch","prevState","useSetState$1","useCopyToClipboard","isMounted","copyToClipboard","value","noUserInteraction","normalizedValue","error","writeText","useCopyToClipboard$1","_interopRequireDefault","require$$0","ContentCopy","default_1","_createSvgIcon","require$$1","_jsxRuntime","require$$2","_default","DisplayToken","memo","generatedApiKey","showSuccessNotification","handleCopyToClipboard","event","jsxs","Box","jsx","TextField","ContentCopyIcon","InfoContextIcon","Typography"],"mappings":"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","x_google_ignoreList":[0,1,2,3]}