{"version":3,"file":"validations-4f7a4a85.js","sources":["../../packages/shared/src/utils/validations.ts"],"sourcesContent":["/**\n * Copyright 2024-2025 NetCracker Technology Corporation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { type FileExtension, getFileExtension, createFileFormatEnumeration } from './files'\n\nconst RESTRICTED_ALIAS_SYMBOLS = ['.', ' ', '/', '#', '&']\n\nexport const ALIAS_VALIDATION_RULES: Record<string, (alias: string) => boolean | string> = {\n  limit: alias => alias.length <= 10 || 'Max number of characters is 10',\n  restrictedSymbols: alias => !RESTRICTED_ALIAS_SYMBOLS.find(char => alias.includes(char)) || `Next symbols are restricted — \"${RESTRICTED_ALIAS_SYMBOLS}\"`,\n}\n\nconst RESTRICTED_FILENAME_SYMBOLS = ['\\\\', '/', ':', '*', '?', '\"', '<', '>', '|']\n\nexport const FILENAME_VALIDATION_RULES: Record<string, (alias: string) => boolean | string> = {\n  limit: filename => filename.length <= 256 || 'Max number of characters is 256',\n  restrictedSymbols: filename => !RESTRICTED_FILENAME_SYMBOLS.find(char => filename.includes(char)) || `Next symbols are restricted — \"${RESTRICTED_FILENAME_SYMBOLS}\"`,\n}\n\nexport const RESTRICTED_VERSION_SYMBOLS = ['\\\\', '/', ':', '*', '?', '\"', '<', '>', '|', '#', '&', '^', '@', '!', '$', '%', '(', ')', '+', '=']\n\nexport function checkReleaseVersionFormat(version: string, versionPattern: string): boolean | string {\n  const regexp = new RegExp(versionPattern)\n\n  return regexp.test(version) || `Release version must match the following regular expression: ${versionPattern}`\n}\n\nexport function checkVersionRestrictedSymbols(version: string): boolean | string {\n  return !RESTRICTED_VERSION_SYMBOLS.find(char => version.includes(char)) || 'Only \\'A-Za-z0-9_.~-\\' characters are allowed'\n}\n\nexport function checkVersionNotEqualToPrevious(version: string, previousVersion: string): boolean | string {\n  return version !== previousVersion || 'The version must not be the same as the previous one'\n}\n\nexport function checkFileType(file: File, acceptableExtensions: FileExtension[]): boolean | string {\n  const isWrongFileType = !acceptableExtensions?.includes(getFileExtension(file.name))\n  return !isWrongFileType || `File format must be ${createFileFormatEnumeration(acceptableExtensions)}`\n}\n"],"names":["RESTRICTED_ALIAS_SYMBOLS","ALIAS_VALIDATION_RULES","alias","char","RESTRICTED_VERSION_SYMBOLS","checkReleaseVersionFormat","version","versionPattern","checkVersionRestrictedSymbols","checkVersionNotEqualToPrevious","previousVersion","checkFileType","file","acceptableExtensions","getFileExtension","createFileFormatEnumeration"],"mappings":"+CAkBA,MAAMA,EAA2B,CAAC,IAAK,IAAK,IAAK,IAAK,GAAG,EAE5CC,EAA8E,CACzF,MAAOC,GAASA,EAAM,QAAU,IAAM,iCACtC,kBAAmBA,GAAS,CAACF,EAAyB,KAAKG,GAAQD,EAAM,SAASC,CAAI,CAAC,GAAK,kCAAkCH,CAAwB,GACxJ,EASaI,EAA6B,CAAC,KAAM,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAG,EAE9H,SAAAC,EAA0BC,EAAiBC,EAA0C,CAGnG,OAFe,IAAI,OAAOA,CAAc,EAE1B,KAAKD,CAAO,GAAK,gEAAgEC,CAAc,EAC/G,CAEO,SAASC,EAA8BF,EAAmC,CACxE,MAAA,CAACF,EAA2B,KAAKD,GAAQG,EAAQ,SAASH,CAAI,CAAC,GAAK,6CAC7E,CAEgB,SAAAM,EAA+BH,EAAiBI,EAA2C,CACzG,OAAOJ,IAAYI,GAAmB,sDACxC,CAEgB,SAAAC,EAAcC,EAAYC,EAAyD,CAEjG,MAAO,CADiB,EAACA,GAAA,MAAAA,EAAsB,SAASC,EAAiBF,EAAK,IAAI,KACvD,uBAAuBG,EAA4BF,CAAoB,CAAC,EACrG"}