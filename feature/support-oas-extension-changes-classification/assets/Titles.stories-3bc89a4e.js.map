{"version":3,"file":"Titles.stories-3bc89a4e.js","sources":["../../packages/shared/src/components/ApiTypeSelector.tsx","../../packages/shared/src/components/Titles/PageTitle.tsx"],"sourcesContent":["/**\n * Copyright 2024-2025 NetCracker Technology Corporation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ChangeEvent, FC } from 'react'\nimport { memo } from 'react'\nimport type { SelectChangeEvent } from '@mui/material'\nimport { MenuItem, Select, TextField } from '@mui/material'\nimport type { ApiType } from '../entities/api-types'\nimport { API_TYPE_TITLE_MAP, API_TYPES } from '../entities/api-types'\n\nexport type ApiTypeSelectorProps = {\n  apiType: ApiType\n  standard?: boolean\n  onChange?: (value: ApiType) => void\n}\n\n// First Order Component //\nexport const ApiTypeSelector: FC<ApiTypeSelectorProps> = memo<ApiTypeSelectorProps>(({\n  standard = false,\n  apiType,\n  onChange,\n}) => {\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement> | SelectChangeEvent): void => {\n    onChange?.(event.target.value as ApiType)\n  }\n\n  const options = API_TYPES.map(apiType => (\n    <MenuItem\n      value={apiType}\n      data-testid={`MenuItem-${apiType}`}\n    >\n      {API_TYPE_TITLE_MAP[apiType]}\n    </MenuItem>\n  ))\n\n  return standard\n    ? (\n      <Select\n        sx={{ ml: 2, mt: 0.5 }}\n        variant=\"standard\"\n        disableUnderline\n        value={apiType}\n        onChange={handleChange}\n        data-testid=\"ApiTypeSelector\"\n      >\n        {options}\n      </Select>\n    )\n    : (\n      <TextField\n        sx={{ height: '32px', m: 0 }}\n        select\n        variant=\"filled\"\n        value={apiType}\n        hiddenLabel\n        onChange={handleChange}\n        data-testid=\"ApiTypeSelector\"\n      >\n        {options}\n      </TextField>\n    )\n})\n","/**\n * Copyright 2024-2025 NetCracker Technology Corporation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { FC, ReactNode } from 'react'\nimport * as React from 'react'\nimport { memo } from 'react'\nimport { Box, Typography } from '@mui/material'\nimport { ApiTypeSelector } from '../ApiTypeSelector'\nimport type { ApiType } from '../../entities/api-types'\n\nexport type PageTitleProps = {\n  title: string\n  titleComponent?: ReactNode\n  apiType?: ApiType\n  withApiSelector?: boolean\n  onApiTypeChange?: (value: ApiType) => void\n}\n\n// First Order Component //\nexport const PageTitle: FC<PageTitleProps> = memo<PageTitleProps>(({\n  title,\n  titleComponent,\n  apiType,\n  withApiSelector = false,\n  onApiTypeChange,\n}) => {\n  return (\n    <Box\n      display=\"flex\"\n      width=\"100%\"\n      alignItems=\"center\"\n      flexGrow={1}\n      gap={3}\n      mr={3}\n      height=\"32px\"\n    >\n      <Box display=\"flex\" alignItems=\"center\" gap={1}>\n        <Typography variant=\"body1\" fontSize={15} sx={{ fontWeight: 600 }}>{title}</Typography>\n        {titleComponent && <Box fontSize={15} fontWeight={600}>{titleComponent}</Box>}\n      </Box>\n\n      {withApiSelector && apiType && (\n        <Box>\n          <ApiTypeSelector\n            apiType={apiType}\n            onChange={onApiTypeChange}\n          />\n        </Box>\n      )}\n    </Box>\n  )\n})\n"],"names":["ApiTypeSelector","memo","standard","apiType","onChange","handleChange","event","options","API_TYPES","apiType2","jsx","MenuItem","API_TYPE_TITLE_MAP","Select","TextField","PageTitle","title","titleComponent","withApiSelector","onApiTypeChange","jsxs","Box","Typography"],"mappings":"+qDA8BO,MAAAA,EAAAC,EAAA,KAAA,CAAA,CAA8E,SAAAC,EAAA,GACxE,QAAAC,EACX,SAAAC,CAEF,IAAA,CAEE,MAAAC,EAAAC,GAAA,CACEF,GAAA,MAAAA,EAAAE,EAAA,OAAA,MAAwC,EAG1CC,EAAAC,EAAA,IAAAC,GAAAC,EACEC,EAAC,CAAA,MAAAF,EACQ,cAAA,YAAAA,CAAA,GACyB,SAAAG,EAAAH,CAAA,CAEL,CAAA,CAAA,EAI/B,OAAAP,EAAAQ,EAEIG,EAAC,CAAA,GAAA,CAAA,GAAA,EAAA,GAAA,EAAA,EACsB,QAAA,WACb,iBAAA,GACQ,MAAAV,EACT,SAAAE,EACG,cAAA,kBACE,SAAAE,CAEX,CAAA,EAAAG,EAIHI,EAAC,CAAA,GAAA,CAAA,OAAA,OAAA,EAAA,CAAA,EAC4B,OAAA,GACrB,QAAA,SACE,MAAAX,EACD,YAAA,GACI,SAAAE,EACD,cAAA,kBACE,SAAAE,CAEX,CAAA,CAGT,CAAA,wcC3CO,MAAAQ,EAAAd,EAAA,KAAA,CAAA,CAA4D,MAAAe,EACjE,eAAAC,EACA,QAAAd,EACA,gBAAAe,EAAA,GACkB,gBAAAC,CAEpB,IACEC,EACEC,EAAC,CAAA,QAAA,OACS,MAAA,OACF,WAAA,SACK,SAAA,EACD,IAAA,EACL,GAAA,EACD,OAAA,OACG,SAAA,CAEPD,EAAAC,EAAA,CAAA,QAAA,OAAA,WAAA,SAAA,IAAA,EAAA,SAAA,CACEX,EAAAY,EAAA,CAAA,QAAA,QAAA,SAAA,GAAA,GAAA,CAAA,WAAA,GAAA,EAAA,SAAAN,CAAA,CAAA,EAA0EC,GAAAP,EAAAW,EAAA,CAAA,SAAA,GAAA,WAAA,IAAA,SAAAJ,EAAA,CACH,EAAA,EACzEC,GAAAf,GAAAO,EAAAW,EAAA,CAAA,SAAAX,EAIIV,EAAC,CAAA,QAAAG,EACC,SAAAgB,CACU,CAAA,EAAA,CAEd,CAAA,CAAA,CAIR"}