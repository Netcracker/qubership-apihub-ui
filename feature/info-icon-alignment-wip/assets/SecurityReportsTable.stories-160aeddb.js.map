{"version":3,"file":"SecurityReportsTable.stories-160aeddb.js","sources":["../../packages/shared/src/components/SecurityReportsTable.tsx","../../packages/shared/src/stories/samples/table-samples.ts"],"sourcesContent":["/**\n * Copyright 2024-2025 NetCracker Technology Corporation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { FC } from 'react'\nimport React, { memo, useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport type { ColumnDef } from '@tanstack/table-core'\nimport {\n  Box,\n  MenuItem,\n  Skeleton,\n  type SxProps,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Tooltip,\n  Typography,\n} from '@mui/material'\nimport type { ColumnSizingInfoState, ColumnSizingState, OnChangeFn } from '@tanstack/react-table'\nimport { flexRender, getCoreRowModel, getExpandedRowModel, useReactTable } from '@tanstack/react-table'\nimport { TextWithOverflowTooltip } from './TextWithOverflowTooltip'\nimport { ColumnDelimiter } from './ColumnDelimiter'\nimport { CONTENT_PLACEHOLDER_AREA, Placeholder } from './Placeholder'\nimport type { HasNextPage, IsFetchingNextPage, IsLoading } from '../utils/aliases'\nimport type { ColumnModel } from '../hooks/table-resizing/useColumnResizing'\nimport { DEFAULT_CONTAINER_WIDTH, useColumnsSizing } from '../hooks/table-resizing/useColumnResizing'\nimport { useIntersectionObserver } from '../hooks/common/useIntersectionObserver'\nimport { InfoContextIcon } from '../icons/InfoContextIcon'\nimport { isEmpty } from '../utils/arrays'\nimport { DEFAULT_NUMBER_SKELETON_ROWS } from '../utils/constants'\nimport { createComponents } from '../utils/components'\nimport { DownloadIcon } from '../icons/DownloadIcon'\nimport { MenuButton } from './Buttons/MenuButton'\nimport { ButtonWithHint } from './Buttons/ButtonWithHint'\nimport { useResizeObserver } from '../hooks/common/useResizeObserver'\nimport { FormattedDate } from './FormattedDate'\nimport type { Principal } from '../entities/principals'\nimport { PrincipalView } from './PrincipalView'\n\nexport type ReportDownloadOption = {\n  value: DownloadType\n  text: string\n}\n\nexport type SecurityReportsTableProps = {\n  data: SecurityReports\n  downloadOptions?: ReportDownloadOption[]\n  downloadSecurityReport: (processKey: string, value?: DownloadType) => void\n  fetchNextPage: () => Promise<number>\n  isFetchingNextPage: IsFetchingNextPage\n  hasNextPage: HasNextPage\n  isLoading: IsLoading\n}\n\n// First Order Component //\nexport const SecurityReportsTable: FC<SecurityReportsTableProps> = memo(({\n  data,\n  downloadOptions,\n  downloadSecurityReport,\n  fetchNextPage,\n  isFetchingNextPage,\n  hasNextPage,\n  isLoading,\n}) => {\n  const [containerWidth, setContainerWidth] = useState(DEFAULT_CONTAINER_WIDTH)\n  const [columnSizingInfo, setColumnSizingInfo] = useState<ColumnSizingInfoState>()\n  const [, setHandlingColumnSizing] = useState<ColumnSizingState>()\n\n  const tableContainerRef = useRef<HTMLDivElement>(null)\n  useResizeObserver(tableContainerRef, setContainerWidth)\n\n  const actualColumnSizing = useColumnsSizing({\n    containerWidth: containerWidth,\n    columnModels: COLUMNS_MODELS,\n    columnSizingInfo: columnSizingInfo,\n    defaultMinColumnSize: 150,\n  })\n\n  const ref = useRef<HTMLTableRowElement>(null)\n  useIntersectionObserver(ref, isFetchingNextPage, hasNextPage, fetchNextPage)\n\n  const columns: ColumnDef<SecurityReport>[] = useMemo(() => {\n      return [\n        {\n          id: DATE_COLUMN_ID,\n          header: 'Date',\n          cell: ({ row: { original: { createdAt } } }) => (\n            <FormattedDate value={createdAt}/>\n          ),\n        },\n        {\n          id: CREATED_BY_COLUMN_ID,\n          header: 'Created By',\n          cell: ({ row: { original: { createdBy } } }) => (\n            <PrincipalView value={createdBy}/>\n          ),\n        },\n        {\n          id: STATUS_COLUMN_ID,\n          header: 'Status',\n          cell: ({ row: { original: { status, details } } }) => (\n            <Box display=\"flex\">\n              <Typography fontSize=\"13px\">{status}</Typography>\n              {status !== RUNNING_SECURITY_REPORT_STATUS && details && (\n                <Tooltip title={details}>\n                  <Box display=\"flex\" alignItems=\"center\" ml={0.5}>\n                    <InfoContextIcon fontSize=\"extra-small\"/>\n                  </Box>\n                </Tooltip>\n              )}\n            </Box>\n          ),\n        },\n        {\n          id: TOTAL_NUMBER_OF_SERVICES_COLUMN_ID,\n          header: 'Total Number of Services',\n          cell: ({ row: { original: { servicesTotal } } }) => (\n            <TextWithOverflowTooltip tooltipText={servicesTotal}>\n              <Typography variant=\"inherit\">{servicesTotal}</Typography>\n            </TextWithOverflowTooltip>\n          ),\n        },\n        {\n          id: NUMBER_OF_PROCESSED_SERVICES_COLUMN_ID,\n          header: 'Number of Processed Services',\n          cell: ({ row: { original: { servicesProcessed } } }) => (\n            <TextWithOverflowTooltip tooltipText={servicesProcessed}>\n              <Typography variant=\"inherit\">{servicesProcessed}</Typography>\n            </TextWithOverflowTooltip>\n          ),\n        },\n        {\n          id: ACTIONS_COLUMN_ID,\n          header: '',\n          cell: ({ row: { original: { processId } } }) => (\n            <DownloadButton\n              processId={processId}\n              onDownloadReport={downloadSecurityReport}\n              downloadOptions={downloadOptions}\n            />\n          ),\n        },\n      ]\n    },\n    [downloadOptions, downloadSecurityReport],\n  )\n\n  const { getHeaderGroups, getRowModel, setColumnSizing } = useReactTable({\n    data: data,\n    columns: columns,\n    columnResizeMode: 'onChange',\n    getCoreRowModel: getCoreRowModel(),\n    getExpandedRowModel: getExpandedRowModel(),\n    onColumnSizingChange: setHandlingColumnSizing as OnChangeFn<ColumnSizingState>,\n    onColumnSizingInfoChange: setColumnSizingInfo as OnChangeFn<ColumnSizingInfoState>,\n  })\n\n  useEffect(() => setColumnSizing(actualColumnSizing), [setColumnSizing, actualColumnSizing])\n\n  return (\n    <TableContainer ref={tableContainerRef}>\n      <Table>\n        <TableHead>\n          {getHeaderGroups().map(headerGroup => (\n            <TableRow key={headerGroup.id}>\n              {headerGroup.headers.map((header, index) => (\n                <TableCell\n                  key={header.id}\n                  align=\"left\"\n                  width={actualColumnSizing ? actualColumnSizing[header.id] : header.getSize()}\n                  sx={{\n                    '&:hover': {\n                      borderRight: '2px solid rgba(224, 224, 224, 1)',\n                    },\n                  }}\n                >\n                  {flexRender(header.column.columnDef.header, header.getContext())}\n                  {index !== headerGroup.headers.length - 1 && <ColumnDelimiter header={header} resizable={true}/>}\n                </TableCell>\n              ))}\n            </TableRow>\n          ))}\n        </TableHead>\n        <TableBody>\n          {getRowModel().rows.map(row => (\n            <TableRow>\n              {row.getVisibleCells().map((cell) => (\n                <TableCell key={cell.column.id} data-testid={`Cell-${cell.column.id}`}>\n                  {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                </TableCell>\n              ))}\n            </TableRow>\n          ))}\n          {isLoading && <TableSkeleton/>}\n          <TableRow>\n            {hasNextPage && columns.map(cell =>\n              <TableCell ref={ref} key={cell.id}>\n                <Skeleton variant=\"text\"/>\n              </TableCell>,\n            )}\n          </TableRow>\n        </TableBody>\n      </Table>\n      {isEmpty(data) && !isLoading\n        ? (\n          <Placeholder\n            sx={{ width: 'inherit' }}\n            invisible={isLoading}\n            area={CONTENT_PLACEHOLDER_AREA}\n            message=\"No reports\"\n            testId=\"NoReportsPlaceholder\"\n          />\n        ) : null\n      }\n    </TableContainer>\n  )\n})\n\nconst DATE_COLUMN_ID = 'date'\nconst CREATED_BY_COLUMN_ID = 'created-by'\nconst STATUS_COLUMN_ID = 'status'\nconst TOTAL_NUMBER_OF_SERVICES_COLUMN_ID = 'total-number-of-services'\nconst NUMBER_OF_PROCESSED_SERVICES_COLUMN_ID = 'number-of-processed-services'\nconst ACTIONS_COLUMN_ID = 'actions'\n\nconst COLUMNS_MODELS: ColumnModel[] = [\n  { name: DATE_COLUMN_ID, width: 181 },\n  { name: CREATED_BY_COLUMN_ID, width: 415 },\n  { name: STATUS_COLUMN_ID, width: 169 },\n  { name: TOTAL_NUMBER_OF_SERVICES_COLUMN_ID, width: 195 },\n  { name: NUMBER_OF_PROCESSED_SERVICES_COLUMN_ID, width: 195 },\n  { name: ACTIONS_COLUMN_ID, width: 43 },\n]\n\nconst TableSkeleton: FC = memo(() => {\n  return createComponents(<RowSkeleton/>, DEFAULT_NUMBER_SKELETON_ROWS)\n})\n\nconst RowSkeleton: FC = memo(() => {\n  return (\n    <TableRow>\n      <TableCell>\n        <Skeleton variant=\"rectangular\" width={'70%'}/>\n      </TableCell>\n      <TableCell>\n        <Skeleton variant=\"rectangular\" width={'35%'}/>\n      </TableCell>\n      <TableCell>\n        <Skeleton variant=\"rectangular\" width={'50%'}/>\n      </TableCell>\n      <TableCell>\n        <Skeleton variant=\"rectangular\" width={'20%'}/>\n      </TableCell>\n      <TableCell>\n        <Skeleton variant=\"rectangular\" width={'20%'}/>\n      </TableCell>\n      <TableCell>\n        <Skeleton variant=\"rectangular\" width={'50%'}/>\n      </TableCell>\n    </TableRow>\n  )\n})\n\nexport type SecurityReport = {\n  processId: string\n  createdAt: string\n  createdBy: Principal\n  status: SecurityReportStatus\n  details?: string\n  servicesProcessed: number\n  servicesTotal: number\n}\n\nexport type SecurityReports = SecurityReport[]\n\nexport const RUNNING_SECURITY_REPORT_STATUS = 'running'\nexport const ERROR_SECURITY_REPORT_STATUS = 'error'\nexport const COMPLETE_SECURITY_REPORT_STATUS = 'complete'\n\nexport type SecurityReportStatus =\n  | typeof RUNNING_SECURITY_REPORT_STATUS\n  | typeof ERROR_SECURITY_REPORT_STATUS\n  | typeof COMPLETE_SECURITY_REPORT_STATUS\n\nexport const DOWNLOAD_REPORT = 'download-report'\nexport const DOWNLOAD_SOURCES = 'download-sources'\n\nexport type DownloadType = typeof DOWNLOAD_REPORT | typeof DOWNLOAD_SOURCES\n\ntype DownloadOptionsProps = {\n  options: ReportDownloadOption[]\n  onClick: (value: DownloadType) => void\n  sx?: SxProps\n  className?: string\n}\n\ntype DownloadButtonProps = {\n  processId: string\n  onDownloadReport: (processId: string, type?: DownloadType) => void\n  downloadOptions?: ReportDownloadOption[]\n}\n\nconst DownloadButton: FC<DownloadButtonProps> = memo<DownloadButtonProps>(({\n  processId,\n  onDownloadReport,\n  downloadOptions,\n}) => {\n  const onDownloadOption = useCallback(\n    (type: DownloadType) => onDownloadReport(processId, type),\n    [onDownloadReport, processId],\n  )\n\n  const onButtonCLick = useCallback(\n    () => onDownloadReport(processId),\n    [onDownloadReport, processId],\n  )\n\n  return downloadOptions\n    ? (<DownloadOptions\n      sx={{ visibility: 'hidden' }}\n      className=\"hoverable\"\n      options={downloadOptions}\n      onClick={onDownloadOption}\n    />)\n    : (<ButtonWithHint\n      area-label=\"edit\"\n      hint=\"Download report\"\n      size=\"small\"\n      sx={{ visibility: 'hidden', height: '20px' }}\n      className=\"hoverable\"\n      startIcon={<DownloadIcon color=\"#626D82\"/>}\n      onClick={onButtonCLick}\n      testId=\"DownloadReportButton\"\n    />)\n})\n\nconst DownloadOptions: FC<DownloadOptionsProps> = memo<DownloadOptionsProps>(({ options, onClick, sx, className }) => {\n  return (\n    <Tooltip title=\"Download\">\n      <Box sx={{ display: 'inline' }}>\n        <MenuButton\n          sx={sx}\n          icon={<DownloadIcon color=\"#626D82\"/>}\n          alignItems=\"center\"\n          className={className}\n          data-testid=\"DownloadMenuButton\"\n        >\n          {options.map(({ value, text }) => (\n            <MenuItem\n              key={`download-option-${value}`}\n              value={value}\n              onClick={() => onClick(value)}\n              data-testid={`Option-${value}`}\n            >\n              {text}\n            </MenuItem>\n          ))}\n        </MenuButton>\n      </Box>\n    </Tooltip>\n  )\n})\n","/**\n * Copyright 2024-2025 NetCracker Technology Corporation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { SecurityReports } from '../../components/SecurityReportsTable'\n\nexport const longNameTableData: SecurityReports = Array.from({ length: 30 }, (_, index) => ({\n  processId: `long-process-name-number-${index}`,\n  createdAt: '2021-09-01T12:00:00Z',\n  createdBy: {\n    type: 'user',\n    id: `id-${index + 1}`,\n    avatarUrl: 'https://via.placeholder.com/150',\n    name: `VeryVeryVeryVeryVeryVeryLongUserNameThatExceedsTheUsualLength ${index}`,\n  },\n  status: 'complete',\n  errorMessage: undefined,\n  servicesProcessed: 200000000 + index,\n  servicesTotal: 10000000 + index,\n}))\n\nexport const fullTableData: SecurityReports = Array.from({ length: 20 }, (_, index) => ({\n  processId: `process${index + Math.random() * 100}`,\n  createdAt: '2021-09-01T12:00:00Z',\n  createdBy: {\n    type: 'user',\n    id: `id-${index + Math.random() * 10}`,\n    avatarUrl: 'https://via.placeholder.com/150',\n    name: `User ${index + +Math.round(Math.random() * 100)}`,\n  },\n  status: index % 2 === 0 ? 'complete' : 'error',\n  errorMessage: index % 2 === 0 ? undefined : 'Error occurred',\n  servicesProcessed: index * 5,\n  servicesTotal: 500,\n}))\n"],"names":["SecurityReportsTable","memo","data","downloadOptions","downloadSecurityReport","fetchNextPage","isFetchingNextPage","hasNextPage","isLoading","containerWidth","setContainerWidth","useState","DEFAULT_CONTAINER_WIDTH","columnSizingInfo","setColumnSizingInfo","setHandlingColumnSizing","tableContainerRef","useRef","useResizeObserver","actualColumnSizing","useColumnsSizing","COLUMNS_MODELS","ref","useIntersectionObserver","columns","useMemo","DATE_COLUMN_ID","createdAt","jsx","FormattedDate","CREATED_BY_COLUMN_ID","createdBy","PrincipalView","STATUS_COLUMN_ID","status","details","jsxs","Box","Typography","RUNNING_SECURITY_REPORT_STATUS","Tooltip","InfoContextIcon","TOTAL_NUMBER_OF_SERVICES_COLUMN_ID","servicesTotal","TextWithOverflowTooltip","NUMBER_OF_PROCESSED_SERVICES_COLUMN_ID","servicesProcessed","ACTIONS_COLUMN_ID","processId","DownloadButton","getHeaderGroups","getRowModel","setColumnSizing","useReactTable","getCoreRowModel","getExpandedRowModel","useEffect","TableContainer","Table","TableHead","headerGroup","TableRow","header","index","TableCell","flexRender","ColumnDelimiter","TableBody","row","cell","TableSkeleton","Skeleton","isEmpty","Placeholder","CONTENT_PLACEHOLDER_AREA","createComponents","RowSkeleton","DEFAULT_NUMBER_SKELETON_ROWS","onDownloadReport","onDownloadOption","useCallback","type","onButtonCLick","DownloadOptions","ButtonWithHint","DownloadIcon","options","onClick","sx","className","MenuButton","value","text","MenuItem","longNameTableData","_","fullTableData"],"mappings":"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"}