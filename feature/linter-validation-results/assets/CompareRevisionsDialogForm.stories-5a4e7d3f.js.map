{"version":3,"file":"CompareRevisionsDialogForm.stories-5a4e7d3f.js","sources":["../../packages/shared/src/components/LatestRevisionMark.tsx","../../packages/shared/src/hooks/searchparams/useSearchParam.ts","../../packages/shared/src/hooks/searchparams/useSetSearchParams.ts","../../packages/shared/src/hooks/routes/package/usePackageSearchParam.ts","../../packages/shared/src/components/CompareRevisionsDialogForm.tsx","../../packages/shared/src/stories/samples/revisions-samples.ts"],"sourcesContent":["/**\n * Copyright 2024-2025 NetCracker Technology Corporation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { FC } from 'react'\nimport { memo } from 'react'\nimport { Typography } from '@mui/material'\n\nexport type LatestRevisionMarkProps = {\n  latest: boolean | undefined\n}\n\nexport const LatestRevisionMark: FC<LatestRevisionMarkProps> = memo<LatestRevisionMarkProps>(({ latest = false }) => {\n  return (\n    <Typography\n      variant=\"subtitle2\"\n      fontSize={13}\n    >\n      {`${latest ? ' (latest)' : ''}`}\n    </Typography>\n  )\n})\n","/**\n * Copyright 2024-2025 NetCracker Technology Corporation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useSearchParams } from 'react-router-dom'\n\n// This is an analog of `useSearchParam` from `react-use`, but it doesn't trigger a rerender if we return to the old URL\nexport function useSearchParam<T extends string>(param: string): T | undefined {\n  const [searchParams] = useSearchParams()\n  return searchParams.get(param) as T ?? undefined\n}\n","/**\n * Copyright 2024-2025 NetCracker Technology Corporation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useSearchParams } from 'react-router-dom'\nimport { useCallback } from 'react'\n\nexport function useSetSearchParams(): (\n  param: Record<string, string>,\n  navigateOptions?: {\n    replace?: boolean | undefined\n    state?: unknown\n  },\n) => void {\n  const [searchParams, setSearchParams] = useSearchParams()\n\n  return useCallback(\n    (param, navigateOptions): void => {\n      for (const key in param) {\n        param[key]\n          // TODO: Check do we need to `encodeURIComponent` for `param[key]`\n          ? searchParams.set(key, param[key])\n          : searchParams.delete(key)\n      }\n      setSearchParams(searchParams, navigateOptions)\n    },\n    [searchParams, setSearchParams],\n  )\n}\n\nexport type SearchParam = {\n  value: unknown\n  toStringValue?: (value: object | string | number) => string\n}\n","/**\n * Copyright 2024-2025 NetCracker Technology Corporation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { useMemo } from 'react'\nimport { useSearchParam } from '../../searchparams/useSearchParam'\nimport { useSetSearchParams } from '../../searchparams/useSetSearchParams'\nimport { PACKAGE_SEARCH_PARAM } from '../../../utils/search-params'\nimport type { Key } from '../../../utils/types'\n\nexport function usePackageSearchParam(): [Key | undefined, SetPackageSearchParam] {\n  const param = useSearchParam<Key>(PACKAGE_SEARCH_PARAM)\n  const setSearchParams = useSetSearchParams()\n\n  return useMemo(\n    () => [param, value => setSearchParams({ [PACKAGE_SEARCH_PARAM]: value ?? '' }, { replace: true })],\n    [param, setSearchParams],\n  )\n}\n\ntype SetPackageSearchParam = (value: Key | undefined) => void\n","/**\n * Copyright 2024-2025 NetCracker Technology Corporation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { FC } from 'react'\nimport * as React from 'react'\nimport { memo, useState } from 'react'\nimport {\n  Autocomplete,\n  Box,\n  Button,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  ListItem,\n  TextField,\n  Typography,\n} from '@mui/material'\nimport type { Control, UseFormSetValue } from 'react-hook-form'\nimport { Controller, useWatch } from 'react-hook-form'\nimport { LoadingButton } from '@mui/lab'\nimport { DialogForm } from './DialogForm'\nimport { CustomChip } from './CustomChip'\nimport { Swapper } from './Swapper'\nimport { LatestRevisionMark } from './LatestRevisionMark'\nimport type { Revision, Revisions } from '../entities/revisions'\nimport { REVISION_DELIMITER } from '../entities/versions'\nimport { WARNING_API_PROCESSOR_TEXT, WarningApiProcessorVersion } from './WarningApiProcessorVersion'\nimport { useParams } from 'react-router-dom'\nimport { usePackageSearchParam } from '../hooks/routes/package/usePackageSearchParam'\n\nexport type CompareRevisionsDialogFormData = {\n  originalRevision: Revision | null\n  changedRevision: Revision | null\n}\n\nexport type CompareRevisionsDialogData = {\n  control: Control<CompareRevisionsDialogFormData>\n  setValue: UseFormSetValue<CompareRevisionsDialogFormData>\n  originalRevisions: Revisions\n  changedRevisions: Revisions\n  isApiTypeFetching: boolean\n  onSubmit: () => void\n  onSwap: () => void\n  isRevisionsLoading: boolean | undefined\n}\n\nexport type CompareRevisionsDialogFormProps = CompareRevisionsDialogData & {\n  open: boolean\n  setOpen: (value: boolean) => void\n}\n\n// First Order Component //\nexport const CompareRevisionsDialogForm: FC<CompareRevisionsDialogFormProps> = memo(({\n  open,\n  setOpen,\n  setValue,\n  control,\n  onSubmit,\n  onSwap,\n  isApiTypeFetching,\n  originalRevisions,\n  changedRevisions,\n  isRevisionsLoading,\n}) => {\n  const { packageId: changedPackageKey } = useParams()\n  const [packageSearchParam] = usePackageSearchParam()\n  const originPackageKey = packageSearchParam ?? changedPackageKey\n  const [warningApiProcessorStatePrevious, setWarningApiProcessorStatePrevious] = useState(false)\n  const [warningApiProcessorStateCurrent, setWarningApiProcessorStateCurrent] = useState(false)\n  const previousRevision = useWatch({ control: control, name: 'originalRevision' })\n  const currentRevisions = useWatch({ control: control, name: 'changedRevision' })\n\n  return (\n    <DialogForm\n      open={open}\n      onClose={() => setOpen(false)}\n      onSubmit={onSubmit}\n      maxWidth=\"md\"\n    >\n      <DialogTitle>\n        Select Revisions To Compare\n      </DialogTitle>\n\n      <DialogContent sx={DIALOG_CONTENT_STYLES}>\n        <Typography\n          sx={{ gridArea: 'originalTitle' }}\n          variant=\"button\"\n        >\n          Previous\n        </Typography>\n\n        <Controller\n          name=\"originalRevision\"\n          control={control}\n          render={({ field: { value, onChange } }) => (\n            <RevisionAutocomplete\n              value={value}\n              onChange={(value) => {\n                if (!value) {\n                  setWarningApiProcessorStatePrevious(false)\n                }\n                onChange(value)\n              }}\n              controllerName=\"originalRevision\"\n              revisions={originalRevisions}\n              isLoading={isRevisionsLoading}\n              setValue={() => setValue('originalRevision', null)}\n              dataTestId=\"PreviousRevisionAutocomplete\"\n            />\n          )}\n        />\n\n        <Box sx={{ gridArea: 'swapper', alignSelf: 'center' }}>\n          <Swapper onSwap={onSwap}/>\n        </Box>\n\n        <Typography\n          sx={{ gridArea: 'changedTitle' }}\n          variant=\"button\"\n        >\n          Current\n        </Typography>\n\n        <Controller\n          name=\"changedRevision\"\n          control={control}\n          render={({ field: { value, onChange } }) => (\n            <RevisionAutocomplete\n              value={value}\n              onChange={(value) => {\n                if (!value) {\n                  setWarningApiProcessorStateCurrent(false)\n                }\n                onChange(value)\n              }}\n              controllerName=\"changedRevision\"\n              revisions={changedRevisions}\n              isLoading={isRevisionsLoading}\n              setValue={() => setValue('changedRevision', null)}\n              dataTestId=\"CurrentRevisionAutocomplete\"\n            />\n          )}\n        />\n      </DialogContent>\n      <Box sx={{ maxWidth: '692px', padding: '0 24px' }}>\n        <WarningApiProcessorVersion\n          versionKey={previousRevision?.version}\n          packageKey={originPackageKey}\n          type={WARNING_API_PROCESSOR_TEXT}\n          hidden={warningApiProcessorStateCurrent}\n          data-testid=\"WarningApiProcessorVersionPrevios\"\n          onWarningTextChange={(value) => setWarningApiProcessorStatePrevious(!!value)} />\n        <WarningApiProcessorVersion\n          data-testid=\"WarningApiProcessorVersionCurrent\"\n          versionKey={currentRevisions?.version}\n          packageKey={originPackageKey}\n          type={WARNING_API_PROCESSOR_TEXT}\n          onWarningTextChange={(value) => setWarningApiProcessorStateCurrent(!!value)} />\n      </Box>\n      <DialogActions>\n        <LoadingButton\n          variant=\"contained\"\n          type=\"submit\"\n          disabled={warningApiProcessorStatePrevious || warningApiProcessorStateCurrent}\n          loading={isApiTypeFetching}\n          data-testid=\"CompareButton\"\n        >\n          Compare\n        </LoadingButton>\n        <Button variant=\"outlined\" onClick={() => setOpen(false)} data-testid=\"CancelButton\">\n          Cancel\n        </Button>\n      </DialogActions>\n    </DialogForm>\n  )\n})\n\ntype RevisionAutocompleteProps = {\n  value: Revision | null\n  onChange: (value: Revision | null) => void\n  controllerName: string\n  revisions: Revisions\n  isLoading: boolean | undefined\n  setValue: () => void\n  dataTestId: string\n}\n\nconst RevisionAutocomplete: FC<RevisionAutocompleteProps> = memo<RevisionAutocompleteProps>(({\n  value,\n  onChange,\n  controllerName,\n  revisions,\n  isLoading,\n  setValue,\n  dataTestId,\n}) => {\n  return (\n    <Autocomplete\n      sx={{ gridArea: controllerName }}\n      value={value ?? null}\n      loading={isLoading}\n      options={isLoading ? [] : revisions}\n      getOptionLabel={(revision) => `${REVISION_DELIMITER}${revision.revision}`}\n      isOptionEqualToValue={(option, value) => option.revision === value.revision}\n      renderOption={(props, revision) => <AutocompleteOption revision={revision} props={props}/>}\n      renderInput={(params) => <TextField {...params} required label=\"Revision\"/>}\n      onChange={(_, value) => {\n        setValue()\n        onChange(value)\n      }}\n      data-testid={dataTestId}\n    />\n  )\n})\n\ntype AutocompleteOptionProps = {\n  revision: Revision\n  props: React.HTMLAttributes<HTMLLIElement>\n}\n\nconst AutocompleteOption: FC<AutocompleteOptionProps> = memo<AutocompleteOptionProps>(({ revision, props }) => {\n\n  return (\n    <ListItem\n      {...props}\n      key={revision.revision}\n    >\n      <Box width=\"100%\" display=\"flex\" justifyContent=\"space-between\">\n        <Box display=\"flex\" gap=\"4px\" alignItems=\"center\">\n          {`${REVISION_DELIMITER}${revision.revision}`}\n          <LatestRevisionMark latest={revision.latestRevision}/>\n        </Box>\n        <CustomChip value={revision.status}/>\n      </Box>\n    </ListItem>\n  )\n})\n\nconst DIALOG_CONTENT_STYLES = {\n  display: 'grid',\n  columnGap: 1,\n  gridTemplateRows: 'repeat(2, max-content)',\n  gridTemplateColumns: '300px max-content 300px',\n  gridTemplateAreas: `\n    'originalTitle      originalTitle   changedTitle'\n    'originalRevision   swapper         changedRevision'\n  `,\n}\n","/**\n * Copyright 2024-2025 NetCracker Technology Corporation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Revisions } from '../../entities/revisions'\nimport { DRAFT_VERSION_STATUS, RELEASE_VERSION_STATUS } from '../../entities/version-status'\nimport { USER } from '../../entities/principals'\n\nexport const revisions: Revisions = [\n  {\n    revision: 2,\n    version: '2.6@2',\n    latestRevision: false,\n    status: RELEASE_VERSION_STATUS,\n    createdBy: {\n      type: USER,\n      id: 'user1221',\n      name: 'Name Surname',\n      email: 'name.surname@example.com',\n      avatarUrl: 'string',\n    },\n    createdAt: '2023-10-06T14:33:44.550622Z',\n    revisionLabels: [\n      'my-cloud-label',\n    ],\n    publishMeta: {\n      commitKey: 'a5d45af7',\n      repositoryUrl: 'https://git.example.com/APIHUB/apihub-registry',\n      cloudName: 'my-cloud',\n      cloudUrl: 'https://cloud.example.com',\n      namespace: 'my-cloud-release2',\n    },\n  },\n  {\n    revision: 3,\n    version: '2.6@3',\n    latestRevision: true,\n    status: DRAFT_VERSION_STATUS,\n    createdBy: {\n      type: USER,\n      id: 'user1221',\n      name: 'Name Surname',\n      email: 'name.surname@example.com',\n      avatarUrl: 'string',\n    },\n    createdAt: '2023-10-05T14:33:44.550622Z',\n    revisionLabels: [\n      'my-cloud-label',\n    ],\n    publishMeta: {\n      commitKey: 'a5d45af7',\n      repositoryUrl: 'https://git.example.com/APIHUB/apihub-registry',\n      cloudName: 'my-cloud',\n      cloudUrl: 'https://cloud.example.com',\n      namespace: 'my-cloud-namespace',\n    },\n  },\n]\n"],"names":["LatestRevisionMark","memo","latest","jsx","Typography","useSearchParam","param","searchParams","useSearchParams","useSetSearchParams","setSearchParams","useCallback","navigateOptions","key","usePackageSearchParam","PACKAGE_SEARCH_PARAM","useMemo","value","CompareRevisionsDialogForm","open","setOpen","setValue","control","onSubmit","onSwap","isApiTypeFetching","originalRevisions","changedRevisions","isRevisionsLoading","changedPackageKey","useParams","packageSearchParam","originPackageKey","warningApiProcessorStatePrevious","setWarningApiProcessorStatePrevious","useState","warningApiProcessorStateCurrent","setWarningApiProcessorStateCurrent","previousRevision","useWatch","currentRevisions","jsxs","DialogForm","DialogTitle","DialogContent","DIALOG_CONTENT_STYLES","Controller","onChange","RevisionAutocomplete","value2","Box","Swapper","WarningApiProcessorVersion","WARNING_API_PROCESSOR_TEXT","DialogActions","LoadingButton","Button","controllerName","revisions","isLoading","dataTestId","Autocomplete","revision","REVISION_DELIMITER","option","props","AutocompleteOption","params","TextField","_","createElement","ListItem","CustomChip","RELEASE_VERSION_STATUS","USER","DRAFT_VERSION_STATUS"],"mappings":"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"}