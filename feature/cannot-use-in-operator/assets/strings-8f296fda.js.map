{"version":3,"file":"strings-8f296fda.js","sources":["../../packages/shared/src/utils/strings.ts"],"sourcesContent":["/**\n * Copyright 2024-2025 NetCracker Technology Corporation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Color } from './types'\n\nexport function interpolate(\n  inputValue: string,\n  params?: Record<string, string>,\n): string {\n  let interpolatedValue = inputValue\n\n  params && Object.entries(params).forEach(([key, value]) => {\n    interpolatedValue = interpolatedValue.replace(\n      new RegExp(`([\\\\w]+)*\\\\$${key}`),\n      value,\n    )\n  })\n\n  return interpolatedValue\n}\n\nexport function stringToColor(value: string): Color {\n  let hash = 0\n  let index\n\n  for (index = 0; index < value.length; index += 1) {\n    hash = value.charCodeAt(index) + ((hash << 5) - hash)\n  }\n\n  let color = '#'\n\n  for (index = 0; index < 3; index += 1) {\n    const value = (hash >> (index * 8)) & 0xff\n    color += `00${value.toString(16)}`.slice(-2)\n  }\n\n  return color\n}\n\nexport function toFormattedJsonString(value: object | string): string {\n  try {\n    return JSON.stringify(\n      typeof value === 'string' ? JSON.parse(value) : value,\n      undefined,\n      2,\n    )\n  } catch {\n    return typeof value === 'string' ? value : value.toString()\n  }\n}\n\nexport function toTitleCase(value: string): string {\n  return value.replace(\n    /\\w\\S*/g,\n    value => value.charAt(0).toUpperCase() + value.substring(1).toLowerCase(),\n  )\n}\n\nexport const transformStringValue = (value: string | undefined): string => {\n  if (!value) {\n    return 'â€”'\n  }\n  return value\n\n}\n\n/**\n * Sequentially replaces placeholders {} with the next substitution value\n * @param template e.g. aaaa/{}/bbbb/{}/cccc\n * @param substitutions e.g. value1, value2\n * @returns e.g. aaaa/value1/bbbb/value2/cccc\n */\nexport const format = (template: string, ...substitutions: string[]): string => {\n  for (const currentSubstitution of substitutions) {\n    template = template.replace('{}', currentSubstitution)\n  }\n  return template\n}\n\ntype Substitution = {\n  [key: string]: string\n}\n\n/**\n * Replaces named placeholders (e.g. {placeholderName}) by appropriate substitution value\n *\n * WARNING.\n * 1. If placeholder exists in template and doesn't exist in map - it won't be replaced.\n * 2. If placeholder doesn't exist in template and exists in map - it won't be used\n * 3. Placeholders names are case-sensitive.\n *\n * @param template e.g. aaaa/{first}/bbbb/{second}/cccc\n * @param substitutions e.g. { first: 'value1', second: 'value2' }\n * @returns e.g. aaaa/value1/bbbb/value2/cccc\n */\nexport const namedFormat = (template: string, substitutions: Substitution = {}): string => {\n  Object.keys(substitutions).forEach(key => {\n    substitutions[key] && (template = template.replace(`{${key}}`, substitutions[key]))\n  })\n\n  return template.replace(/{([\\s\\S]+?)}/, '')\n}\n\n/**\n * @returns e.g. one, two or three\n */\nexport function toFormattedEnumeration(list: string[]): string {\n  return new Intl.ListFormat('en', { type: 'disjunction' }).format(list)\n}\n"],"names":["stringToColor","value","hash","index","color","toFormattedJsonString","toFormattedEnumeration","list"],"mappings":"AAkCO,SAASA,EAAcC,EAAsB,CAClD,IAAIC,EAAO,EACPC,EAEJ,IAAKA,EAAQ,EAAGA,EAAQF,EAAM,OAAQE,GAAS,EAC7CD,EAAOD,EAAM,WAAWE,CAAK,IAAMD,GAAQ,GAAKA,GAGlD,IAAIE,EAAQ,IAEZ,IAAKD,EAAQ,EAAGA,EAAQ,EAAGA,GAAS,EAAG,CAC/BF,MAAAA,EAASC,GAASC,EAAQ,EAAM,IACtCC,GAAS,KAAKH,EAAM,SAAS,EAAE,CAAC,GAAG,MAAM,EAAE,CAC7C,CAEO,OAAAG,CACT,CAEO,SAASC,EAAsBJ,EAAgC,CAChE,GAAA,CACF,OAAO,KAAK,UACV,OAAOA,GAAU,SAAW,KAAK,MAAMA,CAAK,EAAIA,EAChD,OACA,CAAA,CACF,MACM,CACN,OAAO,OAAOA,GAAU,SAAWA,EAAQA,EAAM,SAAS,CAC5D,CACF,CAyDO,SAASK,EAAuBC,EAAwB,CACtD,OAAA,IAAI,KAAK,WAAW,KAAM,CAAE,KAAM,cAAe,EAAE,OAAOA,CAAI,CACvE"}