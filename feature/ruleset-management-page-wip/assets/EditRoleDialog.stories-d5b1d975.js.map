{"version":3,"file":"EditRoleDialog.stories-d5b1d975.js","sources":["../../packages/shared/src/components/EditRoleDialog.tsx"],"sourcesContent":["/**\n * Copyright 2024-2025 NetCracker Technology Corporation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { FC } from 'react'\nimport * as React from 'react'\nimport { memo, useCallback, useMemo } from 'react'\nimport {\n  Button,\n  Checkbox,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  FormControlLabel,\n  IconButton,\n  InputLabel,\n  TextField,\n} from '@mui/material'\nimport CloseOutlinedIcon from '@mui/icons-material/CloseOutlined'\nimport type { PopupProps } from './PopupDelegate'\nimport { PopupDelegate } from './PopupDelegate'\nimport type { Permission } from '../types/permissions'\nimport type { ControllerRenderProps } from 'react-hook-form'\nimport { Controller, useForm } from 'react-hook-form'\nimport { DialogForm } from './DialogForm'\nimport type { Role } from '../types/roles'\nimport { CheckboxCheckedIcon } from '../icons/CheckboxCheckedIcon'\nimport { CheckboxDisabledCheckedIcon } from '../icons/CheckboxDisabledCheckedIcon'\nimport ErrorOutlinedIcon from '@mui/icons-material/ErrorOutlined'\nimport { READ_PERMISSION } from '../entities/package-permissions'\n\nexport const EditRoleDialog: FC = memo(() => {\n  return (\n    <PopupDelegate\n      type={SHOW_EDIT_ROLE_DIALOG}\n      render={props => <EditRolePopup {...props}/>}\n    />\n  )\n})\n\nexport const SHOW_EDIT_ROLE_DIALOG = 'show-edit-role-dialog'\n\nexport type ShowEditRoleDetail = {\n  permissions: ReadonlyArray<Permission>\n  role?: Role\n  onConfirm: (role: Role) => void\n  isRoleUnique?: (roleName: string) => boolean\n}\n\nexport type EditRoleForm = Readonly<{\n  role: string\n  permissions: Permission[]\n}>\n\nexport const EditRolePopup: FC<PopupProps> = memo<PopupProps>(({ open, setOpen, detail }) => {\n  const [permissions, role, onConfirm, isRoleUnique] = useMemo(() => {\n    const { permissions, role, onConfirm, isRoleUnique } = detail as ShowEditRoleDetail\n    return [permissions, role, onConfirm, isRoleUnique]\n  }, [detail])\n\n  const { handleSubmit, control, formState: { errors, isDirty } } = useForm<EditRoleForm>({\n    defaultValues: {\n      permissions: permissions.filter(({ permission }) =>\n        role?.permissions.includes(permission) || permission === READ_PERMISSION,\n      ),\n      role: role?.role,\n    },\n  })\n\n  const onConfirmCallback = useCallback((value: EditRoleForm): void => {\n    setOpen(false)\n    onConfirm({\n      key: role?.key || '',\n      role: value.role,\n      permissions: value.permissions.map((p) => p.permission),\n    })\n  }, [onConfirm, role?.key, setOpen])\n\n  const onClose = useCallback(() => {\n    setOpen(false)\n  }, [setOpen])\n\n  const renderPermissions = useCallback(({ field: { value, onChange } }: {\n    field: ControllerRenderProps<EditRoleForm, 'permissions'>\n  }) => {\n    const onToggleCheckbox = (checked: boolean, permission: Permission): void => {\n      if (checked) {\n        return onChange([...value, permission])\n      }\n      onChange(value.filter((value) => value.permission !== permission.permission))\n    }\n    return <>\n      {permissions.map(\n        (permission) => <PermissionControl\n          key={permission.permission}\n          permission={permission}\n          onToggleCheckbox={onToggleCheckbox}\n          checked={value.some((existingValue) => existingValue.permission === permission.permission)}\n        />,\n      )}\n    </>\n  }, [permissions])\n\n  const confirmButtonName = role ? 'Update' : 'Create'\n  const dialogTitle = role ? 'Edit Role' : 'Create Role'\n\n  return (\n    <DialogForm\n      open={open}\n      onClose={onClose}\n      onSubmit={handleSubmit(onConfirmCallback)}\n      width=\"440px\"\n    >\n      <DialogTitle>\n        {dialogTitle}\n        <IconButton\n          sx={{ position: 'absolute', right: 8, top: 8, color: '#626D82' }}\n          onClick={onClose}\n        >\n          <CloseOutlinedIcon fontSize=\"small\"/>\n        </IconButton>\n      </DialogTitle>\n      <DialogContent sx={{\n        display: 'flex',\n        flexDirection: 'column',\n        width: 'auto',\n        minWidth: 'unset',\n      }}>\n        <Controller\n          name=\"role\"\n          rules={{\n            required: 'The field must be filled',\n            validate: role ? {} : {\n              alreadyExists: (role) => isRoleUnique?.(role) || 'Role already exists',\n            },\n          }}\n          control={control}\n          render={({ field }) => <TextField\n            {...field}\n            sx={{ mt: '4px', mb: '12px' }}\n            required\n            inputProps={{ required: false }} // disables \"please fill out this field\" prompt\n            value={field.value}\n            disabled={!!role}\n            label=\"Role Name\"\n            error={!!errors.role}\n            helperText={errors.role?.message}\n            InputProps={errors.role ? { endAdornment: <ErrorOutlinedIcon color=\"error\" data-testid=\"ErrorIcon\"/> } : {}}\n            data-testid=\"RoleNameTextField\"\n          />}\n        />\n        <InputLabel required sx={{ fontWeight: 500, color: '#000000' }}>Select permissions</InputLabel>\n        <Controller\n          name=\"permissions\"\n          control={control}\n          render={renderPermissions}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button\n          variant=\"contained\"\n          type=\"submit\"\n          disabled={role && !isDirty}\n          data-testid={`${confirmButtonName}Button`}\n        >\n          {confirmButtonName}\n        </Button>\n        <Button\n          variant=\"outlined\"\n          onClick={onClose}\n          data-testid=\"CancelButton\"\n        >\n          Cancel\n        </Button>\n      </DialogActions>\n    </DialogForm>\n  )\n})\n\nexport const PermissionControl: FC<{\n  permission: Permission\n  checked: boolean\n  onToggleCheckbox: (checked: boolean, permission: Permission) => void\n}> = memo(({ permission, checked, onToggleCheckbox }) => {\n  const { permission: permissionKey, name: permissionName } = permission\n  const disabled = permissionKey === READ_PERMISSION\n\n  function handleToggle(_: React.ChangeEvent<HTMLInputElement>, checked: boolean): void {\n    onToggleCheckbox(checked, permission)\n  }\n\n  return (\n    <FormControlLabel\n      key={permissionKey}\n      label={permissionName}\n      sx={{ mt: '6px' }}\n      control={\n        <Checkbox\n          value={permission}\n          disabled={disabled}\n          checked={checked}\n          onChange={handleToggle}\n          checkedIcon={disabled ? <CheckboxDisabledCheckedIcon/> : <CheckboxCheckedIcon/>}\n          data-testid={`${permission.permission}Checkbox`}\n        />\n      }\n    />\n  )\n})\n"],"names":["EditRoleDialog","memo","jsx","PopupDelegate","SHOW_EDIT_ROLE_DIALOG","props","EditRolePopup","open","setOpen","detail","permissions","role","onConfirm","isRoleUnique","useMemo","permissions2","role2","onConfirm2","isRoleUnique2","handleSubmit","control","errors","isDirty","useForm","permission","READ_PERMISSION","onConfirmCallback","useCallback","value","p","onClose","renderPermissions","onChange","onToggleCheckbox","checked","value2","Fragment","PermissionControl","existingValue","confirmButtonName","dialogTitle","jsxs","DialogForm","DialogTitle","IconButton","CloseOutlinedIcon","DialogContent","Controller","field","TextField","_a","ErrorOutlinedIcon","InputLabel","DialogActions","Button","permissionKey","permissionName","disabled","handleToggle","_","checked2","FormControlLabel","Checkbox","CheckboxDisabledCheckedIcon","CheckboxCheckedIcon"],"mappings":"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"}