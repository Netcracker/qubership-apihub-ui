{"version":3,"file":"FileTableUpload.stories-377492aa.js","sources":["../../packages/shared/src/components/FileTableUpload/border.svg","../../packages/shared/src/components/FileTableUpload/FileCellContent.tsx","../../packages/shared/src/components/CustomTableHeadCell.tsx","../../packages/shared/src/components/FileTableUpload/FileTable.tsx","../../packages/shared/src/components/FileTableUpload/FileTableUpload.tsx","../../packages/shared/src/components/SpecLogo.tsx"],"sourcesContent":["export default \"__VITE_ASSET__406e8cf4__\"","/**\n * Copyright 2024-2025 NetCracker Technology Corporation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { FC, ReactNode } from 'react'\nimport { memo, useMemo } from 'react'\nimport { Box, Button } from '@mui/material'\nimport { TextWithOverflowTooltip } from '../TextWithOverflowTooltip'\n\nexport const FileCellContent: FC<{\n  fileKey: string\n  file: File\n  getFileClickHandler: (file: File) => ((file: File) => void) | null\n  getFileLeftIcon: (file: File) => ReactNode\n  getFileRightIcon: (file: File) => ReactNode\n}> = memo(({\n  fileKey,\n  file,\n  getFileClickHandler,\n  getFileLeftIcon,\n  getFileRightIcon,\n}) => {\n  const onTitleClick = useMemo(() => getFileClickHandler(file), [file, getFileClickHandler])\n  const leftIcon = useMemo(() => getFileLeftIcon(file), [file, getFileLeftIcon])\n  const rightIcon = useMemo(() => getFileRightIcon(file), [file, getFileRightIcon])\n\n  function handleTitleClick(): void {\n    onTitleClick?.(file)\n  }\n\n  return (\n    <Box\n      key={fileKey}\n      sx={{\n        display: 'flex',\n        justifyContent: 'space-between',\n        overflow: 'hidden',\n      }}\n    >\n      <Box sx={{ display: 'flex' }}>\n        {leftIcon}\n        <Button\n          disabled={!onTitleClick}\n          onClick={handleTitleClick}\n          sx={{\n            p: 0,\n            height: '20px',\n            ml: '4px',\n            minWidth: 'fit-content',\n          }}\n          data-testid=\"FileTitleButton\"\n        >\n          <TextWithOverflowTooltip tooltipText={file.name} sx={{ color: onTitleClick ? '#0068FF' : '#000000' }}>\n            {file.name}\n          </TextWithOverflowTooltip>\n        </Button>\n        {rightIcon}\n      </Box>\n    </Box>\n  )\n})\n","/**\n * Copyright 2024-2025 NetCracker Technology Corporation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { FC } from 'react'\nimport { TextWithOverflowTooltip } from './TextWithOverflowTooltip'\n\nexport const CustomTableHeadCell: FC<{ title: string }> = ({ title }) => {\n  return (\n    <TextWithOverflowTooltip\n      tooltipText={title}\n      sx={{\n        fontSize: 'inherit',\n        color: 'inherit',\n      }}\n    >\n      {title}\n    </TextWithOverflowTooltip>\n  )\n}\n","/**\n * Copyright 2024-2025 NetCracker Technology Corporation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { FC, ReactNode } from 'react'\nimport { Fragment, memo, useEffect, useMemo, useRef, useState } from 'react'\nimport type { ColumnDef } from '@tanstack/table-core'\nimport type { ColumnSizingInfoState, ColumnSizingState, OnChangeFn, VisibilityState } from '@tanstack/react-table'\nimport { flexRender, getCoreRowModel, useReactTable } from '@tanstack/react-table'\nimport { Skeleton, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@mui/material'\nimport { ColumnDelimiter } from '../ColumnDelimiter'\nimport { FileCellContent } from './FileCellContent'\nimport { CustomTableHeadCell } from '../CustomTableHeadCell'\nimport type { FileLabelsRecord } from './FileTableUpload'\nimport { LabelsTableCell } from '../LabelsTableCell'\nimport { CONTENT_PLACEHOLDER_AREA, Placeholder } from '../Placeholder'\nimport type { ColumnModel } from '../../hooks/table-resizing/useColumnResizing'\nimport { DEFAULT_CONTAINER_WIDTH, useColumnsSizing } from '../../hooks/table-resizing/useColumnResizing'\nimport { useResizeObserver } from '../../hooks/common/useResizeObserver'\nimport { isNotEmptyRecord } from '../../utils/arrays'\nimport { DEFAULT_NUMBER_SKELETON_ROWS } from '../../utils/constants'\nimport { createComponents } from '../../utils/components'\n\nexport type FileTableData = {\n  file: File\n  fileKey: string\n  fileActions: ReactNode\n  labels: string[]\n}\n\nconst FILE_COLUMN_ID = 'file-column'\nconst LABELS_COLUMN_ID = 'labels-column'\nconst ACTIONS_COLUMN_ID = 'actions-column'\n\nconst COLUMNS_MODELS: ColumnModel[] = [\n  { name: FILE_COLUMN_ID, width: 300 },\n  { name: LABELS_COLUMN_ID },\n  { name: ACTIONS_COLUMN_ID, fixedWidth: 90 },\n]\n\nconst defaultMinWidth = COLUMNS_MODELS.reduce(\n  (sum, { width, fixedWidth }) => sum + (width || fixedWidth || 0), 0,\n)\n\nexport type FileTableProps = {\n  filesMap: FileLabelsRecord\n  showPlaceholder?: boolean\n  isLoading: boolean\n  getFileClickHandler: (file: File) => ((file: File) => void) | null\n  getFileActions: (file: File) => ReactNode\n  getFileLeftIcon: (file: File) => ReactNode\n  getFileRightIcon: (file: File) => ReactNode\n}\n\nexport const FileTable: FC<FileTableProps> = memo<FileTableProps>(props => {\n  const {\n    filesMap,\n    showPlaceholder = false,\n    isLoading,\n    getFileActions,\n    getFileLeftIcon,\n    getFileRightIcon,\n    getFileClickHandler,\n  } = props\n\n  const columns: ColumnDef<FileTableData>[] = useMemo(() => {\n    const result: ColumnDef<FileTableData>[] = [\n      {\n        id: FILE_COLUMN_ID,\n        header: () => <CustomTableHeadCell title=\"File\"/>,\n        cell: ({ row: { original: { file, fileKey } } }) => (\n          <FileCellContent\n            fileKey={fileKey}\n            file={file}\n            getFileClickHandler={getFileClickHandler}\n            getFileLeftIcon={getFileLeftIcon}\n            getFileRightIcon={getFileRightIcon}\n          />\n        ),\n      },\n      {\n        id: LABELS_COLUMN_ID,\n        header: () => <CustomTableHeadCell title=\"Labels\"/>,\n        cell: ({ row: { original: { labels } } }) => <LabelsTableCell labels={labels}/>,\n      },\n      {\n        id: ACTIONS_COLUMN_ID,\n        cell: ({ row: { original: { fileActions } } }) => fileActions,\n      },\n    ]\n\n    return result\n  }, [getFileClickHandler, getFileLeftIcon, getFileRightIcon])\n\n  const data: FileTableData[] = useMemo(() => (\n    Object.entries(filesMap).map(([key, { file, labels }], index) => ({\n      fileKey: `${index}-${key}`,\n      file: file,\n      fileActions: getFileActions(file),\n      labels: labels,\n    }))), [filesMap, getFileActions])\n\n  const [containerWidth, setContainerWidth] = useState(DEFAULT_CONTAINER_WIDTH)\n  const [columnSizingInfo, setColumnSizingInfo] = useState<ColumnSizingInfoState>()\n  const [, setHandlingColumnSizing] = useState<ColumnSizingState>()\n\n  const tableContainerRef = useRef<HTMLDivElement>(null)\n  useResizeObserver(tableContainerRef, setContainerWidth)\n\n  const actualColumnSizing = useColumnsSizing({\n    containerWidth: containerWidth,\n    columnModels: COLUMNS_MODELS,\n    columnSizingInfo: columnSizingInfo,\n    defaultMinColumnSize: 60,\n  })\n\n  const [columnVisibility, setColumnVisibility] = useState<VisibilityState>({})\n\n  const { getHeaderGroups, getRowModel, setColumnSizing } = useReactTable({\n    data: data,\n    columns: columns,\n    state: { columnVisibility },\n    onColumnVisibilityChange: setColumnVisibility,\n    getCoreRowModel: getCoreRowModel(),\n    columnResizeMode: 'onChange',\n    onColumnSizingChange: setHandlingColumnSizing as OnChangeFn<ColumnSizingState>,\n    onColumnSizingInfoChange: setColumnSizingInfo as OnChangeFn<ColumnSizingInfoState>,\n  })\n\n  useEffect(\n    () => setColumnSizing(actualColumnSizing),\n    [setColumnSizing, actualColumnSizing],\n  )\n\n  return (\n    <TableContainer ref={tableContainerRef} sx={{ overflowX: 'hidden', display: 'flex', flexDirection: 'column' }}>\n      <Table sx={{ minWidth: defaultMinWidth }}>\n        <TableHead>\n          {getHeaderGroups().map(headerGroup => (\n            <TableRow key={headerGroup.id}>\n              {headerGroup.headers.map((headerColumn, index) => (\n                <TableCell\n                  key={headerColumn.id}\n                  align=\"left\"\n                  width={actualColumnSizing ? actualColumnSizing[headerColumn.id] : headerColumn.getSize()}\n                  sx={{\n                    '&:hover': {\n                      borderRight: '2px solid rgba(224, 224, 224, 1)',\n                    },\n                  }}\n                >\n                  {flexRender(headerColumn.column.columnDef.header, headerColumn.getContext())}\n                  {index !== headerGroup.headers.length - 1 &&\n                    <ColumnDelimiter header={headerColumn} resizable={true}/>}\n                </TableCell>\n              ))}\n            </TableRow>\n          ))}\n        </TableHead>\n        <TableBody>\n          {getRowModel().rows.map((row) => (\n            <Fragment key={row.id}>\n              <TableRow>\n                {row.getVisibleCells().map((cell) => (\n                  <TableCell key={cell.id} data-testid={`Cell-${cell.column.id}`}>\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                  </TableCell>\n                ))}\n              </TableRow>\n            </Fragment>\n          ))}\n          {isLoading && <TableSkeleton/>}\n        </TableBody>\n      </Table>\n      {!isNotEmptyRecord(filesMap) && showPlaceholder && (\n        <Placeholder\n          sx={{ width: 'inherit', flexGrow: 1 }}\n          invisible={!showPlaceholder}\n          area={CONTENT_PLACEHOLDER_AREA}\n          message=\"No files\"\n        />\n      )}\n    </TableContainer>\n  )\n})\n\nconst TableSkeleton: FC = memo(() => {\n  return createComponents(<FileRowSkeleton/>, DEFAULT_NUMBER_SKELETON_ROWS)\n})\n\nconst FileRowSkeleton: FC = memo(() => {\n  return (\n    <TableRow>\n      <TableCell>\n        <Skeleton variant=\"rectangular\" width=\"80%\"/>\n      </TableCell>\n      <TableCell>\n        <Skeleton variant=\"rectangular\" width=\"80%\"/>\n      </TableCell>\n      <TableCell/>\n    </TableRow>\n  )\n})\n\n\n","/**\n * Copyright 2024-2025 NetCracker Technology Corporation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Box, Button, IconButton, Tooltip, Typography } from '@mui/material'\nimport type { ChangeEvent, DragEvent, FC, PropsWithChildren, ReactNode } from 'react'\nimport { memo, useCallback, useMemo, useState } from 'react'\nimport borderSvg from './border.svg'\nimport { ClockBackwardIcon } from '../../icons/ClockBackwardIcon'\nimport { InfoContextIcon } from '../../icons/InfoContextIcon'\nimport { CloudUploadIcon } from '../../icons/CloudUploadIcon'\nimport { transformFileListToFileArray } from '../../utils/files'\nimport { DeleteIcon } from '../../icons/DeleteIcon'\nimport { isNotEmptyRecord } from '../../utils/arrays'\nimport { FileTable } from './FileTable'\nimport { EditIcon } from '../../icons/EditIcon'\n\nexport type FileLabelsRecord = Record<string, { file: File; labels: string[] }>\n\nexport type FileTableUploadProps = PropsWithChildren<{\n  acceptableFileTypes?: string[]\n  uploadFilesMap: FileLabelsRecord\n  onAddFiles: (files: File[]) => void\n  getFileClickHandler: (file: File) => ((file: File) => void) | null\n  getFileLeftIcon: (files: File) => ReactNode\n  getFileRightIcon: (files: File) => ReactNode\n  getFileActions: (file: File) => ReactNode\n  showPlaceholder?: boolean\n  isLoading: boolean\n}>\n\nexport const FileTableUpload: FC<FileTableUploadProps> = memo<FileTableUploadProps>(({\n  acceptableFileTypes,\n  uploadFilesMap,\n  onAddFiles,\n  getFileClickHandler,\n  getFileLeftIcon,\n  getFileRightIcon,\n  getFileActions,\n  showPlaceholder,\n  isLoading,\n}) => {\n  const [isDragOver, setIsDragOver] = useState<boolean>(false)\n  const hasFiles = isNotEmptyRecord(uploadFilesMap)\n  const showTable = showPlaceholder || isLoading\n\n  const handleCommonDragEvent = (event: DragEvent<HTMLElement>): void => {\n    event.stopPropagation()\n    event.preventDefault()\n  }\n\n  const dragEvents = useMemo(\n    () => ({\n      onDragEnter: (event: DragEvent<HTMLElement>): void => {\n        handleCommonDragEvent(event)\n        setIsDragOver(true)\n      },\n      onDragLeave: (event: DragEvent<HTMLElement>): void => {\n        handleCommonDragEvent(event)\n        setIsDragOver(false)\n      },\n      onDragOver: (event: DragEvent<HTMLElement>): void => {\n        handleCommonDragEvent(event)\n      },\n      onDrop: (event: DragEvent<HTMLElement>): void => {\n        handleCommonDragEvent(event)\n        setIsDragOver(false)\n        const { dataTransfer: { files } } = event\n        onAddFiles(transformFileListToFileArray(files))\n      },\n    }),\n    [onAddFiles],\n  )\n\n  const onFileInputChange = useCallback(({ target: { files } }: ChangeEvent<HTMLInputElement>) => {\n    if (files !== null) {\n      onAddFiles(transformFileListToFileArray(files))\n    }\n  }, [onAddFiles])\n\n  const filesTable = useMemo(() => (\n      <>\n        {showTable && (\n          <FileTable\n            isLoading={isLoading}\n            showPlaceholder={showPlaceholder}\n            filesMap={uploadFilesMap}\n            getFileClickHandler={getFileClickHandler}\n            getFileActions={getFileActions}\n            getFileLeftIcon={getFileLeftIcon}\n            getFileRightIcon={getFileRightIcon}\n          />\n        )}\n      </>\n    ),\n    [showTable, isLoading, showPlaceholder, uploadFilesMap, getFileClickHandler, getFileActions, getFileLeftIcon, getFileRightIcon],\n  )\n\n  if (!isDragOver && showTable) {\n    return (\n      <Box\n        {...dragEvents}\n        sx={{\n          height: 1,\n        }}\n        children={filesTable}\n      />\n    )\n  }\n\n  return (\n    <Box\n      component=\"label\"\n      {...dragEvents}\n      htmlFor=\"file-upload\"\n      sx={{\n        position: 'relative',\n        cursor: 'pointer',\n        display: 'flex',\n        height: 1,\n      }}\n      data-testid=\"FileUpload\"\n    >\n      <Box\n        component=\"input\"\n        id=\"file-upload\"\n        multiple\n        type=\"file\"\n        accept={acceptableFileTypes?.toString()}\n        onChange={onFileInputChange}\n        sx={{ display: 'none' }}\n      />\n      <Box\n        sx={{\n          position: 'absolute',\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'center',\n          gap: '8px',\n          pointerEvents: 'none',\n          backgroundColor: 'rgba(242, 243, 245, 0.4)',\n          backgroundImage: `url(${borderSvg})`,\n          boxSizing: 'border-box',\n          borderRadius: '10px',\n          width: 1,\n          height: 1,\n        }}\n      >\n        <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: '14px' }}>\n          <CloudUploadIcon sx={{ fontSize: 56, color: '#626D82' }}/>\n          <Box sx={{ display: 'flex', gap: 0.5, width: 'fit-content', alignItems: 'center' }}>\n            <Typography variant=\"h2\" color=\"#626D82\">\n              {hasFiles ? 'Drop files here to attach' : 'Drop files here to attach or'}\n            </Typography>\n            {!hasFiles &&\n              <Button\n                sx={{ p: 0, lineHeight: '22px', fontSize: '15px', minWidth: 'fit-content' }}\n                data-testid=\"BrowseButton\"\n              >\n                browse\n              </Button>\n            }\n          </Box>\n        </Box>\n      </Box>\n      <Box sx={{ pointerEvents: 'none' }}>\n        {filesTable}\n      </Box>\n    </Box>\n  )\n})\n\nexport const FileActions: FC<{\n  file: File\n  onDeleteAction: (file: File) => void\n  onEditAction: (file: File) => void\n  onRestoreAction?: ((file: File) => void) | null\n}> = memo(({\n  file,\n  onDeleteAction,\n  onEditAction,\n  onRestoreAction,\n}) => {\n  const handleDelete = useCallback(() => {\n    onDeleteAction(file)\n  }, [onDeleteAction, file])\n\n  const handleEdit = useCallback(() => {\n    onEditAction(file)\n  }, [onEditAction, file])\n\n  const handleRestore = useCallback(() => {\n    onRestoreAction?.(file)\n  }, [onRestoreAction, file])\n\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        gap: '8px',\n        justifyContent: 'flex-end',\n      }}\n    >\n      {onRestoreAction && <Tooltip title=\"Restore previous file\">\n        <IconButton\n          size=\"small\"\n          sx={{ visibility: 'hidden', p: 0 }}\n          className=\"hoverable\"\n          onClick={handleRestore}\n          data-testid=\"RestoreButton\"\n        >\n          <ClockBackwardIcon sx={{ color: '#626D82', fontSize: 20 }}/>\n        </IconButton>\n      </Tooltip>}\n      <Tooltip title=\"Remove\">\n        <IconButton\n          sx={{ visibility: 'hidden', p: 0 }}\n          className=\"hoverable\"\n          onClick={handleDelete}\n          data-testid=\"RemoveButton\"\n        >\n          <DeleteIcon color=\"#626D82\"/>\n        </IconButton>\n      </Tooltip>\n      <Tooltip title=\"Edit\">\n        <IconButton\n          sx={{ visibility: 'hidden', p: 0 }}\n          className=\"hoverable\"\n          onClick={handleEdit}\n          data-testid=\"EditButton\"\n        >\n          <EditIcon color=\"#626D82\"/>\n        </IconButton>\n      </Tooltip>\n    </Box>\n  )\n})\n\nexport const FileInfoIcon: FC = memo(() => {\n  return <Tooltip\n    title={\n      <>\n        This file has replaced one with the same name.<br/>\n        You can restore previous file in place of the new one by clicking Restore icon.\n      </>\n    }\n    PopperProps={{\n      sx: { '.MuiTooltip-tooltip': { maxWidth: 'unset' } },\n    }}\n  >\n    <InfoContextIcon sx={{ ml: '6px' }}/>\n  </Tooltip>\n})\n","/**\n * Copyright 2024-2025 NetCracker Technology Corporation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { FC, ReactElement } from 'react'\nimport { memo } from 'react'\n\nimport type { SpecType } from '../utils/specs'\nimport {\n  isGraphQlSpecType,\n  isOpenApiSpecType,\n  JSON_SCHEMA_SPEC_TYPE,\n  MARKDOWN_SPEC_TYPE,\n  OPENAPI_2_0_SPEC_TYPE,\n  PROTOBUF_3_SPEC_TYPE,\n} from '../utils/specs'\nimport { FileIcon } from '../icons/FileIcon'\nimport { MarkdownIcon } from '../icons/MarkdownIcon'\nimport { SwaggerIcon } from '../icons/SwaggerIcon'\nimport { OpenapiIcon } from '../icons/OpenapiIcon'\nimport { JsonSchemaIcon } from '../icons/JsonSchemaIcon'\nimport { RestApiIcon } from '../icons/RestApiIcon'\nimport { GraphqlIcon } from '../icons/GraphqlIcon'\nimport type { ApiType } from '../entities/api-types'\nimport { API_TYPE_GRAPHQL, API_TYPE_REST } from '../entities/api-types'\nimport { ProtobufIcon } from '../icons/ProtobufIcon'\n\nexport type SpecLogoProps = {\n  value?: SpecType | ApiType | string\n}\n\n// todo fix usages value type to SpecType and change here\nexport const SpecLogo: FC<SpecLogoProps> = memo<SpecLogoProps>(({ value }) => {\n  if (!value) {\n    return (\n      <FileIcon/>\n    )\n  }\n\n  if (value === MARKDOWN_SPEC_TYPE) {\n    return (\n      <MarkdownIcon/>\n    )\n  }\n\n  if (value === PROTOBUF_3_SPEC_TYPE) {\n    return (\n      <ProtobufIcon/>\n    )\n  }\n\n  if (value === JSON_SCHEMA_SPEC_TYPE) {\n    return (\n      <JsonSchemaIcon/>\n    )\n  }\n\n  if (value === OPENAPI_2_0_SPEC_TYPE) {\n    return (\n      <SwaggerIcon/>\n    )\n  }\n\n  if (isOpenApiSpecType(value as SpecType)) {\n    return (\n      <OpenapiIcon/>\n    )\n  }\n\n  if (isGraphQlSpecType(value as SpecType)) {\n    return (\n      <GraphqlIcon/>\n    )\n  }\n\n  return API_TYPE_ICON_MAP[value as ApiType] ?? <FileIcon/>\n})\n\nconst API_TYPE_ICON_MAP: Record<ApiType, ReactElement | null> = {\n  [API_TYPE_REST]: <RestApiIcon/>,\n  [API_TYPE_GRAPHQL]: null,\n}\n"],"names":["borderSvg","FileCellContent","memo","fileKey","file","getFileClickHandler","getFileLeftIcon","getFileRightIcon","onTitleClick","useMemo","leftIcon","rightIcon","handleTitleClick","jsx","Box","jsxs","Button","TextWithOverflowTooltip","CustomTableHeadCell","title","FILE_COLUMN_ID","LABELS_COLUMN_ID","ACTIONS_COLUMN_ID","COLUMNS_MODELS","defaultMinWidth","sum","width","fixedWidth","FileTable","props","filesMap","showPlaceholder","isLoading","getFileActions","columns","labels","LabelsTableCell","fileActions","data","key","index","containerWidth","setContainerWidth","useState","DEFAULT_CONTAINER_WIDTH","columnSizingInfo","setColumnSizingInfo","setHandlingColumnSizing","tableContainerRef","useRef","useResizeObserver","actualColumnSizing","useColumnsSizing","columnVisibility","setColumnVisibility","getHeaderGroups","getRowModel","setColumnSizing","useReactTable","getCoreRowModel","useEffect","TableContainer","Table","TableHead","headerGroup","TableRow","headerColumn","TableCell","flexRender","ColumnDelimiter","TableBody","row","Fragment","cell","TableSkeleton","isNotEmptyRecord","Placeholder","CONTENT_PLACEHOLDER_AREA","createComponents","FileRowSkeleton","DEFAULT_NUMBER_SKELETON_ROWS","Skeleton","FileTableUpload","acceptableFileTypes","uploadFilesMap","onAddFiles","isDragOver","setIsDragOver","hasFiles","showTable","handleCommonDragEvent","event","dragEvents","files","transformFileListToFileArray","onFileInputChange","useCallback","filesTable","CloudUploadIcon","Typography","FileActions","onDeleteAction","onEditAction","onRestoreAction","handleDelete","handleEdit","handleRestore","Tooltip","IconButton","ClockBackwardIcon","DeleteIcon","EditIcon","FileInfoIcon","InfoContextIcon","SpecLogo","value","MARKDOWN_SPEC_TYPE","MarkdownIcon","PROTOBUF_3_SPEC_TYPE","ProtobufIcon","JSON_SCHEMA_SPEC_TYPE","JsonSchemaIcon","OPENAPI_2_0_SPEC_TYPE","SwaggerIcon","isOpenApiSpecType","OpenapiIcon","isGraphQlSpecType","GraphqlIcon","API_TYPE_ICON_MAP","FileIcon","API_TYPE_REST","RestApiIcon","API_TYPE_GRAPHQL"],"mappings":"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"}