{"version":3,"file":"Titles.stories-62f3ce45.js","sources":["../../packages/shared/src/components/ApiTypeSelector.tsx","../../packages/shared/src/components/Titles/PageTitle.tsx"],"sourcesContent":["/**\n * Copyright 2024-2025 NetCracker Technology Corporation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ChangeEvent, FC } from 'react'\nimport { memo } from 'react'\nimport type { SelectChangeEvent } from '@mui/material'\nimport { MenuItem, Select, TextField } from '@mui/material'\nimport type { ApiType } from '../entities/api-types'\nimport { API_TYPE_TITLE_MAP, API_TYPES } from '../entities/api-types'\n\nexport type ApiTypeSelectorProps = {\n  apiType: ApiType\n  standard?: boolean\n  onChange?: (value: ApiType) => void\n}\n\n// First Order Component //\nexport const ApiTypeSelector: FC<ApiTypeSelectorProps> = memo<ApiTypeSelectorProps>(\n  ({ standard = false, apiType, onChange }) => {\n    const handleChange = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement> | SelectChangeEvent): void => {\n      onChange?.(event.target.value as ApiType)\n    }\n\n    const options = API_TYPES.map((apiType) => (\n      <MenuItem value={apiType} data-testid={`MenuItem-${apiType}`}>\n        {API_TYPE_TITLE_MAP[apiType]}\n      </MenuItem>\n    ))\n\n    return standard ? (\n      <Select\n        sx={{ ml: 2, mt: 0.5 }}\n        variant=\"standard\"\n        disableUnderline\n        value={apiType}\n        onChange={handleChange}\n        data-testid=\"ApiTypeSelector\"\n      >\n        {options}\n      </Select>\n    ) : (\n      <TextField\n        sx={{ height: '32px', m: 0 }}\n        select\n        variant=\"filled\"\n        value={apiType}\n        hiddenLabel\n        onChange={handleChange}\n        data-testid=\"ApiTypeSelector\"\n      >\n        {options}\n      </TextField>\n    )\n  },\n)\n","/**\n * Copyright 2024-2025 NetCracker Technology Corporation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { FC, ReactNode } from 'react'\nimport * as React from 'react'\nimport { memo } from 'react'\nimport { Box, Typography } from '@mui/material'\nimport { ApiTypeSelector } from '../ApiTypeSelector'\nimport type { ApiType } from '../../entities/api-types'\n\nexport type PageTitleProps = {\n  title: string\n  titleComponent?: ReactNode\n  apiType?: ApiType\n  withApiSelector?: boolean\n  onApiTypeChange?: (value: ApiType) => void\n}\n\n// First Order Component //\nexport const PageTitle: FC<PageTitleProps> = memo<PageTitleProps>(\n  ({ title, titleComponent, apiType, withApiSelector = false, onApiTypeChange }) => {\n    return (\n      <Box display=\"flex\" width=\"100%\" alignItems=\"center\" flexGrow={1} gap={3} mr={3} height=\"32px\">\n        <Box display=\"flex\" alignItems=\"center\" gap={1}>\n          <Typography variant=\"body1\" fontSize={15} sx={{ fontWeight: 600 }}>\n            {title}\n          </Typography>\n          {titleComponent && (\n            <Box fontSize={15} fontWeight={600}>\n              {titleComponent}\n            </Box>\n          )}\n        </Box>\n\n        {withApiSelector && apiType && (\n          <Box>\n            <ApiTypeSelector apiType={apiType} onChange={onApiTypeChange} />\n          </Box>\n        )}\n      </Box>\n    )\n  },\n)\n"],"names":["ApiTypeSelector","memo","standard","apiType","onChange","handleChange","event","options","API_TYPES","apiType2","jsx","MenuItem","API_TYPE_TITLE_MAP","Select","TextField","PageTitle","title","titleComponent","withApiSelector","onApiTypeChange","jsxs","Box","Typography"],"mappings":"+qDA8BO,MAAAA,EAAAC,EAAA,KAAkD,CAAA,CAAA,SAAAC,EAAA,GAAA,QAAAC,EAAA,SAAAC,CAAA,IAAA,CAErD,MAAAC,EAAAC,GAAA,CACEF,GAAA,MAAAA,EAAAE,EAAA,OAAA,MAAwC,EAG1CC,EAAAC,EAAA,IAAAC,GAAAC,EAAAC,EAAA,CAAA,MAAAF,EAAA,cAAA,YAAAA,CAAA,GAAA,SAAAG,EAAAH,CAAA,CAAA,CAAA,CAAA,EAMA,OAAAP,EAAAQ,EACEG,EAAC,CAAA,GAAA,CAAA,GAAA,EAAA,GAAA,EAAA,EACsB,QAAA,WACb,iBAAA,GACQ,MAAAV,EACT,SAAAE,EACG,cAAA,kBACE,SAAAE,CAEX,CAAA,EAAAG,EAGHI,EAAC,CAAA,GAAA,CAAA,OAAA,OAAA,EAAA,CAAA,EAC4B,OAAA,GACrB,QAAA,SACE,MAAAX,EACD,YAAA,GACI,SAAAE,EACD,cAAA,kBACE,SAAAE,CAEX,CAAA,CACH,CAGN,wcCnCO,MAAAQ,EAAAd,EAAA,KAAsC,CAAA,CAAA,MAAAe,EAAA,eAAAC,EAAA,QAAAd,EAAA,gBAAAe,EAAA,GAAA,gBAAAC,KAEzCC,EAAAC,EAAA,CAAA,QAAA,OAAA,MAAA,OAAA,WAAA,SAAA,SAAA,EAAA,IAAA,EAAA,GAAA,EAAA,OAAA,OAAA,SAAA,CAEID,EAAAC,EAAA,CAAA,QAAA,OAAA,WAAA,SAAA,IAAA,EAAA,SAAA,CACEX,EAAAY,EAAA,CAAA,QAAA,QAAA,SAAA,GAAA,GAAA,CAAA,WAAA,GAAA,EAAA,SAAAN,CAAA,CAAA,EAEAC,GAAAP,EAAAW,EAAA,CAAA,SAAA,GAAA,WAAA,IAAA,SAAAJ,EAAA,CAIE,EAAA,EAEJC,GAAAf,GAAAO,EAAAW,EAAA,CAAA,SAAAX,EAAAV,EAAA,CAAA,QAAAG,EAAA,SAAAgB,CAAA,CAAA,CAAA,CAAA,CAKE,CAAA,CAAA,CAKV"}