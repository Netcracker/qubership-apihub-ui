{"version":3,"file":"versions-0bafc2da.js","sources":["../../packages/shared/src/utils/versions.ts"],"sourcesContent":["/**\n * Copyright 2024-2025 NetCracker Technology Corporation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Key } from './types'\nimport { API_V2, requestJson } from './requests'\nimport { generatePath } from 'react-router-dom'\nimport { getPackageRedirectDetails } from './redirects'\nimport type { PackageVersion, PackageVersions } from '../entities/versions'\n\nexport function getSplittedVersionKey(\n  version: Key | undefined,\n  latestRevision: boolean = true,\n): {\n  versionKey: Key\n  revisionKey: Key\n} {\n  if (!version) {\n    return { versionKey: '', revisionKey: '' }\n  }\n\n  const [versionKey, revisionKey] = version.split('@')\n  return {\n    versionKey: latestRevision ? versionKey : version,\n    revisionKey: revisionKey,\n  }\n}\n\nexport async function getFullVersion(\n  options: {\n    packageKey: Key | undefined\n    versionKey: Key | undefined\n    enabled?: boolean\n  },\n  signal?: AbortSignal,\n): Promise<VersionData> {\n  const { packageKey, versionKey, enabled = true } = options\n  const packageId = encodeURIComponent(packageKey ?? '')\n  const versionId = encodeURIComponent(versionKey ?? '')\n\n  let versionData = { version: '' }\n  if (enabled && packageKey && versionKey) {\n    const pathPattern = '/packages/:packageId/versions/:versionId'\n    const versionDataDto = await requestJson<VersionDataDto>(\n      generatePath(pathPattern, { packageId, versionId }),\n      { method: 'get' },\n      {\n        basePath: API_V2,\n        customRedirectHandler: (response) => getPackageRedirectDetails(response, pathPattern),\n      },\n      signal,\n    )\n    versionData = toVersionData(versionDataDto)\n  }\n\n  return versionData\n}\n\nexport function getVersionLabelsMap(versions: PackageVersions): Record<Key, string[]> {\n  return Object.fromEntries<string[]>(\n    versions.map(({ key, versionLabels }) => [getSplittedVersionKey(key).versionKey, versionLabels ?? []]),\n  )\n}\n\nexport function handleVersionsRevision(versions: ReadonlyArray<PackageVersion>): ReadonlyArray<PackageVersion> {\n  return versions.map(handleVersionRevision)\n}\n\nfunction handleVersionRevision(version: PackageVersion): PackageVersion {\n  const { key, latestRevision } = version\n  const { versionKey } = getSplittedVersionKey(key, latestRevision)\n  return {\n    ...version,\n    key: versionKey,\n  }\n}\n\ntype VersionDataDto = {\n  version: Key\n  notLatestRevision?: boolean\n}\n\ntype VersionData = {\n  version: Key\n  latestRevision?: boolean\n}\n\nfunction toVersionData(value: VersionDataDto): VersionData {\n  return {\n    version: value.version,\n    latestRevision: !value?.notLatestRevision,\n  }\n}\n"],"names":["getSplittedVersionKey","version","latestRevision","versionKey","revisionKey","handleVersionsRevision","versions","handleVersionRevision","key"],"mappings":"AAsBgB,SAAAA,EACdC,EACAC,EAA0B,GAI1B,CACA,GAAI,CAACD,EACH,MAAO,CAAE,WAAY,GAAI,YAAa,EAAG,EAG3C,KAAM,CAACE,EAAYC,CAAW,EAAIH,EAAQ,MAAM,GAAG,EAC5C,MAAA,CACL,WAAYC,EAAiBC,EAAaF,EAC1C,YAAAG,CAAA,CAEJ,CAsCO,SAASC,EAAuBC,EAAwE,CACtG,OAAAA,EAAS,IAAIC,CAAqB,CAC3C,CAEA,SAASA,EAAsBN,EAAyC,CAChE,KAAA,CAAE,IAAAO,EAAK,eAAAN,CAAmB,EAAAD,EAC1B,CAAE,WAAAE,CAAe,EAAAH,EAAsBQ,EAAKN,CAAc,EACzD,MAAA,CACL,GAAGD,EACH,IAAKE,CAAA,CAET"}