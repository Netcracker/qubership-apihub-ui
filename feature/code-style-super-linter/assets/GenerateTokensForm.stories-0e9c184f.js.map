{"version":3,"file":"GenerateTokensForm.stories-0e9c184f.js","sources":["../../packages/shared/src/components/GenerateTokenForm.tsx"],"sourcesContent":["/**\n * Copyright 2024-2025 NetCracker Technology Corporation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { FC } from 'react'\nimport * as React from 'react'\nimport { memo, useCallback, useState } from 'react'\nimport { Autocomplete, Box, capitalize, CircularProgress, ListItem, TextField, Typography } from '@mui/material'\nimport { Controller, useForm } from 'react-hook-form'\nimport { DisplayToken, type NotificationDetail } from './DisplayToken'\nimport { reverseTokenRoleMapping } from '../entities/tokens'\nimport type { GenerateApiKeyValue, TokenDataForm } from '../types/tokens'\nimport type { Key } from '../entities/keys'\nimport type { IsLoading } from '../utils/aliases'\nimport { ButtonWithHint } from './Buttons/ButtonWithHint'\nimport { UserAvatar } from './Users/UserAvatar'\nimport type { User } from '../types/user'\nimport { useDebounce } from 'react-use'\nimport { DEFAULT_DEBOUNCE } from '../utils/constants'\n\nexport type GenerateTokenFormProps = {\n  roles: string[]\n  users: User[] | undefined\n  defaultUser: User | undefined\n  disabled?: boolean\n  isLoading: IsLoading\n  generatedApiKey: Key\n  generateApiKey: (data: GenerateApiKeyValue) => void\n  setUserSearch: (search: string) => void\n  showSuccessNotification: (detail: NotificationDetail) => void\n}\n\n//First Order Component\nexport const GenerateTokenForm: FC<GenerateTokenFormProps> = memo(\n  ({\n    roles,\n    users,\n    defaultUser,\n    disabled = false,\n    isLoading,\n    generateApiKey,\n    generatedApiKey,\n    setUserSearch,\n    showSuccessNotification,\n  }) => {\n    const { handleSubmit, setValue, control, reset } = useForm<TokenDataForm>({\n      defaultValues: {\n        name: '',\n        createdFor: defaultUser ?? EMPTY_USER,\n      },\n    })\n\n    const [searchValue, setSearchValue] = useState('')\n\n    useDebounce(() => setUserSearch(searchValue), DEFAULT_DEBOUNCE, [searchValue])\n\n    const onConfirmCallback = useCallback(\n      (value: TokenDataForm): void => {\n        const { name, roles, createdFor } = value\n        const mappedRoles = roles?.map((role) => reverseTokenRoleMapping[role])\n\n        generateApiKey({ name: name, roles: mappedRoles, createdFor: createdFor.key })\n        reset()\n      },\n      [generateApiKey, reset],\n    )\n\n    if (generatedApiKey) {\n      return <DisplayToken generatedApiKey={generatedApiKey} showSuccessNotification={showSuccessNotification} />\n    }\n\n    return (\n      <Box component=\"form\" marginBottom={1} onSubmit={handleSubmit(onConfirmCallback)}>\n        <Typography variant=\"body2\">Enter the name of your application and select role for the token</Typography>\n        <Box display=\"flex\" alignItems=\"flex-start\" gap={2}>\n          <Controller\n            name=\"name\"\n            rules={{\n              required: 'The field must be filled',\n            }}\n            control={control}\n            render={({ field }) => (\n              <TextField\n                {...field}\n                required\n                disabled={disabled}\n                sx={{ width: '260px' }}\n                value={field.value}\n                label=\"Name\"\n                onChange={field.onChange}\n                data-testid=\"NameTextField\"\n              />\n            )}\n          />\n          <Controller\n            name=\"roles\"\n            control={control}\n            render={({ field: { value } }) => (\n              <Autocomplete<string, true>\n                multiple\n                disabled={disabled}\n                sx={{ width: '260px' }}\n                value={value ?? []}\n                options={roles}\n                renderOption={(props, option) => (\n                  <ListItem {...props} key={option} data-testid={`ListItem-${option}`}>\n                    {capitalize(option)}\n                  </ListItem>\n                )}\n                renderTags={(values) =>\n                  values.map((value, index) => (\n                    <Typography fontSize=\"13px\">\n                      {capitalize(value)} {index === values.length - 1 ? undefined : ', '}\n                    </Typography>\n                  ))\n                }\n                onChange={(_, roles) => setValue('roles', roles)}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    label=\"Roles\"\n                    inputProps={{\n                      ...params.inputProps,\n                      readOnly: true,\n                    }}\n                  />\n                )}\n                data-testid=\"RolesAutocomplete\"\n              />\n            )}\n          />\n          <Controller\n            name=\"createdFor\"\n            rules={{\n              required: 'The field must be filled',\n            }}\n            control={control}\n            render={({ field: { value, onChange } }) => (\n              <Autocomplete\n                isOptionEqualToValue={(option, value) => option.key === value.key}\n                value={value}\n                disabled={disabled}\n                sx={{ width: '260px' }}\n                loading={isLoading}\n                loadingText={<CircularProgress size={16} />}\n                options={users ?? []}\n                getOptionLabel={(option) => option.name}\n                onChange={(_, value) => onChange(value)}\n                renderOption={(props, { name, avatarUrl }) => {\n                  return (\n                    <ListItem {...props} key={name}>\n                      <Box sx={{ pr: '6px' }}>\n                        <UserAvatar name={name} src={avatarUrl} size=\"small\" />\n                      </Box>\n                      {name}\n                    </ListItem>\n                  )\n                }}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    required\n                    label=\"Created For\"\n                    onChange={(event) => setSearchValue(event?.target?.value ?? '')}\n                  />\n                )}\n                data-testid=\"CreatedForAutocomplete\"\n              />\n            )}\n          />\n          <ButtonWithHint\n            variant=\"contained\"\n            size=\"large\"\n            sx={{ mt: 1.2 }}\n            disabled={disabled}\n            disableHint={!disabled}\n            hint=\"You do not have permission to generate token\"\n            isLoading={isLoading}\n            title=\"Generate\"\n            type=\"submit\"\n            testId=\"GenerateButton\"\n          />\n        </Box>\n      </Box>\n    )\n  },\n)\n\nconst EMPTY_USER: User = {\n  key: '',\n  name: '',\n  avatarUrl: '',\n}\n"],"names":["GenerateTokenForm","memo","roles","users","defaultUser","disabled","isLoading","generateApiKey","generatedApiKey","setUserSearch","showSuccessNotification","handleSubmit","setValue","control","reset","useForm","EMPTY_USER","searchValue","setSearchValue","useState","useDebounce","DEFAULT_DEBOUNCE","onConfirmCallback","useCallback","value","name","roles2","createdFor","mappedRoles","role","reverseTokenRoleMapping","jsx","DisplayToken","jsxs","Box","Typography","Controller","field","TextField","Autocomplete","props","option","createElement","ListItem","capitalize","values","value2","index","_","params","onChange","CircularProgress","avatarUrl","UserAvatar","event","_a","ButtonWithHint"],"mappings":"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"}