{"version":3,"file":"CompareVersionsDialogForm.stories-207df5d0.js","sources":["../../packages/shared/src/components/Titles/VersionTitle.tsx","../../packages/shared/src/components/CompareVersionsDialogForm.tsx","../../packages/shared/src/stories/samples/package-version-samples.ts"],"sourcesContent":["/**\n * Copyright 2024-2025 NetCracker Technology Corporation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { FC } from 'react'\nimport { memo } from 'react'\nimport { Box, Tooltip, Typography } from '@mui/material'\nimport type { Key } from '../../entities/keys'\nimport { REVISION_DELIMITER } from '../../entities/versions'\n\nexport type VersionTitleProps = {\n  version: Key | undefined\n  revision: Key | undefined\n  latestRevision: boolean | undefined\n  showTooltip?: boolean\n  subtitleVariant?: boolean\n}\n\n// First Order Component //\nexport const VersionTitle: FC<VersionTitleProps> = memo<VersionTitleProps>(\n  ({ version, revision, latestRevision, showTooltip = true, subtitleVariant = false }) => {\n    const versionKeyElement = (\n      <Typography variant={subtitleVariant ? 'subtitle3' : 'inherit'} data-testid=\"VersionTitle\">\n        {version}\n      </Typography>\n    )\n\n    if (latestRevision) {\n      return <>{versionKeyElement}</>\n    }\n\n    return (\n      <Tooltip\n        title={showTooltip ? `You are viewing the old revision ${REVISION_DELIMITER}${revision} of the version` : ''}\n      >\n        <Box display=\"flex\">\n          {versionKeyElement}\n          {revision && <Typography variant=\"inherit\" color=\"#FB8A22\">{`${REVISION_DELIMITER}${revision}`}</Typography>}\n        </Box>\n      </Tooltip>\n    )\n  },\n)\n","/**\n * Copyright 2024-2025 NetCracker Technology Corporation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { FC, SyntheticEvent } from 'react'\nimport * as React from 'react'\nimport { memo, useState } from 'react'\nimport {\n  Autocomplete,\n  Box,\n  Button,\n  debounce,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  ListItem,\n  ListItemText,\n  TextField,\n  Typography,\n} from '@mui/material'\nimport type { Control, UseFormSetValue } from 'react-hook-form'\nimport { Controller } from 'react-hook-form'\nimport { LoadingButton } from '@mui/lab'\nimport { DialogForm } from './DialogForm'\nimport type { Package } from '../entities/packages'\nimport { DEFAULT_DEBOUNCE } from '../utils/constants'\nimport type { PackageVersion } from '../entities/versions'\nimport { disableAutocompleteSearch } from '../utils/mui'\nimport { getSplittedVersionKey } from '../utils/versions'\nimport { CustomChip } from './CustomChip'\nimport { VersionTitle } from './Titles/VersionTitle'\nimport { Swapper } from './Swapper'\n\n//todo need retest (without nested value)\nexport type CompareVersionsDialogFormData = {\n  originalWorkspace: Package | null\n  changedWorkspace: Package | null\n  originalPackage: Package | null\n  changedPackage: Package | null\n  originalVersion: PackageVersion | null\n  changedVersion: PackageVersion | null\n}\n\nexport type CompareVersionsDialogData = {\n  control: Control<CompareVersionsDialogFormData>\n  setValue: UseFormSetValue<CompareVersionsDialogFormData>\n  workspaces: ReadonlyArray<Package>\n  originalPackageOptions: ReadonlyArray<Package>\n  changedPackageOptions: ReadonlyArray<Package>\n  originalVersionOptions: ReadonlyArray<PackageVersion>\n  changedVersionOptions: ReadonlyArray<PackageVersion>\n  onSubmit: () => void\n  onSwap: () => void\n  isApiTypeFetching: boolean\n  isOriginalPackagesLoading: boolean\n  isChangedPackagesLoading: boolean\n  isOriginalPackageVersionsLoading: boolean\n  isChangedPackageVersionsLoading: boolean\n  isDefaultOriginalPackageLoading: boolean\n  isDashboard: boolean\n  arePackagesDifferent: boolean\n}\n\nexport type CompareVersionsDialogFormProps = CompareVersionsDialogData & {\n  open: boolean\n  setOpen: (value: boolean) => void\n  onOriginalPackageInputChange: (event: SyntheticEvent, value: string) => void\n  onChangedPackageInputChange: (event: SyntheticEvent, value: string) => void\n  onOriginalPackageVersionInputChange: (event: SyntheticEvent, value: string) => void\n  onChangedPackageVersionInputChange: (event: SyntheticEvent, value: string) => void\n}\n\n// First Order Component //\nexport const CompareVersionsDialogForm: FC<CompareVersionsDialogFormProps> = memo(\n  ({\n    open,\n    setOpen,\n    setValue,\n    control,\n    workspaces,\n    originalPackageOptions,\n    changedPackageOptions,\n    originalVersionOptions,\n    changedVersionOptions,\n    onSubmit,\n    onSwap,\n    isApiTypeFetching,\n    isOriginalPackagesLoading,\n    isChangedPackagesLoading,\n    isDashboard,\n    onOriginalPackageInputChange,\n    onChangedPackageInputChange,\n    onOriginalPackageVersionInputChange,\n    onChangedPackageVersionInputChange,\n    isOriginalPackageVersionsLoading,\n    isChangedPackageVersionsLoading,\n    isDefaultOriginalPackageLoading,\n    arePackagesDifferent,\n  }) => {\n    const [packageMode, setPackageMode] = useState(arePackagesDifferent)\n\n    const packageFieldLabel = isDashboard ? 'Dashboard' : 'Package'\n    const changeButtonLabel = isDashboard ? 'Change Dashboards' : 'Change Packages'\n\n    return (\n      <DialogForm open={open} onClose={() => setOpen(false)} onSubmit={onSubmit} maxWidth=\"md\">\n        <DialogTitle>Select Versions To Compare</DialogTitle>\n\n        <DialogContent sx={DIALOG_CONTENT_STYLES}>\n          <Typography sx={{ gridArea: 'originalTitle' }} variant=\"button\">\n            Previous\n          </Typography>\n\n          {packageMode && (\n            <>\n              <Controller\n                name=\"originalWorkspace\"\n                control={control}\n                render={({ field: { value, onChange } }) => (\n                  <Autocomplete\n                    sx={{ gridArea: 'originalWorkspace' }}\n                    value={value}\n                    options={workspaces}\n                    isOptionEqualToValue={(option, value) => option.key === value.key}\n                    getOptionLabel={({ name }: Package) => name}\n                    renderOption={(props, { key, name }) => (\n                      <ListItem {...props} key={key}>\n                        {name}\n                      </ListItem>\n                    )}\n                    renderInput={(params) => <TextField {...params} required label=\"Workspace\" />}\n                    onChange={(_, value) => {\n                      setValue('originalPackage', null)\n                      setValue('originalVersion', null)\n                      onChange(value)\n                    }}\n                    data-testid=\"PreviousWorkspaceAutocomplete\"\n                  />\n                )}\n              />\n              <Controller\n                name=\"originalPackage\"\n                control={control}\n                render={({ field: { value, onChange } }) => (\n                  <Autocomplete\n                    autoSelect\n                    filterOptions={disableAutocompleteSearch}\n                    onInputChange={debounce(onOriginalPackageInputChange, DEFAULT_DEBOUNCE)}\n                    sx={{ gridArea: 'originalPackage' }}\n                    value={value}\n                    loading={isOriginalPackagesLoading}\n                    options={originalPackageOptions}\n                    getOptionLabel={({ name }: Package) => name}\n                    renderOption={(props, { key, name }) => (\n                      <ListItem {...props} key={key}>\n                        {name}\n                      </ListItem>\n                    )}\n                    renderInput={(params) => <TextField {...params} required label={packageFieldLabel} />}\n                    onChange={(_, value) => {\n                      setValue('originalVersion', null)\n                      onChange(value)\n                    }}\n                    data-testid=\"PreviousPackageAutocomplete\"\n                  />\n                )}\n              />\n            </>\n          )}\n\n          <Controller\n            name=\"originalVersion\"\n            control={control}\n            render={({ field: { value, onChange } }) => {\n              const { versionKey } = getSplittedVersionKey(value?.key, value?.latestRevision)\n              return (\n                <Autocomplete\n                  filterOptions={disableAutocompleteSearch}\n                  onInputChange={debounce(onOriginalPackageVersionInputChange, DEFAULT_DEBOUNCE)}\n                  sx={{ gridArea: 'originalVersion' }}\n                  value={value ? { ...value, key: value.latestRevision ? versionKey : value.key } : null}\n                  loading={isOriginalPackageVersionsLoading}\n                  options={originalVersionOptions}\n                  isOptionEqualToValue={(option, value) => option.key === value.key}\n                  getOptionLabel={({ key }: PackageVersion) => key}\n                  renderOption={(props, { key, status, latestRevision }) => {\n                    const { versionKey, revisionKey } = getSplittedVersionKey(key)\n                    return (\n                      <ListItem {...props} key={key}>\n                        <ListItemText>\n                          <VersionTitle\n                            version={versionKey}\n                            revision={revisionKey}\n                            latestRevision={latestRevision}\n                            showTooltip={false}\n                          />\n                        </ListItemText>\n                        <CustomChip value={status} />\n                      </ListItem>\n                    )\n                  }}\n                  renderInput={(params) => <TextField {...params} required label=\"Version\" />}\n                  onChange={(_, value) => onChange(value)}\n                  data-testid=\"PreviousVersionAutocomplete\"\n                />\n              )\n            }}\n          />\n\n          <Box sx={{ gridArea: 'swapper', alignSelf: 'center' }}>\n            <Swapper onSwap={onSwap} />\n          </Box>\n\n          <Typography sx={{ gridArea: 'changedTitle' }} variant=\"button\">\n            Current\n          </Typography>\n\n          {packageMode && (\n            <>\n              <Controller\n                name=\"changedWorkspace\"\n                control={control}\n                render={({ field: { value, onChange } }) => (\n                  <Autocomplete\n                    sx={{ gridArea: 'changedWorkspace' }}\n                    value={value}\n                    options={workspaces}\n                    isOptionEqualToValue={(option, value) => option.key === value.key}\n                    getOptionLabel={({ name }: Package) => name}\n                    renderOption={(props, { key, name }) => (\n                      <ListItem {...props} key={key}>\n                        {name}\n                      </ListItem>\n                    )}\n                    renderInput={(params) => <TextField {...params} required label=\"Workspace\" />}\n                    onChange={(_, value) => {\n                      setValue('changedPackage', null)\n                      setValue('changedVersion', null)\n                      onChange(value)\n                    }}\n                    data-testid=\"CurrentWorkspaceAutocomplete\"\n                  />\n                )}\n              />\n              <Controller\n                name=\"changedPackage\"\n                control={control}\n                render={({ field: { value, onChange } }) => (\n                  <Autocomplete\n                    autoSelect\n                    filterOptions={disableAutocompleteSearch}\n                    onInputChange={debounce(onChangedPackageInputChange, DEFAULT_DEBOUNCE)}\n                    sx={{ gridArea: 'changedPackage' }}\n                    value={value}\n                    loading={isChangedPackagesLoading}\n                    options={changedPackageOptions}\n                    getOptionLabel={({ name }: Package) => name}\n                    renderOption={(props, { key, name }) => (\n                      <ListItem {...props} key={key}>\n                        {name}\n                      </ListItem>\n                    )}\n                    renderInput={(params) => <TextField {...params} required label={packageFieldLabel} />}\n                    onChange={(_, value) => {\n                      setValue('changedVersion', null)\n                      onChange(value)\n                    }}\n                    data-testid=\"CurrentPackageAutocomplete\"\n                  />\n                )}\n              />\n            </>\n          )}\n\n          <Controller\n            name=\"changedVersion\"\n            control={control}\n            render={({ field: { value, onChange } }) => {\n              const { versionKey } = getSplittedVersionKey(value?.key, value?.latestRevision)\n              return (\n                <Autocomplete\n                  filterOptions={disableAutocompleteSearch}\n                  onInputChange={debounce(onChangedPackageVersionInputChange, DEFAULT_DEBOUNCE)}\n                  sx={{ gridArea: 'changedVersion' }}\n                  value={value ? { ...value, key: value.latestRevision ? versionKey : value.key } : null}\n                  loading={isChangedPackageVersionsLoading}\n                  options={changedVersionOptions}\n                  isOptionEqualToValue={(option, value) => option.key === value.key}\n                  getOptionLabel={({ key }: PackageVersion) => key}\n                  renderOption={(props, { key, status, latestRevision }) => {\n                    const { versionKey, revisionKey } = getSplittedVersionKey(key)\n                    return (\n                      <ListItem {...props} key={key}>\n                        <ListItemText>\n                          <VersionTitle\n                            version={versionKey}\n                            revision={revisionKey}\n                            latestRevision={latestRevision}\n                            showTooltip={false}\n                          />\n                        </ListItemText>\n                        <CustomChip value={status} />\n                      </ListItem>\n                    )\n                  }}\n                  renderInput={(params) => <TextField {...params} required label=\"Version\" />}\n                  onChange={(_, value) => onChange(value)}\n                  data-testid=\"CurrentVersionAutocomplete\"\n                />\n              )\n            }}\n          />\n        </DialogContent>\n        <DialogActions>\n          <LoadingButton variant=\"contained\" type=\"submit\" loading={isApiTypeFetching} data-testid=\"CompareButton\">\n            Compare\n          </LoadingButton>\n          <Button variant=\"outlined\" onClick={() => setOpen(false)} data-testid=\"CancelButton\">\n            Cancel\n          </Button>\n          <Box sx={{ marginLeft: 'auto' }}>\n            <LoadingButton\n              variant=\"outlined\"\n              onClick={() => setPackageMode(!packageMode)}\n              disabled={packageMode}\n              loading={isDefaultOriginalPackageLoading}\n              data-testid=\"ChangePackagesButton\"\n            >\n              {changeButtonLabel}\n            </LoadingButton>\n          </Box>\n        </DialogActions>\n      </DialogForm>\n    )\n  },\n)\n\nconst DIALOG_CONTENT_STYLES = {\n  display: 'grid',\n  columnGap: 1,\n  gridTemplateRows: 'repeat(3, max-content)',\n  gridTemplateColumns: '300px max-content 300px',\n  gridTemplateAreas: `\n    'originalTitle     originalTitle   changedTitle'\n    'originalWorkspace   swapper       changedWorkspace'\n    'originalPackage   swapper         changedPackage'\n    'originalVersion   swapper         changedVersion'\n  `,\n}\n","/**\n * Copyright 2024-2025 NetCracker Technology Corporation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { PackageVersion } from '../../entities/versions'\n\nexport const packageVersion: PackageVersion = {\n  createdAt: 'Fri Oct 06 2023',\n  createdBy: {\n    name: 'John Williams',\n    type: 'user',\n    id: 'JW_1234',\n  },\n  status: 'draft',\n  previousVersion: '2023.1@3',\n  versionLabels: ['apihub/x-api-kind: no-BWC'],\n  key: '2023.1@3',\n  latestRevision: true,\n}\n"],"names":["VersionTitle","memo","version","revision","latestRevision","showTooltip","subtitleVariant","versionKeyElement","jsx","Typography","Fragment","Tooltip","REVISION_DELIMITER","jsxs","Box","CompareVersionsDialogForm","open","setOpen","setValue","control","workspaces","originalPackageOptions","changedPackageOptions","originalVersionOptions","changedVersionOptions","onSubmit","onSwap","isApiTypeFetching","isOriginalPackagesLoading","isChangedPackagesLoading","isDashboard","onOriginalPackageInputChange","onChangedPackageInputChange","onOriginalPackageVersionInputChange","onChangedPackageVersionInputChange","isOriginalPackageVersionsLoading","isChangedPackageVersionsLoading","isDefaultOriginalPackageLoading","arePackagesDifferent","packageMode","setPackageMode","useState","packageFieldLabel","DialogForm","DialogTitle","DialogContent","DIALOG_CONTENT_STYLES","Controller","value","onChange","Autocomplete","option","value2","name","props","key","createElement","ListItem","params","TextField","_","disableAutocompleteSearch","debounce","DEFAULT_DEBOUNCE","versionKey","getSplittedVersionKey","status","versionKey2","revisionKey","ListItemText","CustomChip","Swapper","DialogActions","LoadingButton","Button","packageVersion"],"mappings":"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"}