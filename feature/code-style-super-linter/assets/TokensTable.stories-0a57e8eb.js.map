{"version":3,"file":"TokensTable.stories-0a57e8eb.js","sources":["../../packages/shared/src/components/TokensTable.tsx","../../packages/shared/src/stories/samples/tokens-samples.ts"],"sourcesContent":["/**\n * Copyright 2024-2025 NetCracker Technology Corporation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { FC } from 'react'\nimport { memo, useEffect, useMemo, useRef, useState } from 'react'\nimport type { ColumnDef } from '@tanstack/table-core'\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography } from '@mui/material'\nimport type { ColumnSizingInfoState, ColumnSizingState, OnChangeFn } from '@tanstack/react-table'\nimport { flexRender, getCoreRowModel, getExpandedRowModel, useReactTable } from '@tanstack/react-table'\nimport { TextWithOverflowTooltip } from './TextWithOverflowTooltip'\n\nimport { CONTENT_PLACEHOLDER_AREA, Placeholder } from './Placeholder'\n\nimport { TableCellSkeleton } from './TableCellSkeleton'\nimport type { DeleteApiKey, SystemToken, Tokens } from '../types/tokens'\nimport type { IsLoading } from '../utils/aliases'\nimport type { ColumnModel } from '../hooks/table-resizing/useColumnResizing'\nimport { DEFAULT_CONTAINER_WIDTH, useColumnsSizing } from '../hooks/table-resizing/useColumnResizing'\nimport { tokenRoleMapping } from '../entities/tokens'\nimport { UserView } from './Users/UserView'\nimport { ButtonWithHint } from './Buttons/ButtonWithHint'\nimport { DeleteIcon } from '../icons/DeleteIcon'\nimport { isEmpty } from '../utils/arrays'\nimport { createComponents } from '../utils/components'\nimport { DEFAULT_NUMBER_SKELETON_ROWS } from '../utils/constants'\nimport { useResizeObserver } from '../hooks/common/useResizeObserver'\nimport { FormattedDate } from './FormattedDate'\n\nexport type TokensTableTableProps = {\n  data: Tokens\n  deleteApiKey: DeleteApiKey\n  isLoading: IsLoading\n  disableDelete?: boolean\n}\n\n// First Order Component //\nexport const TokensTable: FC<TokensTableTableProps> = memo(\n  ({ data, isLoading, deleteApiKey, disableDelete = false }) => {\n    const [containerWidth, setContainerWidth] = useState(DEFAULT_CONTAINER_WIDTH)\n    const [columnSizingInfo, setColumnSizingInfo] = useState<ColumnSizingInfoState>()\n    const [, setHandlingColumnSizing] = useState<ColumnSizingState>()\n\n    const tableContainerRef = useRef<HTMLDivElement>(null)\n    useResizeObserver(tableContainerRef, setContainerWidth)\n\n    const actualColumnSizing = useColumnsSizing({\n      containerWidth: containerWidth,\n      columnModels: COLUMNS_MODELS,\n      columnSizingInfo: columnSizingInfo,\n      defaultMinColumnSize: 45,\n    })\n\n    const columns: ColumnDef<SystemToken>[] = useMemo(() => {\n      return [\n        {\n          id: NAME_COLUMN_ID,\n          header: 'Name',\n          cell: ({\n            row: {\n              original: { name },\n            },\n          }) => (\n            <TextWithOverflowTooltip tooltipText={name}>\n              <Typography variant=\"inherit\">{name}</Typography>\n            </TextWithOverflowTooltip>\n          ),\n        },\n        {\n          id: ROLES_COLUMN_ID,\n          header: 'Roles',\n          cell: ({\n            row: {\n              original: { roles },\n            },\n          }) => (\n            <TextWithOverflowTooltip tooltipText={roles.map((role) => tokenRoleMapping[role]).join(', ')}>\n              <Typography variant=\"inherit\">{roles.map((role) => tokenRoleMapping[role]).join(', ')}</Typography>\n            </TextWithOverflowTooltip>\n          ),\n        },\n        {\n          id: CREATED_AT_COLUMN_ID,\n          header: 'Created At',\n          cell: ({\n            row: {\n              original: { createdAt },\n            },\n          }) => <FormattedDate value={createdAt} />,\n        },\n        {\n          id: CREATED_BY_COLUMN_ID,\n          header: 'Created By',\n          cell: ({\n            row: {\n              original: { createdBy },\n            },\n          }) => {\n            return <UserView name={createdBy.name} avatarUrl={createdBy.avatarUrl} />\n          },\n        },\n        {\n          id: CREATED_FOR_COLUMN_ID,\n          header: 'Created For',\n          cell: ({\n            row: {\n              original: { createdFor },\n            },\n          }) => {\n            return <UserView name={createdFor.name} avatarUrl={createdFor.avatarUrl} />\n          },\n        },\n        {\n          id: DELETE_COLUMN_ID,\n          header: '',\n          cell: ({\n            row: {\n              original: { key, packageKey },\n            },\n          }) => (\n            <ButtonWithHint\n              area-label=\"delete\"\n              disabled={disableDelete}\n              disableHint={false}\n              hint={disableDelete ? 'You do not have permission to generate token' : 'Delete'}\n              size=\"small\"\n              sx={{ visibility: 'hidden', height: '20px' }}\n              className=\"hoverable\"\n              startIcon={<DeleteIcon color={'#626D82'} />}\n              onClick={() =>\n                deleteApiKey({\n                  key: key,\n                  packageKey: packageKey,\n                })\n              }\n              testId=\"DeleteButton\"\n            />\n          ),\n        },\n      ]\n    }, [deleteApiKey, disableDelete])\n\n    const { getHeaderGroups, getRowModel, setColumnSizing } = useReactTable({\n      data: data,\n      columns: columns,\n      columnResizeMode: 'onChange',\n      getCoreRowModel: getCoreRowModel(),\n      getExpandedRowModel: getExpandedRowModel(),\n      onColumnSizingChange: setHandlingColumnSizing as OnChangeFn<ColumnSizingState>,\n      onColumnSizingInfoChange: setColumnSizingInfo as OnChangeFn<ColumnSizingInfoState>,\n    })\n\n    useEffect(() => setColumnSizing(actualColumnSizing), [setColumnSizing, actualColumnSizing])\n\n    return (\n      <TableContainer sx={{ mt: 1 }} ref={tableContainerRef}>\n        <Table>\n          <TableHead>\n            {getHeaderGroups().map((headerGroup) => (\n              <TableRow key={headerGroup.id}>\n                {headerGroup.headers.map((header) => (\n                  <TableCell\n                    key={header.id}\n                    align=\"left\"\n                    width={actualColumnSizing ? actualColumnSizing[header.id] : header.getSize()}\n                  >\n                    {flexRender(header.column.columnDef.header, header.getContext())}\n                  </TableCell>\n                ))}\n              </TableRow>\n            ))}\n          </TableHead>\n          <TableBody>\n            {getRowModel().rows.map((row) => (\n              <TableRow>\n                {row.getVisibleCells().map((cell) => (\n                  <TableCell key={cell.column.id} data-testid={`Cell-${cell.column.id}`}>\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                  </TableCell>\n                ))}\n              </TableRow>\n            ))}\n            {isLoading && <TableSkeleton />}\n          </TableBody>\n        </Table>\n        {isEmpty(data) && !isLoading ? (\n          <Placeholder\n            sx={{ width: 'inherit' }}\n            invisible={isLoading}\n            area={CONTENT_PLACEHOLDER_AREA}\n            message=\"No Tokens\"\n          />\n        ) : null}\n      </TableContainer>\n    )\n  },\n)\n\nconst TableSkeleton: FC = memo(() => {\n  return createComponents(<RowSkeleton />, DEFAULT_NUMBER_SKELETON_ROWS)\n})\n\nconst RowSkeleton: FC = memo(() => {\n  return (\n    <TableRow>\n      <TableCellSkeleton />\n      <TableCellSkeleton />\n      <TableCellSkeleton />\n      <TableCellSkeleton />\n      <TableCellSkeleton />\n      <TableCellSkeleton />\n    </TableRow>\n  )\n})\n\nconst NAME_COLUMN_ID = 'name'\nconst ROLES_COLUMN_ID = 'roles'\nconst CREATED_AT_COLUMN_ID = 'created-at'\nconst CREATED_BY_COLUMN_ID = 'created-by'\nconst CREATED_FOR_COLUMN_ID = 'created-for'\nconst DELETE_COLUMN_ID = 'delete'\n\nconst COLUMNS_MODELS: ColumnModel[] = [\n  { name: NAME_COLUMN_ID, width: 300 },\n  { name: ROLES_COLUMN_ID, width: 300 },\n  { name: CREATED_AT_COLUMN_ID, width: 120 },\n  { name: CREATED_BY_COLUMN_ID, width: 312 },\n  { name: CREATED_FOR_COLUMN_ID, width: 312 },\n  { name: DELETE_COLUMN_ID, width: 45 },\n]\n","/**\n * Copyright 2024-2025 NetCracker Technology Corporation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Tokens } from '../../types/tokens'\n\nexport const TOKENS_LIST: Tokens = [\n  {\n    key: '1',\n    packageKey: '1',\n    name: 'cloud',\n    createdAt: '11.12.12',\n    createdBy: {\n      key: '1',\n      name: 'Sergey',\n      avatarUrl: '',\n    },\n    createdFor: {\n      key: '1',\n      name: 'Sergey',\n      avatarUrl: '',\n    },\n    roles: ['Admin'],\n  },\n  {\n    key: '2',\n    packageKey: '2',\n    name: 'integration',\n    createdAt: '11.12.12',\n    createdBy: {\n      key: '3',\n      name: 'User 2',\n      avatarUrl: '',\n    },\n    createdFor: {\n      key: '1',\n      name: 'User 3',\n      avatarUrl: '',\n    },\n    roles: ['Admin'],\n  },\n  {\n    key: '3',\n    packageKey: '3',\n    name: 'cloud',\n    createdAt: '11.12.12',\n    createdBy: {\n      key: '3',\n      name: 'Sergey',\n      avatarUrl: '',\n    },\n    createdFor: {\n      key: '1',\n      name: 'Sergey',\n      avatarUrl: '',\n    },\n    roles: ['Admin'],\n  },\n  {\n    key: '4',\n    packageKey: '4',\n    name: 'test',\n    createdAt: '11.12.12',\n    createdBy: {\n      key: '4',\n      name: 'Sergey',\n      avatarUrl: '',\n    },\n    createdFor: {\n      key: '1',\n      name: 'User 44',\n      avatarUrl: '',\n    },\n    roles: ['Admin'],\n  },\n]\n"],"names":["TokensTable","memo","data","isLoading","deleteApiKey","disableDelete","containerWidth","setContainerWidth","useState","DEFAULT_CONTAINER_WIDTH","columnSizingInfo","setColumnSizingInfo","setHandlingColumnSizing","tableContainerRef","useRef","useResizeObserver","actualColumnSizing","useColumnsSizing","COLUMNS_MODELS","columns","useMemo","NAME_COLUMN_ID","name","jsx","TextWithOverflowTooltip","Typography","ROLES_COLUMN_ID","roles","role","tokenRoleMapping","CREATED_AT_COLUMN_ID","createdAt","FormattedDate","CREATED_BY_COLUMN_ID","createdBy","UserView","CREATED_FOR_COLUMN_ID","createdFor","DELETE_COLUMN_ID","key","packageKey","ButtonWithHint","DeleteIcon","getHeaderGroups","getRowModel","setColumnSizing","useReactTable","getCoreRowModel","getExpandedRowModel","useEffect","jsxs","TableContainer","Table","TableHead","headerGroup","TableRow","header","TableCell","flexRender","TableBody","row","cell","TableSkeleton","isEmpty","Placeholder","CONTENT_PLACEHOLDER_AREA","createComponents","RowSkeleton","DEFAULT_NUMBER_SKELETON_ROWS","TableCellSkeleton","TOKENS_LIST"],"mappings":"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"}