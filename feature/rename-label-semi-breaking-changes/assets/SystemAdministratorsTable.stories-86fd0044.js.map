{"version":3,"file":"SystemAdministratorsTable.stories-86fd0044.js","sources":["../../packages/shared/src/components/SystemAdministratorsTable.tsx"],"sourcesContent":["/**\n * Copyright 2024-2025 NetCracker Technology Corporation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { FC } from 'react'\nimport { memo, useEffect, useMemo, useRef, useState } from 'react'\nimport type { ColumnDef } from '@tanstack/table-core'\nimport { Button, Skeleton, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@mui/material'\nimport type { ColumnSizingInfoState, ColumnSizingState, OnChangeFn } from '@tanstack/react-table'\nimport { flexRender, getCoreRowModel, getExpandedRowModel, useReactTable } from '@tanstack/react-table'\nimport type { SystemAdmin, SystemAdmins } from '../types/system-admins'\nimport type { IsLoading } from '../utils/aliases'\nimport type { ColumnModel } from '../hooks/table-resizing/useColumnResizing'\nimport { DEFAULT_CONTAINER_WIDTH, useColumnsSizing } from '../hooks/table-resizing/useColumnResizing'\nimport { UserView } from './Users/UserView'\nimport { DeleteIcon } from '../icons/DeleteIcon'\nimport { isEmpty } from '../utils/arrays'\nimport { CONTENT_PLACEHOLDER_AREA, Placeholder } from './Placeholder'\nimport { createComponents } from '../utils/components'\nimport { DEFAULT_NUMBER_SKELETON_ROWS } from '../utils/constants'\nimport { useResizeObserver } from '../hooks/common/useResizeObserver'\n\nexport type SystemAdministratorsTableProps = {\n  data: SystemAdmins\n  deleteAdministrator: (admin: SystemAdmin) => void\n  isLoading: IsLoading\n}\n\n// First Order Component //\nexport const SystemAdministratorsTable: FC<SystemAdministratorsTableProps> = memo(({\n  data,\n  deleteAdministrator,\n  isLoading,\n}) => {\n  const [containerWidth, setContainerWidth] = useState(DEFAULT_CONTAINER_WIDTH)\n  const [columnSizingInfo, setColumnSizingInfo] = useState<ColumnSizingInfoState>()\n  const [, setHandlingColumnSizing] = useState<ColumnSizingState>()\n\n  const tableContainerRef = useRef<HTMLDivElement>(null)\n  useResizeObserver(tableContainerRef, setContainerWidth)\n\n  const actualColumnSizing = useColumnsSizing({\n    containerWidth: containerWidth,\n    columnModels: COLUMNS_MODELS,\n    columnSizingInfo: columnSizingInfo,\n    defaultMinColumnSize: 50,\n  })\n\n  const columns: ColumnDef<SystemAdmin>[] = useMemo(() => {\n      return [\n        {\n          id: SYSTEM_ADMINISTRATOR_COLUMN_ID,\n          header: 'System Administrators',\n          cell: ({ row: { original: { avatarUrl, name } } }) => (\n            <UserView name={name} avatarUrl={avatarUrl}/>\n          ),\n        },\n        {\n          id: DELETE_COLUMN_ID,\n          header: '',\n          cell: ({ row: { original: admin } }) => (\n            <Button\n              size=\"small\"\n              sx={{ visibility: 'hidden', height: '20px' }}\n              className=\"hoverable\"\n              startIcon={<DeleteIcon color={'#626D82'}/>}\n              onClick={() => deleteAdministrator(admin)}\n            />\n          ),\n        },\n      ]\n    },\n    [deleteAdministrator],\n  )\n\n  const { getHeaderGroups, getRowModel, setColumnSizing } = useReactTable({\n    data: data,\n    columns: columns,\n    columnResizeMode: 'onChange',\n    getCoreRowModel: getCoreRowModel(),\n    getExpandedRowModel: getExpandedRowModel(),\n    onColumnSizingChange: setHandlingColumnSizing as OnChangeFn<ColumnSizingState>,\n    onColumnSizingInfoChange: setColumnSizingInfo as OnChangeFn<ColumnSizingInfoState>,\n  })\n\n  useEffect(() => setColumnSizing(actualColumnSizing), [setColumnSizing, actualColumnSizing])\n\n  return (\n    <TableContainer sx={{ mt: 1 }} ref={tableContainerRef}>\n      <Table>\n        <TableHead>\n          {getHeaderGroups().map(headerGroup => (\n            <TableRow key={headerGroup.id}>\n              {headerGroup.headers.map((header) => (\n                <TableCell\n                  key={header.id}\n                  align=\"left\"\n                  width={actualColumnSizing ? actualColumnSizing[header.id] : header.getSize()}\n                >\n                  {flexRender(header.column.columnDef.header, header.getContext())}\n                </TableCell>\n              ))}\n            </TableRow>\n          ))}\n        </TableHead>\n        <TableBody>\n          {getRowModel().rows.map(row => (\n            <TableRow>\n              {row.getVisibleCells().map((cell) => (\n                <TableCell key={cell.column.id} data-testid={`Cell-${cell.column.id}`}>\n                  {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                </TableCell>\n              ))}\n            </TableRow>\n          ))}\n          {isLoading && <TableSkeleton/>}\n        </TableBody>\n      </Table>\n      {isEmpty(data) && !isLoading\n        ? (\n          <Placeholder\n            sx={{ width: 'inherit' }}\n            invisible={isLoading}\n            area={CONTENT_PLACEHOLDER_AREA}\n            message=\"No System Administrators\"\n          />\n        )\n        : null\n      }\n    </TableContainer>\n  )\n})\n\nconst TableSkeleton: FC = memo(() => {\n  return createComponents(<RowSkeleton/>, DEFAULT_NUMBER_SKELETON_ROWS)\n})\n\nconst RowSkeleton: FC = memo(() => {\n  return (\n    <TableRow>\n      <TableCell>\n        <Skeleton variant=\"rectangular\" width={'80%'}/>\n      </TableCell>\n      <TableCell>\n        <Skeleton variant=\"rectangular\" width={'80%'}/>\n      </TableCell>\n    </TableRow>\n  )\n})\n\nconst SYSTEM_ADMINISTRATOR_COLUMN_ID = 'system-administrator'\nconst DELETE_COLUMN_ID = 'delete'\n\nconst COLUMNS_MODELS: ColumnModel[] = [\n  { name: SYSTEM_ADMINISTRATOR_COLUMN_ID, width: 1000 },\n  { name: DELETE_COLUMN_ID, width: 60 },\n]\n"],"names":["SystemAdministratorsTable","memo","data","deleteAdministrator","isLoading","containerWidth","setContainerWidth","useState","DEFAULT_CONTAINER_WIDTH","columnSizingInfo","setColumnSizingInfo","setHandlingColumnSizing","tableContainerRef","useRef","useResizeObserver","actualColumnSizing","useColumnsSizing","COLUMNS_MODELS","columns","useMemo","SYSTEM_ADMINISTRATOR_COLUMN_ID","avatarUrl","name","jsx","UserView","DELETE_COLUMN_ID","admin","Button","DeleteIcon","getHeaderGroups","getRowModel","setColumnSizing","useReactTable","getCoreRowModel","getExpandedRowModel","useEffect","jsxs","TableContainer","Table","TableHead","headerGroup","TableRow","header","TableCell","flexRender","TableBody","row","cell","TableSkeleton","isEmpty","Placeholder","CONTENT_PLACEHOLDER_AREA","createComponents","RowSkeleton","DEFAULT_NUMBER_SKELETON_ROWS","Skeleton"],"mappings":"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"}