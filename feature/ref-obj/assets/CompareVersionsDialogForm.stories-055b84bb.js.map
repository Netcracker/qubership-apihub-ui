{"version":3,"file":"CompareVersionsDialogForm.stories-055b84bb.js","sources":["../../packages/shared/src/components/Titles/VersionTitle.tsx","../../packages/shared/src/components/CompareVersionsDialogForm.tsx","../../packages/shared/src/stories/samples/package-version-samples.ts"],"sourcesContent":["/**\n * Copyright 2024-2025 NetCracker Technology Corporation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { FC } from 'react'\nimport { memo } from 'react'\nimport { Box, Tooltip, Typography } from '@mui/material'\nimport type { Key } from '../../entities/keys'\nimport { REVISION_DELIMITER } from '../../entities/versions'\n\nexport type VersionTitleProps = {\n  version: Key | undefined\n  revision: Key | undefined\n  latestRevision: boolean | undefined\n  showTooltip?: boolean\n  subtitleVariant?: boolean\n}\n\n// First Order Component //\nexport const VersionTitle: FC<VersionTitleProps> = memo<VersionTitleProps>(({\n  version,\n  revision,\n  latestRevision,\n  showTooltip = true,\n  subtitleVariant = false,\n}) => {\n  const versionKeyElement =\n    <Typography\n      variant={subtitleVariant ? 'subtitle3' : 'inherit'}\n      data-testid=\"VersionTitle\"\n    >\n      {version}\n    </Typography>\n\n  if (latestRevision) {\n    return (\n      <>{versionKeyElement}</>\n    )\n  }\n\n  return (\n    <Tooltip\n      title={showTooltip ? `You are viewing the old revision ${REVISION_DELIMITER}${revision} of the version` : ''}>\n      <Box display=\"flex\">\n        {versionKeyElement}\n        {revision && <Typography variant=\"inherit\" color=\"#FB8A22\">{`${REVISION_DELIMITER}${revision}`}</Typography>}\n      </Box>\n    </Tooltip>\n  )\n})\n\n","/**\n * Copyright 2024-2025 NetCracker Technology Corporation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from 'react'\nimport type { FC, SyntheticEvent } from 'react'\nimport { memo, useState } from 'react'\nimport {\n  Autocomplete,\n  Box,\n  Button,\n  debounce,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  ListItem,\n  ListItemText,\n  TextField,\n  Typography,\n} from '@mui/material'\nimport type { Control, UseFormSetValue } from 'react-hook-form'\nimport { Controller, useWatch } from 'react-hook-form'\nimport { LoadingButton } from '@mui/lab'\nimport { DialogForm } from './DialogForm'\nimport type { Package } from '../entities/packages'\nimport { DEFAULT_DEBOUNCE } from '../utils/constants'\nimport type { PackageVersion } from '../entities/versions'\nimport { disableAutocompleteSearch } from '../utils/mui'\nimport { getSplittedVersionKey } from '../utils/versions'\nimport { CustomChip } from './CustomChip'\nimport { VersionTitle } from './Titles/VersionTitle'\nimport { Swapper } from './Swapper'\nimport { WARNING_API_PROCESSOR_TEXT, WarningApiProcessorVersion } from './WarningApiProcessorVersion'\n\n//todo need retest (without nested value)\nexport type CompareVersionsDialogFormData = {\n  originalWorkspace: Package | null\n  changedWorkspace: Package | null\n  originalPackage: Package | null\n  changedPackage: Package | null\n  originalVersion: PackageVersion | null\n  changedVersion: PackageVersion | null\n}\n\nexport type CompareVersionsDialogData = {\n  control: Control<CompareVersionsDialogFormData>\n  setValue: UseFormSetValue<CompareVersionsDialogFormData>\n  workspaces: ReadonlyArray<Package>\n  originalPackageOptions: ReadonlyArray<Package>\n  changedPackageOptions: ReadonlyArray<Package>\n  originalVersionOptions: ReadonlyArray<PackageVersion>\n  changedVersionOptions: ReadonlyArray<PackageVersion>\n  onSubmit: () => void\n  onSwap: () => void\n  isApiTypeFetching: boolean\n  isOriginalPackagesLoading: boolean\n  isChangedPackagesLoading: boolean\n  isOriginalPackageVersionsLoading: boolean\n  isChangedPackageVersionsLoading: boolean\n  isDefaultOriginalPackageLoading: boolean\n  isDashboard: boolean\n  arePackagesDifferent: boolean\n}\n\nexport type CompareVersionsDialogFormProps = CompareVersionsDialogData & {\n  open: boolean\n  setOpen: (value: boolean) => void\n  onOriginalPackageInputChange: (event: SyntheticEvent, value: string) => void\n  onChangedPackageInputChange: (event: SyntheticEvent, value: string) => void\n  onOriginalPackageVersionInputChange: (event: SyntheticEvent, value: string) => void\n  onChangedPackageVersionInputChange: (event: SyntheticEvent, value: string) => void\n}\n\n// First Order Component //\nexport const CompareVersionsDialogForm: FC<CompareVersionsDialogFormProps> = memo(({\n  open,\n  setOpen,\n  setValue,\n  control,\n  workspaces,\n  originalPackageOptions,\n  changedPackageOptions,\n  originalVersionOptions,\n  changedVersionOptions,\n  onSubmit,\n  onSwap,\n  isApiTypeFetching,\n  isOriginalPackagesLoading,\n  isChangedPackagesLoading,\n  isDashboard,\n  onOriginalPackageInputChange,\n  onChangedPackageInputChange,\n  onOriginalPackageVersionInputChange,\n  onChangedPackageVersionInputChange,\n  isOriginalPackageVersionsLoading,\n  isChangedPackageVersionsLoading,\n  isDefaultOriginalPackageLoading,\n  arePackagesDifferent,\n}) => {\n  const [packageMode, setPackageMode] = useState(arePackagesDifferent)\n\n  const packageFieldLabel = isDashboard ? 'Dashboard' : 'Package'\n  const changeButtonLabel = isDashboard ? 'Change Dashboards' : 'Change Packages'\n  const [warningApiProcessorStatePrevious, setWarningApiProcessorStatePrevious] = useState(false)\n  const [warningApiProcessorStateCurrent, setWarningApiProcessorStateCurrent] = useState(false)\n  const previousVersion = useWatch({ control: control, name: 'originalVersion' })\n  const previousPackage = useWatch({ control: control, name: 'originalPackage' })\n  const currentVersion = useWatch({ control: control, name: 'changedVersion' })\n  const currentPackage = useWatch({ control: control, name: 'changedPackage' })\n\n  return (\n    <DialogForm\n      open={open}\n      onClose={() => setOpen(false)}\n      onSubmit={onSubmit}\n      maxWidth=\"md\"\n    >\n      <DialogTitle>\n        Select Versions To Compare\n      </DialogTitle>\n\n      <DialogContent\n        sx={DIALOG_CONTENT_STYLES}\n      >\n        <Typography\n          sx={{ gridArea: 'originalTitle' }}\n          variant=\"button\"\n        >\n          Previous\n        </Typography>\n\n        {packageMode &&\n          <>\n            <Controller\n              name=\"originalWorkspace\"\n              control={control}\n              render={({ field: { value, onChange } }) => (\n                <Autocomplete\n                  sx={{ gridArea: 'originalWorkspace' }}\n                  value={value}\n                  options={workspaces}\n                  isOptionEqualToValue={(option, value) => option.key === value.key}\n                  getOptionLabel={({ name }: Package) => name}\n                  renderOption={(props, { key, name }) => <ListItem {...props} key={key}>{name}</ListItem>}\n                  renderInput={(params) => <TextField {...params} required label=\"Workspace\"/>}\n                  onChange={(_, value) => {\n                    setValue('originalPackage', null)\n                    setValue('originalVersion', null)\n                    setWarningApiProcessorStatePrevious(false)\n                    onChange(value)\n                  }}\n                  data-testid=\"PreviousWorkspaceAutocomplete\"\n                />\n              )}\n            />\n            <Controller\n              name=\"originalPackage\"\n              control={control}\n              render={({ field: { value, onChange } }) => (\n                <Autocomplete\n                  autoSelect\n                  filterOptions={disableAutocompleteSearch}\n                  onInputChange={debounce(onOriginalPackageInputChange, DEFAULT_DEBOUNCE)}\n                  sx={{ gridArea: 'originalPackage' }}\n                  value={value}\n                  loading={isOriginalPackagesLoading}\n                  options={originalPackageOptions}\n                  getOptionLabel={({ name }: Package) => name}\n                  renderOption={(props, { key, name }) => <ListItem {...props} key={key}>{name}</ListItem>}\n                  renderInput={(params) => <TextField {...params} required label={packageFieldLabel}/>}\n                  onChange={(_, value) => {\n                    setValue('originalVersion', null)\n                    !packageMode && setWarningApiProcessorStateCurrent(false)\n                    packageMode && setWarningApiProcessorStatePrevious(false)\n                    onChange(value)\n                  }}\n                  data-testid=\"PreviousPackageAutocomplete\"\n                />\n              )}\n            />\n          </>\n        }\n\n        <Controller\n          name=\"originalVersion\"\n          control={control}\n          render={({ field: { value, onChange } }) => {\n            const { versionKey } = getSplittedVersionKey(value?.key, value?.latestRevision)\n            return (\n              <Autocomplete\n                filterOptions={disableAutocompleteSearch}\n                onInputChange={debounce(onOriginalPackageVersionInputChange, DEFAULT_DEBOUNCE)}\n                sx={{ gridArea: 'originalVersion' }}\n                value={value ? { ...value, key: value.latestRevision ? versionKey : value.key } : null}\n                loading={isOriginalPackageVersionsLoading}\n                options={originalVersionOptions}\n                isOptionEqualToValue={(option, value) => option.key === value.key}\n                getOptionLabel={({ key }: PackageVersion) => key}\n                renderOption={(props, { key, status, latestRevision }) => {\n                  const { versionKey, revisionKey } = getSplittedVersionKey(key)\n                  return (\n                    <ListItem {...props} key={key}>\n                      <ListItemText>\n                        <VersionTitle\n                          version={versionKey}\n                          revision={revisionKey}\n                          latestRevision={latestRevision}\n                          showTooltip={false}\n                        />\n                      </ListItemText>\n                      <CustomChip value={status}/>\n                    </ListItem>\n                  )\n                }}\n                renderInput={(params) => <TextField {...params} required label=\"Version\"/>}\n                onChange={(_, value) => {\n                  if (!value) {\n                    setWarningApiProcessorStatePrevious(false)\n                  }\n                  onChange(value)\n                }}\n                data-testid=\"PreviousVersionAutocomplete\"\n              />\n            )\n          }}\n        />\n\n        <Box\n          sx={{ gridArea: 'swapper', alignSelf: 'center' }}\n        >\n          <Swapper onSwap={onSwap}/>\n        </Box>\n\n        <Typography\n          sx={{ gridArea: 'changedTitle' }}\n          variant=\"button\"\n        >\n          Current\n        </Typography>\n\n        {packageMode &&\n          <>\n            <Controller\n              name=\"changedWorkspace\"\n              control={control}\n              render={({ field: { value, onChange } }) => (\n                <Autocomplete\n                  sx={{ gridArea: 'changedWorkspace' }}\n                  value={value}\n                  options={workspaces}\n                  isOptionEqualToValue={(option, value) => option.key === value.key}\n                  getOptionLabel={({ name }: Package) => name}\n                  renderOption={(props, { key, name }) => <ListItem {...props} key={key}>{name}</ListItem>}\n                  renderInput={(params) => <TextField {...params} required label=\"Workspace\"/>}\n                  onChange={(_, value) => {\n                    setValue('changedPackage', null)\n                    setWarningApiProcessorStateCurrent(false)\n                    setValue('changedVersion', null)\n                    onChange(value)\n                  }}\n                  data-testid=\"CurrentWorkspaceAutocomplete\"\n                />\n              )}\n            />\n            <Controller\n              name=\"changedPackage\"\n              control={control}\n              render={({ field: { value, onChange } }) => (\n                <Autocomplete\n                  autoSelect\n                  filterOptions={disableAutocompleteSearch}\n                  onInputChange={debounce(onChangedPackageInputChange, DEFAULT_DEBOUNCE)}\n                  sx={{ gridArea: 'changedPackage' }}\n                  value={value}\n                  loading={isChangedPackagesLoading}\n                  options={changedPackageOptions}\n                  getOptionLabel={({ name }: Package) => name}\n                  renderOption={(props, { key, name }) => <ListItem {...props} key={key}>{name}</ListItem>}\n                  renderInput={(params) => <TextField {...params} required label={packageFieldLabel}/>}\n                  onChange={(_, value) => {\n                    packageMode && setWarningApiProcessorStateCurrent(false)\n                    !packageMode && setWarningApiProcessorStatePrevious(false)\n                    setValue('changedVersion', null)\n                    onChange(value)\n                  }}\n                  data-testid=\"CurrentPackageAutocomplete\"\n                />\n              )}\n            />\n          </>\n        }\n\n        <Controller\n          name=\"changedVersion\"\n          control={control}\n          render={({ field: { value, onChange } }) => {\n            const { versionKey } = getSplittedVersionKey(value?.key, value?.latestRevision)\n            return (\n              <Autocomplete\n                filterOptions={disableAutocompleteSearch}\n                onInputChange={debounce(onChangedPackageVersionInputChange, DEFAULT_DEBOUNCE)}\n                sx={{ gridArea: 'changedVersion' }}\n                value={value ? { ...value, key: value.latestRevision ? versionKey : value.key } : null}\n                loading={isChangedPackageVersionsLoading}\n                options={changedVersionOptions}\n                isOptionEqualToValue={(option, value) => option.key === value.key}\n                getOptionLabel={({ key }: PackageVersion) => key}\n                renderOption={(props, { key, status, latestRevision }) => {\n                  const { versionKey, revisionKey } = getSplittedVersionKey(key)\n                  return (\n                    <ListItem {...props} key={key}>\n                      <ListItemText>\n                        <VersionTitle\n                          version={versionKey}\n                          revision={revisionKey}\n                          latestRevision={latestRevision}\n                          showTooltip={false}\n                        />\n                      </ListItemText>\n                      <CustomChip value={status}/>\n                    </ListItem>\n                  )\n                }}\n                renderInput={(params) => <TextField {...params} required label=\"Version\"/>}\n                onChange={(_, value) => {\n                  if (!value) {\n                    setWarningApiProcessorStateCurrent(false)\n                  }\n\n                  onChange(value)\n                }}\n                data-testid=\"CurrentVersionAutocomplete\"\n              />\n            )\n          }}\n        />\n      </DialogContent>\n      <Box sx={{ maxWidth: '692px', padding: '0 24px' }}>\n        <WarningApiProcessorVersion\n          versionKey={previousVersion?.key}\n          packageKey={previousPackage?.key}\n          type={WARNING_API_PROCESSOR_TEXT}\n          hidden={warningApiProcessorStateCurrent}\n          onWarningTextChange={(value) => setWarningApiProcessorStatePrevious(!!value)}/>\n        <WarningApiProcessorVersion\n          versionKey={currentVersion?.key}\n          packageKey={packageMode ? currentPackage?.key : previousPackage?.key}\n          type={WARNING_API_PROCESSOR_TEXT}\n          onWarningTextChange={(value) => setWarningApiProcessorStateCurrent(!!value)}/>\n      </Box>\n      <DialogActions>\n\n        <LoadingButton\n          variant=\"contained\"\n          type=\"submit\"\n          loading={isApiTypeFetching}\n          disabled={warningApiProcessorStateCurrent || warningApiProcessorStatePrevious}\n          data-testid=\"CompareButton\"\n        >\n          Compare\n        </LoadingButton>\n        <Button variant=\"outlined\" onClick={() => setOpen(false)} data-testid=\"CancelButton\">\n          Cancel\n        </Button>\n        <Box sx={{ marginLeft: 'auto' }}>\n          <LoadingButton\n            variant=\"outlined\"\n            onClick={() => setPackageMode(!packageMode)}\n            disabled={packageMode}\n            loading={isDefaultOriginalPackageLoading}\n            data-testid=\"ChangePackagesButton\"\n          >\n            {changeButtonLabel}\n          </LoadingButton>\n        </Box>\n      </DialogActions>\n    </DialogForm>\n  )\n})\n\nconst DIALOG_CONTENT_STYLES = {\n  display: 'grid',\n  columnGap: 1,\n  gridTemplateRows: 'repeat(3, max-content)',\n  gridTemplateColumns: '300px max-content 300px',\n  gridTemplateAreas: `\n    'originalTitle     originalTitle   changedTitle'\n    'originalWorkspace   swapper       changedWorkspace'\n    'originalPackage   swapper         changedPackage'\n    'originalVersion   swapper         changedVersion'\n  `,\n}\n","/**\n * Copyright 2024-2025 NetCracker Technology Corporation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { PackageVersion } from '../../entities/versions'\n\nexport const packageVersion: PackageVersion = {\n  createdAt: 'Fri Oct 06 2023',\n  createdBy: {\n    name: 'John Williams',\n    type: 'user',\n    id: 'JW_1234',\n  },\n  status: 'draft',\n  previousVersion: '2023.1@3',\n  versionLabels: ['apihub/x-api-kind: no-BWC'],\n  key: '2023.1@3',\n  latestRevision: true,\n}\n"],"names":["VersionTitle","memo","version","revision","latestRevision","showTooltip","subtitleVariant","versionKeyElement","jsx","Typography","Fragment","Tooltip","REVISION_DELIMITER","jsxs","Box","CompareVersionsDialogForm","open","setOpen","setValue","control","workspaces","originalPackageOptions","changedPackageOptions","originalVersionOptions","changedVersionOptions","onSubmit","onSwap","isApiTypeFetching","isOriginalPackagesLoading","isChangedPackagesLoading","isDashboard","onOriginalPackageInputChange","onChangedPackageInputChange","onOriginalPackageVersionInputChange","onChangedPackageVersionInputChange","isOriginalPackageVersionsLoading","isChangedPackageVersionsLoading","isDefaultOriginalPackageLoading","arePackagesDifferent","packageMode","setPackageMode","useState","packageFieldLabel","changeButtonLabel","warningApiProcessorStatePrevious","setWarningApiProcessorStatePrevious","warningApiProcessorStateCurrent","setWarningApiProcessorStateCurrent","previousVersion","useWatch","previousPackage","currentVersion","currentPackage","DialogForm","DialogTitle","DialogContent","DIALOG_CONTENT_STYLES","Controller","value","onChange","Autocomplete","option","value2","name","props","key","createElement","ListItem","params","TextField","_","disableAutocompleteSearch","debounce","DEFAULT_DEBOUNCE","versionKey","getSplittedVersionKey","status","versionKey2","revisionKey","ListItemText","CustomChip","Swapper","WarningApiProcessorVersion","WARNING_API_PROCESSOR_TEXT","DialogActions","LoadingButton","Button","packageVersion"],"mappings":"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"}