{"version":3,"file":"lint.es2-c68ac257.js","sources":["../../node_modules/graphql-language-service/esm/utils/validateWithCustomRules.js","../../node_modules/graphql-language-service/esm/interface/getDiagnostics.js","../../node_modules/@graphiql/react/dist/lint.es2.js"],"sourcesContent":["import { specifiedRules, validate, NoUnusedFragmentsRule, KnownFragmentNamesRule, Kind, ExecutableDefinitionsRule, LoneSchemaDefinitionRule, UniqueOperationTypesRule, UniqueTypeNamesRule, UniqueEnumValueNamesRule, UniqueFieldDefinitionNamesRule, UniqueDirectiveNamesRule, KnownTypeNamesRule, KnownDirectivesRule, UniqueDirectivesPerLocationRule, PossibleTypeExtensionsRule, UniqueArgumentNamesRule, UniqueInputFieldNamesRule, } from 'graphql';\nconst specifiedSDLRules = [\n    LoneSchemaDefinitionRule,\n    UniqueOperationTypesRule,\n    UniqueTypeNamesRule,\n    UniqueEnumValueNamesRule,\n    UniqueFieldDefinitionNamesRule,\n    UniqueDirectiveNamesRule,\n    KnownTypeNamesRule,\n    KnownDirectivesRule,\n    UniqueDirectivesPerLocationRule,\n    PossibleTypeExtensionsRule,\n    UniqueArgumentNamesRule,\n    UniqueInputFieldNamesRule,\n];\nexport function validateWithCustomRules(schema, ast, customRules, isRelayCompatMode, isSchemaDocument) {\n    const rules = specifiedRules.filter(rule => {\n        if (rule === NoUnusedFragmentsRule || rule === ExecutableDefinitionsRule) {\n            return false;\n        }\n        if (isRelayCompatMode && rule === KnownFragmentNamesRule) {\n            return false;\n        }\n        return true;\n    });\n    if (customRules) {\n        Array.prototype.push.apply(rules, customRules);\n    }\n    if (isSchemaDocument) {\n        Array.prototype.push.apply(rules, specifiedSDLRules);\n    }\n    const errors = validate(schema, ast, rules);\n    return errors.filter(error => {\n        if (error.message.includes('Unknown directive') && error.nodes) {\n            const node = error.nodes[0];\n            if (node && node.kind === Kind.DIRECTIVE) {\n                const name = node.name.value;\n                if (name === 'arguments' || name === 'argumentDefinitions') {\n                    return false;\n                }\n            }\n        }\n        return true;\n    });\n}\n//# sourceMappingURL=validateWithCustomRules.js.map","import { GraphQLError, print, validate, NoDeprecatedCustomRule, parse, } from 'graphql';\nimport { CharacterStream, onlineParser } from '../parser';\nimport { Range, validateWithCustomRules, Position } from '../utils';\nexport const SEVERITY = {\n    Error: 'Error',\n    Warning: 'Warning',\n    Information: 'Information',\n    Hint: 'Hint',\n};\nexport const DIAGNOSTIC_SEVERITY = {\n    [SEVERITY.Error]: 1,\n    [SEVERITY.Warning]: 2,\n    [SEVERITY.Information]: 3,\n    [SEVERITY.Hint]: 4,\n};\nconst invariant = (condition, message) => {\n    if (!condition) {\n        throw new Error(message);\n    }\n};\nexport function getDiagnostics(query, schema = null, customRules, isRelayCompatMode, externalFragments) {\n    var _a, _b;\n    let ast = null;\n    let fragments = '';\n    if (externalFragments) {\n        fragments =\n            typeof externalFragments === 'string'\n                ? externalFragments\n                : externalFragments.reduce((acc, node) => acc + print(node) + '\\n\\n', '');\n    }\n    const enhancedQuery = fragments ? `${query}\\n\\n${fragments}` : query;\n    try {\n        ast = parse(enhancedQuery);\n    }\n    catch (error) {\n        if (error instanceof GraphQLError) {\n            const range = getRange((_b = (_a = error.locations) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : { line: 0, column: 0 }, enhancedQuery);\n            return [\n                {\n                    severity: DIAGNOSTIC_SEVERITY.Error,\n                    message: error.message,\n                    source: 'GraphQL: Syntax',\n                    range,\n                },\n            ];\n        }\n        throw error;\n    }\n    return validateQuery(ast, schema, customRules, isRelayCompatMode);\n}\nexport function validateQuery(ast, schema = null, customRules, isRelayCompatMode) {\n    if (!schema) {\n        return [];\n    }\n    const validationErrorAnnotations = validateWithCustomRules(schema, ast, customRules, isRelayCompatMode).flatMap(error => annotations(error, DIAGNOSTIC_SEVERITY.Error, 'Validation'));\n    const deprecationWarningAnnotations = validate(schema, ast, [\n        NoDeprecatedCustomRule,\n    ]).flatMap(error => annotations(error, DIAGNOSTIC_SEVERITY.Warning, 'Deprecation'));\n    return validationErrorAnnotations.concat(deprecationWarningAnnotations);\n}\nfunction annotations(error, severity, type) {\n    if (!error.nodes) {\n        return [];\n    }\n    const highlightedNodes = [];\n    for (const [i, node] of error.nodes.entries()) {\n        const highlightNode = node.kind !== 'Variable' && 'name' in node && node.name !== undefined\n            ? node.name\n            : 'variable' in node && node.variable !== undefined\n                ? node.variable\n                : node;\n        if (highlightNode) {\n            invariant(error.locations, 'GraphQL validation error requires locations.');\n            const loc = error.locations[i];\n            const highlightLoc = getLocation(highlightNode);\n            const end = loc.column + (highlightLoc.end - highlightLoc.start);\n            highlightedNodes.push({\n                source: `GraphQL: ${type}`,\n                message: error.message,\n                severity,\n                range: new Range(new Position(loc.line - 1, loc.column - 1), new Position(loc.line - 1, end)),\n            });\n        }\n    }\n    return highlightedNodes;\n}\nexport function getRange(location, queryText) {\n    const parser = onlineParser();\n    const state = parser.startState();\n    const lines = queryText.split('\\n');\n    invariant(lines.length >= location.line, 'Query text must have more lines than where the error happened');\n    let stream = null;\n    for (let i = 0; i < location.line; i++) {\n        stream = new CharacterStream(lines[i]);\n        while (!stream.eol()) {\n            const style = parser.token(stream, state);\n            if (style === 'invalidchar') {\n                break;\n            }\n        }\n    }\n    invariant(stream, 'Expected Parser stream to be available.');\n    const line = location.line - 1;\n    const start = stream.getStartOfToken();\n    const end = stream.getCurrentPosition();\n    return new Range(new Position(line, start), new Position(line, end));\n}\nfunction getLocation(node) {\n    const typeCastedNode = node;\n    const location = typeCastedNode.loc;\n    invariant(location, 'Expected ASTNode to have a location.');\n    return location;\n}\n//# sourceMappingURL=getDiagnostics.js.map","import { C as t } from \"./codemirror.es.js\";\nimport { getDiagnostics as c } from \"graphql-language-service\";\nimport \"./codemirror.es2.js\";\nconst a = [\"error\", \"warning\", \"information\", \"hint\"], l = {\n  \"GraphQL: Validation\": \"validation\",\n  \"GraphQL: Deprecation\": \"deprecation\",\n  \"GraphQL: Syntax\": \"syntax\"\n};\nt.registerHelper(\"lint\", \"graphql\", (n, s) => {\n  const { schema: i, validationRules: r, externalFragments: o } = s;\n  return c(n, i, r, void 0, o).map((e) => ({\n    message: e.message,\n    severity: e.severity ? a[e.severity - 1] : a[0],\n    type: e.source ? l[e.source] : void 0,\n    from: t.Pos(e.range.start.line, e.range.start.character),\n    to: t.Pos(e.range.end.line, e.range.end.character)\n  }));\n});\n//# sourceMappingURL=lint.es2.js.map\n"],"names":["specifiedSDLRules","LoneSchemaDefinitionRule","UniqueOperationTypesRule","UniqueTypeNamesRule","UniqueEnumValueNamesRule","UniqueFieldDefinitionNamesRule","UniqueDirectiveNamesRule","KnownTypeNamesRule","KnownDirectivesRule","UniqueDirectivesPerLocationRule","PossibleTypeExtensionsRule","UniqueArgumentNamesRule","UniqueInputFieldNamesRule","validateWithCustomRules","schema","ast","customRules","isRelayCompatMode","isSchemaDocument","rules","specifiedRules","rule","NoUnusedFragmentsRule","ExecutableDefinitionsRule","KnownFragmentNamesRule","validate","error","node","Kind","name","SEVERITY","DIAGNOSTIC_SEVERITY","invariant","condition","message","getDiagnostics","query","externalFragments","_a","_b","fragments","acc","print","enhancedQuery","parse","GraphQLError","range","getRange","validateQuery","validationErrorAnnotations","annotations","deprecationWarningAnnotations","NoDeprecatedCustomRule","severity","type","highlightedNodes","i","highlightNode","loc","highlightLoc","getLocation","end","Range","Position","location","queryText","parser","onlineParser","state","lines","stream","CharacterStream","line","start","a","l","t","n","s","r","c","e"],"mappings":"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","x_google_ignoreList":[0,1,2]}