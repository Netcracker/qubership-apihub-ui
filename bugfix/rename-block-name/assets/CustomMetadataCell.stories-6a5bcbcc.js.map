{"version":3,"file":"CustomMetadataCell.stories-6a5bcbcc.js","sources":["../../packages/shared/src/components/CustomMetadataCell.tsx","../../packages/shared/src/stories/samples/metadata-samples.ts"],"sourcesContent":["/**\n * Copyright 2024-2025 NetCracker Technology Corporation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { FC } from 'react'\nimport * as React from 'react'\nimport { memo, useMemo, useState } from 'react'\nimport { Box, Typography } from '@mui/material'\nimport { CustomTagsTree, isPrimitive } from './CustomTagsTree'\nimport InfoOutlinedIcon from '@mui/icons-material/InfoOutlined'\nimport { OverflowTooltip } from './OverflowTooltip'\nimport type { JSONValue } from '../entities/operations'\nimport type { Pixel } from '../utils/types'\nimport { ButtonWithHint } from './Buttons/ButtonWithHint'\n\nconst MAX_LINES_COUNT = 2\nconst ICON_SIZE: Pixel = 16\n\nexport type CustomMetadataCellProps = {\n  metaData: { [key: string]: JSONValue }\n  textFilter?: string\n}\n\nexport const CustomMetadataCell: FC<CustomMetadataCellProps> = memo<CustomMetadataCellProps>(({\n  metaData,\n  textFilter,\n}) => {\n  const sortedMetaData = useMemo(() => {\n    const entries = Object.entries(metaData)\n    if (!textFilter) {\n      return entries\n    }\n    return entries.sort(([key1, value1], [key2, value2]) => {\n      const firstLine = `${key1}: ${value1}`\n      const secondLine = `${key2}: ${value2}`\n      return Number(secondLine.includes(textFilter)) - Number(firstLine.includes(textFilter))\n    })\n  }, [metaData, textFilter])\n\n  const tree: JSONValue = useMemo(() => {\n    return Object.fromEntries(sortedMetaData)\n  }, [sortedMetaData])\n\n  const metaValues = useMemo(() => {\n    return sortedMetaData.map(\n      ([key, value]) => ({\n        key: key,\n        value: value,\n      }),\n    )\n  }, [sortedMetaData])\n\n  const visibleLines = useMemo(() => metaValues.slice(0, MAX_LINES_COUNT), [metaValues])\n  const hasHiddenObject = useMemo(() => visibleLines.some(line => typeof line.value === 'object'), [visibleLines])\n  const hasMoreItems = Object.entries(metaValues || []).length > MAX_LINES_COUNT\n  const [open, setOpen] = useState(false)\n\n  const handleHintClose = (): void => setOpen(false)\n  const handleHintOpen = (): void => setOpen(true)\n\n  const checkTextOverflow = (currentTarget: EventTarget & HTMLDivElement): boolean => {\n    const lineElements = Array.from(currentTarget.querySelectorAll('.tagLine').values())\n    return lineElements.some(line => line.scrollWidth > line.clientWidth)\n  }\n\n  const shouldShowIcon = hasMoreItems || hasHiddenObject\n\n  const cellContent = (\n    <Box display=\"flex\" flexDirection=\"row\">\n      <Box width=\"fit-content\" maxWidth={`calc(100% - ${ICON_SIZE}px)`} sx={{ textWrap: 'nowrap' }}>\n        <Box overflow=\"hidden\">\n          {visibleLines?.map(({ key, value }) => {\n            if (!isPrimitive(value)) {\n              return (\n                <Box key={key} overflow=\"hidden\" textOverflow=\"ellipsis\">\n                  <Typography display=\"inline\" minWidth=\"fit-content\" variant=\"subtitle1\">{key}: </Typography>\n                  <Typography display=\"inline\" variant=\"body2\">...</Typography>\n                </Box>\n              )\n            }\n            return (\n              <Box className=\"tagLine\" key={key} overflow=\"hidden\" textOverflow=\"ellipsis\">\n                <Typography display=\"inline\" minWidth=\"fit-content\" variant=\"subtitle1\">{key}: </Typography>\n                <Typography display=\"inline\" variant=\"body2\">{`${value}`}</Typography>\n              </Box>\n            )\n          })}\n        </Box>\n      </Box>\n      {shouldShowIcon && <Box alignSelf=\"end\" height=\"23px\" display=\"flex\" alignItems=\"center\">\n        <ButtonWithHint\n          area-label=\"info\"\n          hint={\n            <Box overflow=\"scroll\" maxHeight=\"50vh\">\n              <CustomTagsTree tree={tree}/>\n            </Box>\n          }\n          size=\"small\"\n          sx={{ visibility: 'hidden', height: '20px' }}\n          className=\"hoverable\"\n          startIcon={\n            <InfoOutlinedIcon\n              className=\"hoverable\"\n              sx={{\n                color: '#626D82',\n                fontSize: `${ICON_SIZE}px`,\n                cursor: 'pointer',\n                visibility: open ? 'visible' : 'hidden',\n              }}\n            />\n          }\n          disableHint={false}\n          disabled={false}\n          handleClose={handleHintClose}\n          handleOpen={handleHintOpen}\n          tooltipMaxWidth={350}\n        />\n      </Box>}\n    </Box>\n  )\n\n  return (\n    <Box alignSelf=\"end\" paddingBottom=\"10px\">\n      {\n        shouldShowIcon ? cellContent : (\n          <OverflowTooltip\n            checkOverflow={checkTextOverflow}\n            title={\n              <Box overflow=\"scroll\" maxHeight=\"50vh\">\n                <CustomTagsTree tree={tree}/>\n              </Box>\n            }\n            PopperProps={{\n              sx: { '.MuiTooltip-tooltip': { maxWidth: 350 } },\n            }}\n          >\n            {cellContent}\n          </OverflowTooltip>\n        )\n      }\n    </Box>\n  )\n})\n","/**\n * Copyright 2024-2025 NetCracker Technology Corporation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const metadata = {\n  'x-custom1': 'X-Custom1 value',\n  'x-custom2': [\n    'green',\n    12,\n    null,\n    'undefined',\n  ],\n  'x-custom3': [\n    {\n      'prop': 1,\n    },\n    {\n      'prop': 'undefined',\n    },\n    'text text',\n  ],\n  'x-custom4': null,\n  'x-custom5': 'undefined',\n  'x-custom6': {\n    'aaa3': false,\n  },\n  'x-custom7': {\n    'one1': {\n      'two1': {\n        'three1': 'text1',\n      },\n      'two2': {\n        'three1': 'text1',\n        'three2': {\n          'four1': {\n            'five1': 'text1',\n          },\n          'four2': 123,\n        },\n      },\n      'two3': 'text1',\n    },\n  },\n  'x-custom8': 'test',\n}\n"],"names":["MAX_LINES_COUNT","ICON_SIZE","CustomMetadataCell","memo","metaData","textFilter","sortedMetaData","useMemo","entries","key1","value1","key2","value2","firstLine","secondLine","tree","metaValues","key","value","visibleLines","hasHiddenObject","line","hasMoreItems","open","setOpen","useState","handleHintClose","handleHintOpen","checkTextOverflow","currentTarget","shouldShowIcon","cellContent","jsxs","Box","jsx","isPrimitive","Typography","ButtonWithHint","CustomTagsTree","InfoOutlinedIcon","OverflowTooltip","metadata"],"mappings":"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"}