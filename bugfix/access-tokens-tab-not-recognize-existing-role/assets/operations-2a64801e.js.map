{"version":3,"file":"operations-2a64801e.js","sources":["../../packages/shared/src/entities/operations.ts"],"sourcesContent":["/**\n * Copyright 2024-2025 NetCracker Technology Corporation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { API_AUDIENCE_EXTERNAL, API_AUDIENCE_INTERNAL, API_AUDIENCE_UNKNOWN } from '@netcracker/qubership-apihub-api-processor'\nimport type { MethodType } from './method-types'\nimport type { PackageKind } from './packages'\nimport type { VersionStatus } from './version-status'\nimport type { GraphQlOperationType } from './graphql-operation-types'\nimport type { OperationChangeBase } from './version-changelog'\nimport type { FetchNextPageOptions, InfiniteQueryObserverResult } from '@tanstack/react-query'\nimport type { Key, VersionKey } from './keys'\nimport type { ApiType } from './api-types'\nimport { API_TYPE_REST } from './api-types'\nimport type { DeprecateItem } from '@netcracker/qubership-apihub-api-processor'\nimport type { IsLoading } from '../utils/aliases'\n\nexport const DEFAULT_API_TYPE: ApiType = API_TYPE_REST\n\nexport type OperationsDto = Readonly<{\n  operations: ReadonlyArray<OperationDto>\n  packages: PackagesRefs\n}>\nexport type OperationDto = RestOperationDto | GraphQlOperationDto\n\nexport type OperationMetadataDto = Readonly<{\n  operationId: Key\n  title: string\n  apiType: ApiType\n  apiKind: ApiKind\n  apiAudience: ApiAudience\n  data?: object\n  packageRef?: string\n  dataHash: string\n  deprecated?: boolean\n  tags?: Readonly<Tags>\n  customTags?: CustomTags\n}>\n\nexport type RestOperationDto = OperationMetadataDto & Readonly<{\n  method: MethodType\n  path: string\n}>\n\nexport type GraphQlOperationDto = OperationMetadataDto & Readonly<{\n  method: string\n  type: GraphQlOperationType\n}>\n\nexport type DeprecatedItem = DeprecateItem\nexport type DeprecatedItems = ReadonlyArray<DeprecatedItem>\nexport type DeprecatedItemsDto = {\n  deprecatedItems: DeprecatedItems\n}\n\nexport type OperationsWithDeprecationsDto = Readonly<{\n  operations: ReadonlyArray<OperationWithDeprecationsDto>\n  packages: PackagesRefs\n}>\nexport type OperationWithDeprecationsDto = Omit<OperationDto, 'dataHash' | 'data'> & Readonly<{\n  deprecatedCount?: string\n  deprecatedInfo?: object\n  deprecatedItems?: DeprecatedItemsDto\n  deprecatedInPreviousVersions?: string[]\n}>\n\nexport type OperationsGroupedByTag<T extends Operation = OperationData> = {\n  [tag: string]: T[]\n}\n\nexport type OperationPair<T extends Operation = Operation> = {\n  currentOperation?: T\n  previousOperation?: T\n}\n\n// When isLoading = true, the operation pair is not available yet\nexport type OptionalOperationPair<T extends Operation = Operation> = OperationPair<T> & {\n  isLoading: IsLoading\n}\n\nexport type OperationPairsGroupedByTag = {\n  [tag: string]: OperationPair[]\n}\n\nexport type Operations = ReadonlyArray<Operation>\nexport type OperationsData = ReadonlyArray<OperationData>\nexport type PagedOperations = ReadonlyArray<OperationsData>\n\nexport type JSONValue =\n  | null\n  | undefined\n  | string\n  | boolean\n  | number\n  | JSONValue[]\n  | { [key: string]: JSONValue }\n\nexport type CustomTags = { [key: string]: object }\n\nexport interface Operation {\n  readonly operationKey: Key\n  readonly title: string\n  readonly apiKind: ApiKind\n  readonly apiAudience: ApiAudience\n  readonly dataHash?: string\n  readonly packageRef?: PackageRef\n  readonly tags?: Readonly<Tags>\n  readonly customTags?: CustomTags\n}\nexport interface RestOperation extends Operation {\n  readonly method: MethodType\n  readonly path: string\n}\n\nexport interface GraphQlOperation extends Operation {\n  readonly method: string\n  readonly type: GraphQlOperationType\n}\n\nexport interface OperationData extends Operation {\n  apiType?: ApiType\n  data?: object\n  deprecated: boolean\n}\n\nexport type PackagesRefs = {\n  [rawRefId: string]: PackageRefDto\n}\nexport type PackageRefDto = {\n  refId: string\n  kind?: string\n  name?: string\n  version: string\n  notLatestRevision?: boolean\n  status?: VersionStatus\n  deletedAt?: string\n  deletedBy?: string\n  parentPackages?: ReadonlyArray<string>\n}\n\nexport type OperationWithDeprecations = OperationData & Readonly<{\n  deprecatedCount?: string\n  deprecatedInfo?: string\n  deprecatedItems?: DeprecatedItems\n  deprecatedInPreviousVersions?: string[]\n}>\nexport type OperationsWithDeprecations = ReadonlyArray<OperationWithDeprecations>\n\nexport type PackageRef = {\n  key: Key\n  refId: Key\n  kind?: PackageKind\n  name?: string\n  version: VersionKey\n  latestRevision: boolean\n  status?: VersionStatus\n  deletedAt?: string\n  deletedBy?: string\n  parentPackages?: ReadonlyArray<string>\n}\n\nexport function toOperation(operationDto: OperationDto, packagesRefs: PackagesRefs): OperationData {\n  return {\n    ...operationDto,\n    operationKey: operationDto.operationId,\n    deprecated: operationDto.deprecated ?? false,\n    packageRef: toPackageRef(operationDto.packageRef, packagesRefs),\n  }\n}\n\nexport function toOperations(value: OperationsDto): OperationsData {\n  const { packages } = value\n  return value.operations.map(operation => toOperation(operation, packages))\n}\n\nexport const ALL_API_KIND = 'all'\nexport const BWC_API_KIND = 'bwc'\nexport const NO_BWC_API_KIND = 'no-bwc'\nexport const EXPERIMENTAL_API_KIND = 'experimental'\n\nexport type ApiKind =\n  | typeof ALL_API_KIND\n  | typeof BWC_API_KIND\n  | typeof NO_BWC_API_KIND\n  | typeof EXPERIMENTAL_API_KIND\n\nexport const API_KINDS: Record<ApiKind, string> = {\n  [ALL_API_KIND]: 'All',\n  [BWC_API_KIND]: 'BWC',\n  [NO_BWC_API_KIND]: 'No BWC',\n  [EXPERIMENTAL_API_KIND]: 'Experimental',\n}\n\nexport const API_AUDIENCE_ALL = 'all'\n\nexport type ApiAudience =\n  | typeof API_AUDIENCE_INTERNAL\n  | typeof API_AUDIENCE_EXTERNAL\n  | typeof API_AUDIENCE_UNKNOWN\n  | typeof API_AUDIENCE_ALL\n\nexport const API_AUDIENCES: Record<ApiAudience, string> = {\n  [API_AUDIENCE_INTERNAL]: 'Internal',\n  [API_AUDIENCE_EXTERNAL]: 'External',\n  [API_AUDIENCE_UNKNOWN]: 'Unknown',\n  [API_AUDIENCE_ALL]: 'All',\n}\n\nexport type Tag = string\nexport type Tags = readonly Tag[]\n\nexport type OperationTags = Readonly<Tags>\nexport type OperationTagsDto = Readonly<{\n  tags: Readonly<Tags>\n}>\n\nexport function toOperationTags(value: OperationTagsDto): OperationTags {\n  return value.tags ?? []\n}\n\nexport const DEFAULT_TAG = 'default'\nexport const EMPTY_TAG = ''\n\nexport const ALL_DEPRECATED_QUERY_STATUS = 'all'\nexport type DeprecatedQueryStatus = typeof ALL_DEPRECATED_QUERY_STATUS | 'true' | 'false'\n\nexport function toDeprecatedQueryStatus(value: boolean): DeprecatedQueryStatus {\n  if (value) {\n    return 'true'\n  } else {\n    return 'false'\n  }\n}\n\nexport function toPackageRef(packageRef: string | undefined, packages?: PackagesRefs): PackageRef | undefined {\n  if (!packageRef) {\n    return undefined\n  }\n  const relatedPackage = packages?.[packageRef]\n  return relatedPackage ? {\n    key: relatedPackage.refId,\n    refId: relatedPackage.refId,\n    version: relatedPackage.version,\n    status: relatedPackage.status,\n    name: relatedPackage.name,\n    parentPackages: relatedPackage.parentPackages,\n    latestRevision: !relatedPackage?.notLatestRevision,\n  } : undefined\n}\n\nexport function isRestOperation(operation: Operation): operation is RestOperation {\n  const asRestOperation = (operation as RestOperation)\n  return asRestOperation.path !== undefined\n}\n\nexport function isRestOperationDto(operation: OperationDto): operation is RestOperationDto {\n  const asRestOperation = (operation as RestOperationDto)\n  return asRestOperation.path !== undefined\n}\n\nexport function isGraphQlOperation(operation: Operation): operation is GraphQlOperation {\n  const asGraphQlOperation = (operation as GraphQlOperation)\n  return asGraphQlOperation.type !== undefined\n}\n\nexport function isOperation(value: unknown): value is Operation {\n  return !!value && typeof value === 'object' && 'title' in value\n}\n\nexport function isOperationData(value: unknown): value is OperationData {\n  return isOperation(value) && 'deprecated' in value\n}\n\nexport function isOperationChangeData(value: unknown): value is OperationChangeBase {\n  return isOperation(value) && 'changeSummary' in value\n}\n\nexport function isOperationDataArray(value: unknown): value is OperationData[] {\n  return !!value && Array.isArray(value) && value.every(isOperationData)\n}\n\nexport function isOperationChangeDataArray(value: unknown): value is OperationChangeBase[] {\n  return !!value && Array.isArray(value) && value.every(isOperationChangeData)\n}\n\nexport type FetchNextOperationList = (options?: FetchNextPageOptions) => Promise<InfiniteQueryObserverResult<OperationsData, Error>>\n\nexport type SelectedPreviewOperationData = {\n  operationKey: Key\n  packageRef?: PackageRef\n}\n"],"names":["ALL_API_KIND","BWC_API_KIND","NO_BWC_API_KIND","EXPERIMENTAL_API_KIND","API_KINDS","API_AUDIENCE_ALL","API_AUDIENCES","API_AUDIENCE_INTERNAL","API_AUDIENCE_EXTERNAL","API_AUDIENCE_UNKNOWN","isRestOperation","operation","isGraphQlOperation"],"mappings":"kEA2LO,MAAMA,EAAe,MACfC,EAAe,MACfC,EAAkB,SAClBC,EAAwB,eAQxBC,EAAqC,CAChD,CAACJ,CAAY,EAAG,MAChB,CAACC,CAAY,EAAG,MAChB,CAACC,CAAe,EAAG,SACnB,CAACC,CAAqB,EAAG,cAC3B,EAEaE,EAAmB,MAQnBC,EAA6C,CACxD,CAACC,CAAqB,EAAG,WACzB,CAACC,CAAqB,EAAG,WACzB,CAACC,CAAoB,EAAG,UACxB,CAACJ,CAAgB,EAAG,KACtB,EA4CO,SAASK,EAAgBC,EAAkD,CAEhF,OADyBA,EACF,OAAS,MAClC,CAOO,SAASC,EAAmBD,EAAqD,CAEtF,OAD4BA,EACF,OAAS,MACrC"}