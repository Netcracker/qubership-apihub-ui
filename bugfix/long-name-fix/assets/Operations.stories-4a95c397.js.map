{"version":3,"file":"Operations.stories-4a95c397.js","sources":["../../node_modules/react-router-dom/dist/index.js","../../packages/shared/src/components/Operations/OperationTitleWithMeta.tsx","../../packages/shared/src/components/Operations/OperationWithMetaClickableList.tsx"],"sourcesContent":["/**\n * React Router DOM v6.18.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport * as React from 'react';\nimport { UNSAFE_mapRouteProperties, UNSAFE_DataRouterContext, UNSAFE_DataRouterStateContext, Router, UNSAFE_useRoutesImpl, UNSAFE_NavigationContext, useHref, useResolvedPath, useLocation, useNavigate, createPath, UNSAFE_useRouteId, UNSAFE_RouteContext, useMatches, useNavigation, unstable_useBlocker } from 'react-router';\nexport { AbortedDeferredError, Await, MemoryRouter, Navigate, NavigationType, Outlet, Route, Router, Routes, UNSAFE_DataRouterContext, UNSAFE_DataRouterStateContext, UNSAFE_LocationContext, UNSAFE_NavigationContext, UNSAFE_RouteContext, UNSAFE_useRouteId, createMemoryRouter, createPath, createRoutesFromChildren, createRoutesFromElements, defer, generatePath, isRouteErrorResponse, json, matchPath, matchRoutes, parsePath, redirect, redirectDocument, renderMatches, resolvePath, unstable_useBlocker, useActionData, useAsyncError, useAsyncValue, useHref, useInRouterContext, useLoaderData, useLocation, useMatch, useMatches, useNavigate, useNavigation, useNavigationType, useOutlet, useOutletContext, useParams, useResolvedPath, useRevalidator, useRouteError, useRouteLoaderData, useRoutes } from 'react-router';\nimport { stripBasename, UNSAFE_warning, createRouter, createBrowserHistory, createHashHistory, UNSAFE_ErrorResponseImpl, UNSAFE_invariant, joinPaths, IDLE_FETCHER, matchPath } from '@remix-run/router';\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\n\nconst defaultMethod = \"get\";\nconst defaultEncType = \"application/x-www-form-urlencoded\";\nfunction isHtmlElement(object) {\n  return object != null && typeof object.tagName === \"string\";\n}\nfunction isButtonElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"button\";\n}\nfunction isFormElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"form\";\n}\nfunction isInputElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"input\";\n}\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\nfunction shouldProcessLinkClick(event, target) {\n  return event.button === 0 && (\n  // Ignore everything but left clicks\n  !target || target === \"_self\") &&\n  // Let browser handle \"target=_blank\" etc.\n  !isModifiedEvent(event) // Ignore clicks with modifier keys\n  ;\n}\n/**\n * Creates a URLSearchParams object using the given initializer.\n *\n * This is identical to `new URLSearchParams(init)` except it also\n * supports arrays as values in the object form of the initializer\n * instead of just strings. This is convenient when you need multiple\n * values for a given key, but don't want to use an array initializer.\n *\n * For example, instead of:\n *\n *   let searchParams = new URLSearchParams([\n *     ['sort', 'name'],\n *     ['sort', 'price']\n *   ]);\n *\n * you can do:\n *\n *   let searchParams = createSearchParams({\n *     sort: ['name', 'price']\n *   });\n */\nfunction createSearchParams(init) {\n  if (init === void 0) {\n    init = \"\";\n  }\n  return new URLSearchParams(typeof init === \"string\" || Array.isArray(init) || init instanceof URLSearchParams ? init : Object.keys(init).reduce((memo, key) => {\n    let value = init[key];\n    return memo.concat(Array.isArray(value) ? value.map(v => [key, v]) : [[key, value]]);\n  }, []));\n}\nfunction getSearchParamsForLocation(locationSearch, defaultSearchParams) {\n  let searchParams = createSearchParams(locationSearch);\n  if (defaultSearchParams) {\n    // Use `defaultSearchParams.forEach(...)` here instead of iterating of\n    // `defaultSearchParams.keys()` to work-around a bug in Firefox related to\n    // web extensions. Relevant Bugzilla tickets:\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1414602\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1023984\n    defaultSearchParams.forEach((_, key) => {\n      if (!searchParams.has(key)) {\n        defaultSearchParams.getAll(key).forEach(value => {\n          searchParams.append(key, value);\n        });\n      }\n    });\n  }\n  return searchParams;\n}\n// One-time check for submitter support\nlet _formDataSupportsSubmitter = null;\nfunction isFormDataSubmitterSupported() {\n  if (_formDataSupportsSubmitter === null) {\n    try {\n      new FormData(document.createElement(\"form\"),\n      // @ts-expect-error if FormData supports the submitter parameter, this will throw\n      0);\n      _formDataSupportsSubmitter = false;\n    } catch (e) {\n      _formDataSupportsSubmitter = true;\n    }\n  }\n  return _formDataSupportsSubmitter;\n}\nconst supportedFormEncTypes = new Set([\"application/x-www-form-urlencoded\", \"multipart/form-data\", \"text/plain\"]);\nfunction getFormEncType(encType) {\n  if (encType != null && !supportedFormEncTypes.has(encType)) {\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"\\\"\" + encType + \"\\\" is not a valid `encType` for `<Form>`/`<fetcher.Form>` \" + (\"and will default to \\\"\" + defaultEncType + \"\\\"\")) : void 0;\n    return null;\n  }\n  return encType;\n}\nfunction getFormSubmissionInfo(target, basename) {\n  let method;\n  let action;\n  let encType;\n  let formData;\n  let body;\n  if (isFormElement(target)) {\n    // When grabbing the action from the element, it will have had the basename\n    // prefixed to ensure non-JS scenarios work, so strip it since we'll\n    // re-prefix in the router\n    let attr = target.getAttribute(\"action\");\n    action = attr ? stripBasename(attr, basename) : null;\n    method = target.getAttribute(\"method\") || defaultMethod;\n    encType = getFormEncType(target.getAttribute(\"enctype\")) || defaultEncType;\n    formData = new FormData(target);\n  } else if (isButtonElement(target) || isInputElement(target) && (target.type === \"submit\" || target.type === \"image\")) {\n    let form = target.form;\n    if (form == null) {\n      throw new Error(\"Cannot submit a <button> or <input type=\\\"submit\\\"> without a <form>\");\n    }\n    // <button>/<input type=\"submit\"> may override attributes of <form>\n    // When grabbing the action from the element, it will have had the basename\n    // prefixed to ensure non-JS scenarios work, so strip it since we'll\n    // re-prefix in the router\n    let attr = target.getAttribute(\"formaction\") || form.getAttribute(\"action\");\n    action = attr ? stripBasename(attr, basename) : null;\n    method = target.getAttribute(\"formmethod\") || form.getAttribute(\"method\") || defaultMethod;\n    encType = getFormEncType(target.getAttribute(\"formenctype\")) || getFormEncType(form.getAttribute(\"enctype\")) || defaultEncType;\n    // Build a FormData object populated from a form and submitter\n    formData = new FormData(form, target);\n    // If this browser doesn't support the `FormData(el, submitter)` format,\n    // then tack on the submitter value at the end.  This is a lightweight\n    // solution that is not 100% spec compliant.  For complete support in older\n    // browsers, consider using the `formdata-submitter-polyfill` package\n    if (!isFormDataSubmitterSupported()) {\n      let {\n        name,\n        type,\n        value\n      } = target;\n      if (type === \"image\") {\n        let prefix = name ? name + \".\" : \"\";\n        formData.append(prefix + \"x\", \"0\");\n        formData.append(prefix + \"y\", \"0\");\n      } else if (name) {\n        formData.append(name, value);\n      }\n    }\n  } else if (isHtmlElement(target)) {\n    throw new Error(\"Cannot submit element that is not <form>, <button>, or \" + \"<input type=\\\"submit|image\\\">\");\n  } else {\n    method = defaultMethod;\n    action = null;\n    encType = defaultEncType;\n    body = target;\n  }\n  // Send body for <Form encType=\"text/plain\" so we encode it into text\n  if (formData && encType === \"text/plain\") {\n    body = formData;\n    formData = undefined;\n  }\n  return {\n    action,\n    method: method.toLowerCase(),\n    encType,\n    formData,\n    body\n  };\n}\n\nconst _excluded = [\"onClick\", \"relative\", \"reloadDocument\", \"replace\", \"state\", \"target\", \"to\", \"preventScrollReset\", \"unstable_viewTransition\"],\n  _excluded2 = [\"aria-current\", \"caseSensitive\", \"className\", \"end\", \"style\", \"to\", \"unstable_viewTransition\", \"children\"],\n  _excluded3 = [\"fetcherKey\", \"navigate\", \"reloadDocument\", \"replace\", \"state\", \"method\", \"action\", \"onSubmit\", \"relative\", \"preventScrollReset\", \"unstable_viewTransition\"];\nfunction createBrowserRouter(routes, opts) {\n  return createRouter({\n    basename: opts == null ? void 0 : opts.basename,\n    future: _extends({}, opts == null ? void 0 : opts.future, {\n      v7_prependBasename: true\n    }),\n    history: createBrowserHistory({\n      window: opts == null ? void 0 : opts.window\n    }),\n    hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),\n    routes,\n    mapRouteProperties: UNSAFE_mapRouteProperties,\n    window: opts == null ? void 0 : opts.window\n  }).initialize();\n}\nfunction createHashRouter(routes, opts) {\n  return createRouter({\n    basename: opts == null ? void 0 : opts.basename,\n    future: _extends({}, opts == null ? void 0 : opts.future, {\n      v7_prependBasename: true\n    }),\n    history: createHashHistory({\n      window: opts == null ? void 0 : opts.window\n    }),\n    hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),\n    routes,\n    mapRouteProperties: UNSAFE_mapRouteProperties,\n    window: opts == null ? void 0 : opts.window\n  }).initialize();\n}\nfunction parseHydrationData() {\n  var _window;\n  let state = (_window = window) == null ? void 0 : _window.__staticRouterHydrationData;\n  if (state && state.errors) {\n    state = _extends({}, state, {\n      errors: deserializeErrors(state.errors)\n    });\n  }\n  return state;\n}\nfunction deserializeErrors(errors) {\n  if (!errors) return null;\n  let entries = Object.entries(errors);\n  let serialized = {};\n  for (let [key, val] of entries) {\n    // Hey you!  If you change this, please change the corresponding logic in\n    // serializeErrors in react-router-dom/server.tsx :)\n    if (val && val.__type === \"RouteErrorResponse\") {\n      serialized[key] = new UNSAFE_ErrorResponseImpl(val.status, val.statusText, val.data, val.internal === true);\n    } else if (val && val.__type === \"Error\") {\n      // Attempt to reconstruct the right type of Error (i.e., ReferenceError)\n      if (val.__subType) {\n        let ErrorConstructor = window[val.__subType];\n        if (typeof ErrorConstructor === \"function\") {\n          try {\n            // @ts-expect-error\n            let error = new ErrorConstructor(val.message);\n            // Wipe away the client-side stack trace.  Nothing to fill it in with\n            // because we don't serialize SSR stack traces for security reasons\n            error.stack = \"\";\n            serialized[key] = error;\n          } catch (e) {\n            // no-op - fall through and create a normal Error\n          }\n        }\n      }\n      if (serialized[key] == null) {\n        let error = new Error(val.message);\n        // Wipe away the client-side stack trace.  Nothing to fill it in with\n        // because we don't serialize SSR stack traces for security reasons\n        error.stack = \"\";\n        serialized[key] = error;\n      }\n    } else {\n      serialized[key] = val;\n    }\n  }\n  return serialized;\n}\nconst ViewTransitionContext = /*#__PURE__*/React.createContext({\n  isTransitioning: false\n});\nif (process.env.NODE_ENV !== \"production\") {\n  ViewTransitionContext.displayName = \"ViewTransition\";\n}\nconst FetchersContext = /*#__PURE__*/React.createContext(new Map());\nif (process.env.NODE_ENV !== \"production\") {\n  FetchersContext.displayName = \"Fetchers\";\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Components\n////////////////////////////////////////////////////////////////////////////////\n/**\n  Webpack + React 17 fails to compile on any of the following because webpack\n  complains that `startTransition` doesn't exist in `React`:\n  * import { startTransition } from \"react\"\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React.startTransition(() => setState()) : setState()\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React[\"startTransition\"](() => setState()) : setState()\n\n  Moving it to a constant such as the following solves the Webpack/React 17 issue:\n  * import * as React from from \"react\";\n    const START_TRANSITION = \"startTransition\";\n    START_TRANSITION in React ? React[START_TRANSITION](() => setState()) : setState()\n\n  However, that introduces webpack/terser minification issues in production builds\n  in React 18 where minification/obfuscation ends up removing the call of\n  React.startTransition entirely from the first half of the ternary.  Grabbing\n  this exported reference once up front resolves that issue.\n\n  See https://github.com/remix-run/react-router/issues/10579\n*/\nconst START_TRANSITION = \"startTransition\";\nconst startTransitionImpl = React[START_TRANSITION];\nfunction startTransitionSafe(cb) {\n  if (startTransitionImpl) {\n    startTransitionImpl(cb);\n  } else {\n    cb();\n  }\n}\nclass Deferred {\n  constructor() {\n    this.status = \"pending\";\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = value => {\n        if (this.status === \"pending\") {\n          this.status = \"resolved\";\n          resolve(value);\n        }\n      };\n      this.reject = reason => {\n        if (this.status === \"pending\") {\n          this.status = \"rejected\";\n          reject(reason);\n        }\n      };\n    });\n  }\n}\n/**\n * Given a Remix Router instance, render the appropriate UI\n */\nfunction RouterProvider(_ref) {\n  let {\n    fallbackElement,\n    router,\n    future\n  } = _ref;\n  let [state, setStateImpl] = React.useState(router.state);\n  let [pendingState, setPendingState] = React.useState();\n  let [vtContext, setVtContext] = React.useState({\n    isTransitioning: false\n  });\n  let [renderDfd, setRenderDfd] = React.useState();\n  let [transition, setTransition] = React.useState();\n  let [interruption, setInterruption] = React.useState();\n  let fetcherData = React.useRef(new Map());\n  let {\n    v7_startTransition\n  } = future || {};\n  let optInStartTransition = React.useCallback(cb => {\n    if (v7_startTransition) {\n      startTransitionSafe(cb);\n    } else {\n      cb();\n    }\n  }, [v7_startTransition]);\n  let setState = React.useCallback((newState, _ref2) => {\n    let {\n      deletedFetchers,\n      unstable_viewTransitionOpts: viewTransitionOpts\n    } = _ref2;\n    deletedFetchers.forEach(key => fetcherData.current.delete(key));\n    newState.fetchers.forEach((fetcher, key) => {\n      if (fetcher.data !== undefined) {\n        fetcherData.current.set(key, fetcher.data);\n      }\n    });\n    if (!viewTransitionOpts || router.window == null || typeof router.window.document.startViewTransition !== \"function\") {\n      // Mid-navigation state update, or startViewTransition isn't available\n      optInStartTransition(() => setStateImpl(newState));\n    } else if (transition && renderDfd) {\n      // Interrupting an in-progress transition, cancel and let everything flush\n      // out, and then kick off a new transition from the interruption state\n      renderDfd.resolve();\n      transition.skipTransition();\n      setInterruption({\n        state: newState,\n        currentLocation: viewTransitionOpts.currentLocation,\n        nextLocation: viewTransitionOpts.nextLocation\n      });\n    } else {\n      // Completed navigation update with opted-in view transitions, let 'er rip\n      setPendingState(newState);\n      setVtContext({\n        isTransitioning: true,\n        currentLocation: viewTransitionOpts.currentLocation,\n        nextLocation: viewTransitionOpts.nextLocation\n      });\n    }\n  }, [router.window, transition, renderDfd, fetcherData, optInStartTransition]);\n  // Need to use a layout effect here so we are subscribed early enough to\n  // pick up on any render-driven redirects/navigations (useEffect/<Navigate>)\n  React.useLayoutEffect(() => router.subscribe(setState), [router, setState]);\n  // When we start a view transition, create a Deferred we can use for the\n  // eventual \"completed\" render\n  React.useEffect(() => {\n    if (vtContext.isTransitioning) {\n      setRenderDfd(new Deferred());\n    }\n  }, [vtContext.isTransitioning]);\n  // Once the deferred is created, kick off startViewTransition() to update the\n  // DOM and then wait on the Deferred to resolve (indicating the DOM update has\n  // happened)\n  React.useEffect(() => {\n    if (renderDfd && pendingState && router.window) {\n      let newState = pendingState;\n      let renderPromise = renderDfd.promise;\n      let transition = router.window.document.startViewTransition(async () => {\n        optInStartTransition(() => setStateImpl(newState));\n        await renderPromise;\n      });\n      transition.finished.finally(() => {\n        setRenderDfd(undefined);\n        setTransition(undefined);\n        setPendingState(undefined);\n        setVtContext({\n          isTransitioning: false\n        });\n      });\n      setTransition(transition);\n    }\n  }, [optInStartTransition, pendingState, renderDfd, router.window]);\n  // When the new location finally renders and is committed to the DOM, this\n  // effect will run to resolve the transition\n  React.useEffect(() => {\n    if (renderDfd && pendingState && state.location.key === pendingState.location.key) {\n      renderDfd.resolve();\n    }\n  }, [renderDfd, transition, state.location, pendingState]);\n  // If we get interrupted with a new navigation during a transition, we skip\n  // the active transition, let it cleanup, then kick it off again here\n  React.useEffect(() => {\n    if (!vtContext.isTransitioning && interruption) {\n      setPendingState(interruption.state);\n      setVtContext({\n        isTransitioning: true,\n        currentLocation: interruption.currentLocation,\n        nextLocation: interruption.nextLocation\n      });\n      setInterruption(undefined);\n    }\n  }, [vtContext.isTransitioning, interruption]);\n  let navigator = React.useMemo(() => {\n    return {\n      createHref: router.createHref,\n      encodeLocation: router.encodeLocation,\n      go: n => router.navigate(n),\n      push: (to, state, opts) => router.navigate(to, {\n        state,\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n      }),\n      replace: (to, state, opts) => router.navigate(to, {\n        replace: true,\n        state,\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n      })\n    };\n  }, [router]);\n  let basename = router.basename || \"/\";\n  let dataRouterContext = React.useMemo(() => ({\n    router,\n    navigator,\n    static: false,\n    basename\n  }), [router, navigator, basename]);\n  // The fragment and {null} here are important!  We need them to keep React 18's\n  // useId happy when we are server-rendering since we may have a <script> here\n  // containing the hydrated server-side staticContext (from StaticRouterProvider).\n  // useId relies on the component tree structure to generate deterministic id's\n  // so we need to ensure it remains the same on the client even though\n  // we don't need the <script> tag\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(UNSAFE_DataRouterContext.Provider, {\n    value: dataRouterContext\n  }, /*#__PURE__*/React.createElement(UNSAFE_DataRouterStateContext.Provider, {\n    value: state\n  }, /*#__PURE__*/React.createElement(FetchersContext.Provider, {\n    value: fetcherData.current\n  }, /*#__PURE__*/React.createElement(ViewTransitionContext.Provider, {\n    value: vtContext\n  }, /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    location: state.location,\n    navigationType: state.historyAction,\n    navigator: navigator\n  }, state.initialized ? /*#__PURE__*/React.createElement(DataRoutes, {\n    routes: router.routes,\n    state: state\n  }) : fallbackElement))))), null);\n}\nfunction DataRoutes(_ref3) {\n  let {\n    routes,\n    state\n  } = _ref3;\n  return UNSAFE_useRoutesImpl(routes, undefined, state);\n}\n/**\n * A `<Router>` for use in web browsers. Provides the cleanest URLs.\n */\nfunction BrowserRouter(_ref4) {\n  let {\n    basename,\n    children,\n    future,\n    window\n  } = _ref4;\n  let historyRef = React.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = createBrowserHistory({\n      window,\n      v5Compat: true\n    });\n  }\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history\n  });\n}\n/**\n * A `<Router>` for use in web browsers. Stores the location in the hash\n * portion of the URL so it is not sent to the server.\n */\nfunction HashRouter(_ref5) {\n  let {\n    basename,\n    children,\n    future,\n    window\n  } = _ref5;\n  let historyRef = React.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = createHashHistory({\n      window,\n      v5Compat: true\n    });\n  }\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history\n  });\n}\n/**\n * A `<Router>` that accepts a pre-instantiated history object. It's important\n * to note that using your own history object is highly discouraged and may add\n * two versions of the history library to your bundles unless you use the same\n * version of the history library that React Router uses internally.\n */\nfunction HistoryRouter(_ref6) {\n  let {\n    basename,\n    children,\n    future,\n    history\n  } = _ref6;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history\n  });\n}\nif (process.env.NODE_ENV !== \"production\") {\n  HistoryRouter.displayName = \"unstable_HistoryRouter\";\n}\nconst isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n/**\n * The public API for rendering a history-aware `<a>`.\n */\nconst Link = /*#__PURE__*/React.forwardRef(function LinkWithRef(_ref7, ref) {\n  let {\n      onClick,\n      relative,\n      reloadDocument,\n      replace,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      unstable_viewTransition\n    } = _ref7,\n    rest = _objectWithoutPropertiesLoose(_ref7, _excluded);\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  // Rendered into <a href> for absolute URLs\n  let absoluteHref;\n  let isExternal = false;\n  if (typeof to === \"string\" && ABSOLUTE_URL_REGEX.test(to)) {\n    // Render the absolute href server- and client-side\n    absoluteHref = to;\n    // Only check for external origins client-side\n    if (isBrowser) {\n      try {\n        let currentUrl = new URL(window.location.href);\n        let targetUrl = to.startsWith(\"//\") ? new URL(currentUrl.protocol + to) : new URL(to);\n        let path = stripBasename(targetUrl.pathname, basename);\n        if (targetUrl.origin === currentUrl.origin && path != null) {\n          // Strip the protocol/origin/basename for same-origin absolute URLs\n          to = path + targetUrl.search + targetUrl.hash;\n        } else {\n          isExternal = true;\n        }\n      } catch (e) {\n        // We can't do external URL detection without a valid URL\n        process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"<Link to=\\\"\" + to + \"\\\"> contains an invalid URL which will probably break \" + \"when clicked - please update to a valid URL path.\") : void 0;\n      }\n    }\n  }\n  // Rendered into <a href> for relative URLs\n  let href = useHref(to, {\n    relative\n  });\n  let internalOnClick = useLinkClickHandler(to, {\n    replace,\n    state,\n    target,\n    preventScrollReset,\n    relative,\n    unstable_viewTransition\n  });\n  function handleClick(event) {\n    if (onClick) onClick(event);\n    if (!event.defaultPrevented) {\n      internalOnClick(event);\n    }\n  }\n  return (\n    /*#__PURE__*/\n    // eslint-disable-next-line jsx-a11y/anchor-has-content\n    React.createElement(\"a\", _extends({}, rest, {\n      href: absoluteHref || href,\n      onClick: isExternal || reloadDocument ? onClick : handleClick,\n      ref: ref,\n      target: target\n    }))\n  );\n});\nif (process.env.NODE_ENV !== \"production\") {\n  Link.displayName = \"Link\";\n}\n/**\n * A `<Link>` wrapper that knows if it's \"active\" or not.\n */\nconst NavLink = /*#__PURE__*/React.forwardRef(function NavLinkWithRef(_ref8, ref) {\n  let {\n      \"aria-current\": ariaCurrentProp = \"page\",\n      caseSensitive = false,\n      className: classNameProp = \"\",\n      end = false,\n      style: styleProp,\n      to,\n      unstable_viewTransition,\n      children\n    } = _ref8,\n    rest = _objectWithoutPropertiesLoose(_ref8, _excluded2);\n  let path = useResolvedPath(to, {\n    relative: rest.relative\n  });\n  let location = useLocation();\n  let routerState = React.useContext(UNSAFE_DataRouterStateContext);\n  let {\n    navigator\n  } = React.useContext(UNSAFE_NavigationContext);\n  let isTransitioning = routerState != null &&\n  // Conditional usage is OK here because the usage of a data router is static\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  useViewTransitionState(path) && unstable_viewTransition === true;\n  let toPathname = navigator.encodeLocation ? navigator.encodeLocation(path).pathname : path.pathname;\n  let locationPathname = location.pathname;\n  let nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;\n  if (!caseSensitive) {\n    locationPathname = locationPathname.toLowerCase();\n    nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;\n    toPathname = toPathname.toLowerCase();\n  }\n  let isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(toPathname.length) === \"/\";\n  let isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === \"/\");\n  let renderProps = {\n    isActive,\n    isPending,\n    isTransitioning\n  };\n  let ariaCurrent = isActive ? ariaCurrentProp : undefined;\n  let className;\n  if (typeof classNameProp === \"function\") {\n    className = classNameProp(renderProps);\n  } else {\n    // If the className prop is not a function, we use a default `active`\n    // class for <NavLink />s that are active. In v5 `active` was the default\n    // value for `activeClassName`, but we are removing that API and can still\n    // use the old default behavior for a cleaner upgrade path and keep the\n    // simple styling rules working as they currently do.\n    className = [classNameProp, isActive ? \"active\" : null, isPending ? \"pending\" : null, isTransitioning ? \"transitioning\" : null].filter(Boolean).join(\" \");\n  }\n  let style = typeof styleProp === \"function\" ? styleProp(renderProps) : styleProp;\n  return /*#__PURE__*/React.createElement(Link, _extends({}, rest, {\n    \"aria-current\": ariaCurrent,\n    className: className,\n    ref: ref,\n    style: style,\n    to: to,\n    unstable_viewTransition: unstable_viewTransition\n  }), typeof children === \"function\" ? children(renderProps) : children);\n});\nif (process.env.NODE_ENV !== \"production\") {\n  NavLink.displayName = \"NavLink\";\n}\n/**\n * A `@remix-run/router`-aware `<form>`. It behaves like a normal form except\n * that the interaction with the server is with `fetch` instead of new document\n * requests, allowing components to add nicer UX to the page as the form is\n * submitted and returns with data.\n */\nconst Form = /*#__PURE__*/React.forwardRef((_ref9, forwardedRef) => {\n  let {\n      fetcherKey,\n      navigate,\n      reloadDocument,\n      replace,\n      state,\n      method = defaultMethod,\n      action,\n      onSubmit,\n      relative,\n      preventScrollReset,\n      unstable_viewTransition\n    } = _ref9,\n    props = _objectWithoutPropertiesLoose(_ref9, _excluded3);\n  let submit = useSubmit();\n  let formAction = useFormAction(action, {\n    relative\n  });\n  let formMethod = method.toLowerCase() === \"get\" ? \"get\" : \"post\";\n  let submitHandler = event => {\n    onSubmit && onSubmit(event);\n    if (event.defaultPrevented) return;\n    event.preventDefault();\n    let submitter = event.nativeEvent.submitter;\n    let submitMethod = (submitter == null ? void 0 : submitter.getAttribute(\"formmethod\")) || method;\n    submit(submitter || event.currentTarget, {\n      fetcherKey,\n      method: submitMethod,\n      navigate,\n      replace,\n      state,\n      relative,\n      preventScrollReset,\n      unstable_viewTransition\n    });\n  };\n  return /*#__PURE__*/React.createElement(\"form\", _extends({\n    ref: forwardedRef,\n    method: formMethod,\n    action: formAction,\n    onSubmit: reloadDocument ? onSubmit : submitHandler\n  }, props));\n});\nif (process.env.NODE_ENV !== \"production\") {\n  Form.displayName = \"Form\";\n}\n/**\n * This component will emulate the browser's scroll restoration on location\n * changes.\n */\nfunction ScrollRestoration(_ref10) {\n  let {\n    getKey,\n    storageKey\n  } = _ref10;\n  useScrollRestoration({\n    getKey,\n    storageKey\n  });\n  return null;\n}\nif (process.env.NODE_ENV !== \"production\") {\n  ScrollRestoration.displayName = \"ScrollRestoration\";\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Hooks\n////////////////////////////////////////////////////////////////////////////////\nvar DataRouterHook;\n(function (DataRouterHook) {\n  DataRouterHook[\"UseScrollRestoration\"] = \"useScrollRestoration\";\n  DataRouterHook[\"UseSubmit\"] = \"useSubmit\";\n  DataRouterHook[\"UseSubmitFetcher\"] = \"useSubmitFetcher\";\n  DataRouterHook[\"UseFetcher\"] = \"useFetcher\";\n  DataRouterHook[\"useViewTransitionState\"] = \"useViewTransitionState\";\n})(DataRouterHook || (DataRouterHook = {}));\nvar DataRouterStateHook;\n(function (DataRouterStateHook) {\n  DataRouterStateHook[\"UseFetcher\"] = \"useFetcher\";\n  DataRouterStateHook[\"UseFetchers\"] = \"useFetchers\";\n  DataRouterStateHook[\"UseScrollRestoration\"] = \"useScrollRestoration\";\n})(DataRouterStateHook || (DataRouterStateHook = {}));\n// Internal hooks\nfunction getDataRouterConsoleError(hookName) {\n  return hookName + \" must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.\";\n}\nfunction useDataRouterContext(hookName) {\n  let ctx = React.useContext(UNSAFE_DataRouterContext);\n  !ctx ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return ctx;\n}\nfunction useDataRouterState(hookName) {\n  let state = React.useContext(UNSAFE_DataRouterStateContext);\n  !state ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return state;\n}\n// External hooks\n/**\n * Handles the click behavior for router `<Link>` components. This is useful if\n * you need to create custom `<Link>` components with the same click behavior we\n * use in our exported `<Link>`.\n */\nfunction useLinkClickHandler(to, _temp) {\n  let {\n    target,\n    replace: replaceProp,\n    state,\n    preventScrollReset,\n    relative,\n    unstable_viewTransition\n  } = _temp === void 0 ? {} : _temp;\n  let navigate = useNavigate();\n  let location = useLocation();\n  let path = useResolvedPath(to, {\n    relative\n  });\n  return React.useCallback(event => {\n    if (shouldProcessLinkClick(event, target)) {\n      event.preventDefault();\n      // If the URL hasn't changed, a regular <a> will do a replace instead of\n      // a push, so do the same here unless the replace prop is explicitly set\n      let replace = replaceProp !== undefined ? replaceProp : createPath(location) === createPath(path);\n      navigate(to, {\n        replace,\n        state,\n        preventScrollReset,\n        relative,\n        unstable_viewTransition\n      });\n    }\n  }, [location, navigate, path, replaceProp, state, target, to, preventScrollReset, relative, unstable_viewTransition]);\n}\n/**\n * A convenient wrapper for reading and writing search parameters via the\n * URLSearchParams interface.\n */\nfunction useSearchParams(defaultInit) {\n  process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(typeof URLSearchParams !== \"undefined\", \"You cannot use the `useSearchParams` hook in a browser that does not \" + \"support the URLSearchParams API. If you need to support Internet \" + \"Explorer 11, we recommend you load a polyfill such as \" + \"https://github.com/ungap/url-search-params\\n\\n\" + \"If you're unsure how to load polyfills, we recommend you check out \" + \"https://polyfill.io/v3/ which provides some recommendations about how \" + \"to load polyfills only for users that need them, instead of for every \" + \"user.\") : void 0;\n  let defaultSearchParamsRef = React.useRef(createSearchParams(defaultInit));\n  let hasSetSearchParamsRef = React.useRef(false);\n  let location = useLocation();\n  let searchParams = React.useMemo(() =>\n  // Only merge in the defaults if we haven't yet called setSearchParams.\n  // Once we call that we want those to take precedence, otherwise you can't\n  // remove a param with setSearchParams({}) if it has an initial value\n  getSearchParamsForLocation(location.search, hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current), [location.search]);\n  let navigate = useNavigate();\n  let setSearchParams = React.useCallback((nextInit, navigateOptions) => {\n    const newSearchParams = createSearchParams(typeof nextInit === \"function\" ? nextInit(searchParams) : nextInit);\n    hasSetSearchParamsRef.current = true;\n    navigate(\"?\" + newSearchParams, navigateOptions);\n  }, [navigate, searchParams]);\n  return [searchParams, setSearchParams];\n}\nfunction validateClientSideSubmission() {\n  if (typeof document === \"undefined\") {\n    throw new Error(\"You are calling submit during the server render. \" + \"Try calling submit within a `useEffect` or callback instead.\");\n  }\n}\nlet fetcherId = 0;\nlet getUniqueFetcherId = () => \"__\" + String(++fetcherId) + \"__\";\n/**\n * Returns a function that may be used to programmatically submit a form (or\n * some arbitrary data) to the server.\n */\nfunction useSubmit() {\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseSubmit);\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let currentRouteId = UNSAFE_useRouteId();\n  return React.useCallback(function (target, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    validateClientSideSubmission();\n    let {\n      action,\n      method,\n      encType,\n      formData,\n      body\n    } = getFormSubmissionInfo(target, basename);\n    if (options.navigate === false) {\n      let key = options.fetcherKey || getUniqueFetcherId();\n      router.fetch(key, currentRouteId, options.action || action, {\n        preventScrollReset: options.preventScrollReset,\n        formData,\n        body,\n        formMethod: options.method || method,\n        formEncType: options.encType || encType\n      });\n    } else {\n      router.navigate(options.action || action, {\n        preventScrollReset: options.preventScrollReset,\n        formData,\n        body,\n        formMethod: options.method || method,\n        formEncType: options.encType || encType,\n        replace: options.replace,\n        state: options.state,\n        fromRouteId: currentRouteId,\n        unstable_viewTransition: options.unstable_viewTransition\n      });\n    }\n  }, [router, basename, currentRouteId]);\n}\n// v7: Eventually we should deprecate this entirely in favor of using the\n// router method directly?\nfunction useFormAction(action, _temp2) {\n  let {\n    relative\n  } = _temp2 === void 0 ? {} : _temp2;\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let routeContext = React.useContext(UNSAFE_RouteContext);\n  !routeContext ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFormAction must be used inside a RouteContext\") : UNSAFE_invariant(false) : void 0;\n  let [match] = routeContext.matches.slice(-1);\n  // Shallow clone path so we can modify it below, otherwise we modify the\n  // object referenced by useMemo inside useResolvedPath\n  let path = _extends({}, useResolvedPath(action ? action : \".\", {\n    relative\n  }));\n  // Previously we set the default action to \".\". The problem with this is that\n  // `useResolvedPath(\".\")` excludes search params of the resolved URL. This is\n  // the intended behavior of when \".\" is specifically provided as\n  // the form action, but inconsistent w/ browsers when the action is omitted.\n  // https://github.com/remix-run/remix/issues/927\n  let location = useLocation();\n  if (action == null) {\n    // Safe to write to this directly here since if action was undefined, we\n    // would have called useResolvedPath(\".\") which will never include a search\n    path.search = location.search;\n    // When grabbing search params from the URL, remove the automatically\n    // inserted ?index param so we match the useResolvedPath search behavior\n    // which would not include ?index\n    if (match.route.index) {\n      let params = new URLSearchParams(path.search);\n      params.delete(\"index\");\n      path.search = params.toString() ? \"?\" + params.toString() : \"\";\n    }\n  }\n  if ((!action || action === \".\") && match.route.index) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  }\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the form action.  If this is a root navigation, then just use\n  // the raw basename which allows the basename to have full control over the\n  // presence of a trailing slash on root actions\n  if (basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\n// TODO: (v7) Change the useFetcher generic default from `any` to `unknown`\n/**\n * Interacts with route loaders and actions without causing a navigation. Great\n * for any interaction that stays on the same page.\n */\nfunction useFetcher(_temp3) {\n  var _route$matches;\n  let {\n    key\n  } = _temp3 === void 0 ? {} : _temp3;\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseFetcher);\n  let state = useDataRouterState(DataRouterStateHook.UseFetcher);\n  let fetcherData = React.useContext(FetchersContext);\n  let route = React.useContext(UNSAFE_RouteContext);\n  let routeId = (_route$matches = route.matches[route.matches.length - 1]) == null ? void 0 : _route$matches.route.id;\n  !fetcherData ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFetcher must be used inside a FetchersContext\") : UNSAFE_invariant(false) : void 0;\n  !route ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFetcher must be used inside a RouteContext\") : UNSAFE_invariant(false) : void 0;\n  !(routeId != null) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFetcher can only be used on routes that contain a unique \\\"id\\\"\") : UNSAFE_invariant(false) : void 0;\n  // Fetcher key handling\n  let [fetcherKey, setFetcherKey] = React.useState(key || \"\");\n  if (!fetcherKey) {\n    setFetcherKey(getUniqueFetcherId());\n  }\n  // Registration/cleanup\n  React.useEffect(() => {\n    router.getFetcher(fetcherKey);\n    return () => {\n      // Tell the router we've unmounted - if v7_fetcherPersist is enabled this\n      // will not delete immediately but instead queue up a delete after the\n      // fetcher returns to an `idle` state\n      router.deleteFetcher(fetcherKey);\n    };\n  }, [router, fetcherKey]);\n  // Fetcher additions\n  let load = React.useCallback(href => {\n    !routeId ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"No routeId available for fetcher.load()\") : UNSAFE_invariant(false) : void 0;\n    router.fetch(fetcherKey, routeId, href);\n  }, [fetcherKey, routeId, router]);\n  let submitImpl = useSubmit();\n  let submit = React.useCallback((target, opts) => {\n    submitImpl(target, _extends({}, opts, {\n      navigate: false,\n      fetcherKey\n    }));\n  }, [fetcherKey, submitImpl]);\n  let FetcherForm = React.useMemo(() => {\n    let FetcherForm = /*#__PURE__*/React.forwardRef((props, ref) => {\n      return /*#__PURE__*/React.createElement(Form, _extends({}, props, {\n        navigate: false,\n        fetcherKey: fetcherKey,\n        ref: ref\n      }));\n    });\n    if (process.env.NODE_ENV !== \"production\") {\n      FetcherForm.displayName = \"fetcher.Form\";\n    }\n    return FetcherForm;\n  }, [fetcherKey]);\n  // Exposed FetcherWithComponents\n  let fetcher = state.fetchers.get(fetcherKey) || IDLE_FETCHER;\n  let data = fetcherData.get(fetcherKey);\n  let fetcherWithComponents = React.useMemo(() => _extends({\n    Form: FetcherForm,\n    submit,\n    load\n  }, fetcher, {\n    data\n  }), [FetcherForm, submit, load, fetcher, data]);\n  return fetcherWithComponents;\n}\n/**\n * Provides all fetchers currently on the page. Useful for layouts and parent\n * routes that need to provide pending/optimistic UI regarding the fetch.\n */\nfunction useFetchers() {\n  let state = useDataRouterState(DataRouterStateHook.UseFetchers);\n  return Array.from(state.fetchers.entries()).map(_ref11 => {\n    let [key, fetcher] = _ref11;\n    return _extends({}, fetcher, {\n      key\n    });\n  });\n}\nconst SCROLL_RESTORATION_STORAGE_KEY = \"react-router-scroll-positions\";\nlet savedScrollPositions = {};\n/**\n * When rendered inside a RouterProvider, will restore scroll positions on navigations\n */\nfunction useScrollRestoration(_temp4) {\n  let {\n    getKey,\n    storageKey\n  } = _temp4 === void 0 ? {} : _temp4;\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseScrollRestoration);\n  let {\n    restoreScrollPosition,\n    preventScrollReset\n  } = useDataRouterState(DataRouterStateHook.UseScrollRestoration);\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let location = useLocation();\n  let matches = useMatches();\n  let navigation = useNavigation();\n  // Trigger manual scroll restoration while we're active\n  React.useEffect(() => {\n    window.history.scrollRestoration = \"manual\";\n    return () => {\n      window.history.scrollRestoration = \"auto\";\n    };\n  }, []);\n  // Save positions on pagehide\n  usePageHide(React.useCallback(() => {\n    if (navigation.state === \"idle\") {\n      let key = (getKey ? getKey(location, matches) : null) || location.key;\n      savedScrollPositions[key] = window.scrollY;\n    }\n    try {\n      sessionStorage.setItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY, JSON.stringify(savedScrollPositions));\n    } catch (error) {\n      process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"Failed to save scroll positions in sessionStorage, <ScrollRestoration /> will not work properly (\" + error + \").\") : void 0;\n    }\n    window.history.scrollRestoration = \"auto\";\n  }, [storageKey, getKey, navigation.state, location, matches]));\n  // Read in any saved scroll locations\n  if (typeof document !== \"undefined\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      try {\n        let sessionPositions = sessionStorage.getItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY);\n        if (sessionPositions) {\n          savedScrollPositions = JSON.parse(sessionPositions);\n        }\n      } catch (e) {\n        // no-op, use default empty object\n      }\n    }, [storageKey]);\n    // Enable scroll restoration in the router\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      let getKeyWithoutBasename = getKey && basename !== \"/\" ? (location, matches) => getKey( // Strip the basename to match useLocation()\n      _extends({}, location, {\n        pathname: stripBasename(location.pathname, basename) || location.pathname\n      }), matches) : getKey;\n      let disableScrollRestoration = router == null ? void 0 : router.enableScrollRestoration(savedScrollPositions, () => window.scrollY, getKeyWithoutBasename);\n      return () => disableScrollRestoration && disableScrollRestoration();\n    }, [router, basename, getKey]);\n    // Restore scrolling when state.restoreScrollPosition changes\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      // Explicit false means don't do anything (used for submissions)\n      if (restoreScrollPosition === false) {\n        return;\n      }\n      // been here before, scroll to it\n      if (typeof restoreScrollPosition === \"number\") {\n        window.scrollTo(0, restoreScrollPosition);\n        return;\n      }\n      // try to scroll to the hash\n      if (location.hash) {\n        let el = document.getElementById(decodeURIComponent(location.hash.slice(1)));\n        if (el) {\n          el.scrollIntoView();\n          return;\n        }\n      }\n      // Don't reset if this navigation opted out\n      if (preventScrollReset === true) {\n        return;\n      }\n      // otherwise go to the top on new locations\n      window.scrollTo(0, 0);\n    }, [location, restoreScrollPosition, preventScrollReset]);\n  }\n}\n/**\n * Setup a callback to be fired on the window's `beforeunload` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nfunction useBeforeUnload(callback, options) {\n  let {\n    capture\n  } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? {\n      capture\n    } : undefined;\n    window.addEventListener(\"beforeunload\", callback, opts);\n    return () => {\n      window.removeEventListener(\"beforeunload\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n/**\n * Setup a callback to be fired on the window's `pagehide` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.  This event is better supported than beforeunload across browsers.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nfunction usePageHide(callback, options) {\n  let {\n    capture\n  } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? {\n      capture\n    } : undefined;\n    window.addEventListener(\"pagehide\", callback, opts);\n    return () => {\n      window.removeEventListener(\"pagehide\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n/**\n * Wrapper around useBlocker to show a window.confirm prompt to users instead\n * of building a custom UI with useBlocker.\n *\n * Warning: This has *a lot of rough edges* and behaves very differently (and\n * very incorrectly in some cases) across browsers if user click addition\n * back/forward navigations while the confirm is open.  Use at your own risk.\n */\nfunction usePrompt(_ref12) {\n  let {\n    when,\n    message\n  } = _ref12;\n  let blocker = unstable_useBlocker(when);\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\") {\n      let proceed = window.confirm(message);\n      if (proceed) {\n        // This timeout is needed to avoid a weird \"race\" on POP navigations\n        // between the `window.history` revert navigation and the result of\n        // `window.confirm`\n        setTimeout(blocker.proceed, 0);\n      } else {\n        blocker.reset();\n      }\n    }\n  }, [blocker, message]);\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\" && !when) {\n      blocker.reset();\n    }\n  }, [blocker, when]);\n}\n/**\n * Return a boolean indicating if there is an active view transition to the\n * given href.  You can use this value to render CSS classes or viewTransitionName\n * styles onto your elements\n *\n * @param href The destination href\n * @param [opts.relative] Relative routing type (\"route\" | \"path\")\n */\nfunction useViewTransitionState(to, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  let vtContext = React.useContext(ViewTransitionContext);\n  !(vtContext != null) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"`unstable_useViewTransitionState` must be used within `react-router-dom`'s `RouterProvider`.  \" + \"Did you accidentally import `RouterProvider` from `react-router`?\") : UNSAFE_invariant(false) : void 0;\n  let {\n    basename\n  } = useDataRouterContext(DataRouterHook.useViewTransitionState);\n  let path = useResolvedPath(to, {\n    relative: opts.relative\n  });\n  if (!vtContext.isTransitioning) {\n    return false;\n  }\n  let currentPath = stripBasename(vtContext.currentLocation.pathname, basename) || vtContext.currentLocation.pathname;\n  let nextPath = stripBasename(vtContext.nextLocation.pathname, basename) || vtContext.nextLocation.pathname;\n  // Transition is active if we're going to or coming from the indicated\n  // destination.  This ensures that other PUSH navigations that reverse\n  // an indicated transition apply.  I.e., on the list view you have:\n  //\n  //   <NavLink to=\"/details/1\" unstable_viewTransition>\n  //\n  // If you click the breadcrumb back to the list view:\n  //\n  //   <NavLink to=\"/list\" unstable_viewTransition>\n  //\n  // We should apply the transition because it's indicated as active going\n  // from /list -> /details/1 and therefore should be active on the reverse\n  // (even though this isn't strictly a POP reverse)\n  return matchPath(path.pathname, nextPath) != null || matchPath(path.pathname, currentPath) != null;\n}\n//#endregion\n\nexport { BrowserRouter, Form, HashRouter, Link, NavLink, RouterProvider, ScrollRestoration, FetchersContext as UNSAFE_FetchersContext, ViewTransitionContext as UNSAFE_ViewTransitionContext, useScrollRestoration as UNSAFE_useScrollRestoration, createBrowserRouter, createHashRouter, createSearchParams, HistoryRouter as unstable_HistoryRouter, usePrompt as unstable_usePrompt, useViewTransitionState as unstable_useViewTransitionState, useBeforeUnload, useFetcher, useFetchers, useFormAction, useLinkClickHandler, useSearchParams, useSubmit };\n//# sourceMappingURL=index.js.map\n","/**\n * Copyright 2024-2025 NetCracker Technology Corporation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { FC } from 'react'\nimport React, { memo, useMemo } from 'react'\nimport { Box, Link, Typography } from '@mui/material'\nimport { NavLink } from 'react-router-dom'\nimport type { Path } from '@remix-run/router'\nimport type { Operation } from '../../entities/operations'\nimport { isGraphQlOperation, isRestOperation } from '../../entities/operations'\nimport { CustomChip } from '../CustomChip'\nimport { TextWithOverflowTooltip } from '../TextWithOverflowTooltip'\n\nexport type OperationTitleWithMetaProps = {\n  operation: Operation\n  link?: Partial<Path>\n  onLinkClick?: () => void\n  badgeText?: string\n  openLinkInNewTab?: boolean\n  onlyTitle?: boolean\n}\n\n// First Order Component //\nexport const OperationTitleWithMeta: FC<OperationTitleWithMetaProps> = memo<OperationTitleWithMetaProps>((\n  {\n    operation,\n    link,\n    onLinkClick,\n    badgeText,\n    openLinkInNewTab = false,\n    onlyTitle = false,\n  }) => {\n\n  const { title, subtitle, type } = useMemo(() => {\n    if (isRestOperation(operation)) {\n      return {\n        title: operation.title,\n        subtitle: operation.path,\n        type: operation.method,\n      }\n    } else if (isGraphQlOperation(operation)) {\n      return {\n        title: operation.title,\n        subtitle: operation.method,\n        type: operation.type,\n      }\n    } else {\n      throw new Error('Operation must be either a REST or GraphQL operation')\n    }\n  }, [operation])\n\n  const titleNode = link\n      ? <Typography noWrap variant=\"subtitle1\">\n      <Link\n        component={NavLink}\n        to={link}\n        target={openLinkInNewTab ? '_blank' : '_self'}\n        onClick={(event) => {\n          event.stopPropagation()\n          onLinkClick?.()\n        }}\n      >\n        {title}\n       </Link>\n    </Typography>\n    : <Typography noWrap variant=\"inherit\">{title}</Typography>\n    \n\n  return (\n    <Box display=\"flex\" flexDirection=\"column\" width=\"100%\">\n      <Box\n        display=\"flex\"\n        alignItems=\"center\"\n        gap={1}\n        data-testid=\"OperationTitle\"\n      >\n        {titleNode}\n\n        {badgeText && (\n          <CustomChip\n            value={badgeText.toLowerCase()}\n            label={badgeText}\n            isExtraSmall\n          />\n        )}\n      </Box>\n      {!onlyTitle && (\n        <Box display=\"flex\" alignItems=\"center\" gap={1} data-testid=\"OperationPath\">\n          <CustomChip value={type} variant=\"outlined\" />\n          <TextWithOverflowTooltip tooltipText={subtitle} variant=\"subtitle2\">\n            {subtitle}\n          </TextWithOverflowTooltip>\n        </Box>\n      )}\n    </Box>\n  )\n})\n","/**\n * Copyright 2024-2025 NetCracker Technology Corporation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { FC, ReactNode } from 'react'\nimport React, { memo, useCallback, useMemo, useRef, useState } from 'react'\nimport { OperationTitleWithMeta as OperationTitle } from './OperationTitleWithMeta'\nimport type { Path } from '@remix-run/router/history'\nimport Box from '@mui/material/Box'\nimport { CustomListItemButton, LIST_ITEM_SIZE_BIG } from '../CustomListItemButton'\nimport { Divider, Skeleton } from '@mui/material'\nimport { NAVIGATION_PLACEHOLDER_AREA, Placeholder } from '../Placeholder'\nimport type { ResizeCallback } from 're-resizable'\nimport { Resizable } from 're-resizable'\nimport { ExpandableItem } from '../ExpandableItem'\nimport type { FetchNextOperationList, OperationData, OperationsData, PackageRef } from '../../entities/operations'\nimport { useIntersectionObserver } from '../../hooks/common/useIntersectionObserver'\nimport { ListBox } from '../Panels/ListBox'\nimport { isNotEmpty } from '../../utils/arrays'\nimport type { Key } from '../../entities/keys'\n\nexport type OperationListSubComponentProps = {\n  operation: OperationData\n}\n\nexport type OperationWithMetaClickableListProps = {\n  operations: OperationsData\n  prepareLinkFn?: (operation: OperationData) => Partial<Path>\n  fetchNextPage?: FetchNextOperationList\n  isNextPageFetching?: boolean\n  hasNextPage?: boolean\n  onRowClick?: (operationKey: Key, packageRef?: PackageRef) => void\n  onLinkClick?: () => void\n  isLoading?: boolean\n  previewComponent?: ReactNode\n  selectedOperationKey?: Key\n  initialSize: number\n  handleResize?: ResizeCallback\n  maxWidth: number\n  isExpandableItem?: (operation: OperationData) => boolean\n  SubComponent?: FC<OperationListSubComponentProps>\n}\n\n// First Order Component //\nexport const OperationWithMetaClickableList: FC<OperationWithMetaClickableListProps> = memo<OperationWithMetaClickableListProps>((props) => {\n  const {\n    operations,\n    prepareLinkFn,\n    onRowClick,\n    onLinkClick,\n    hasNextPage,\n    isNextPageFetching,\n    fetchNextPage,\n    isLoading = false,\n    previewComponent,\n    selectedOperationKey,\n    initialSize,\n    handleResize,\n    maxWidth,\n    isExpandableItem,\n    SubComponent,\n  } = props\n\n  const handleRowClick = useCallback((operation: OperationData) => {\n    onRowClick?.(operation.operationKey, operation.packageRef)\n  }, [onRowClick])\n\n  const ref = useRef<HTMLDivElement>(null)\n  useIntersectionObserver(ref, isNextPageFetching, hasNextPage, fetchNextPage)\n\n  const operationsList = useMemo(\n    () => operations?.map(operation => {\n      const link = prepareLinkFn?.(operation) ?? {}\n      const { operationKey, deprecated } = operation\n      const expandable = isExpandableItem?.(operation) ?? false\n      const title = <OperationTitle\n        operation={operation}\n        link={link}\n        badgeText={deprecated ? 'Deprecated' : undefined}\n        onLinkClick={onLinkClick}\n      />\n\n      return (\n        <OperationItemButton\n          title={title}\n          operation={operation}\n          expandable={expandable}\n          SubComponent={SubComponent}\n          onClick={handleRowClick}\n          selected={selectedOperationKey === operationKey}\n        />\n      )\n    }),\n    [SubComponent, handleRowClick, isExpandableItem, onLinkClick, operations, prepareLinkFn, selectedOperationKey],\n  )\n\n  return (\n    <Box display=\"grid\" gridTemplateColumns=\"1fr auto\" height=\"inherit\">\n      <ListBox>\n        <Placeholder\n          sx={{ width: 'inherit' }}\n          invisible={isNotEmpty(operations) || isLoading}\n          area={NAVIGATION_PLACEHOLDER_AREA}\n          message=\"No operations\"\n          testId=\"NoOperationsPlaceholder\"\n        >\n          <Box overflow=\"auto\" height=\"inherit\">\n            {operationsList}\n\n            {isLoading && <ListSkeleton />}\n            {hasNextPage && <Box ref={ref}><Skeleton variant=\"rectangular\" width=\"100%\" /></Box>}\n          </Box>\n        </Placeholder>\n      </ListBox>\n\n      <Resizable\n        style={{\n          borderLeft: '1px solid #D5DCE3',\n          backgroundColor: '#FFFFFF',\n          overflowY: 'scroll',\n        }}\n\n        enable={{\n          top: false,\n          right: false,\n          bottom: false,\n          left: true,\n          topRight: false,\n          bottomRight: false,\n          bottomLeft: false,\n          topLeft: false,\n        }}\n        boundsByDirection={true}\n        size={{ width: initialSize, height: '100%' }}\n        maxWidth={maxWidth}\n        onResizeStop={handleResize}\n      >\n        {previewComponent}\n      </Resizable>\n    </Box>\n  )\n})\n\nconst ListSkeleton: FC = memo(() => {\n  return (\n    <Box>\n      {[...Array(5)].map((_, index) => (\n        <Box key={index} mb={2}>\n          <Skeleton variant=\"rectangular\" height={20} width=\"100%\" />\n        </Box>\n      ))}\n    </Box>\n  )\n})\n\ntype OperationItemButtonProps = {\n  title: ReactNode\n  operation: OperationData\n  expandable: boolean\n  SubComponent?: FC<OperationListSubComponentProps>\n  onClick: (operationData: OperationData) => void\n  selected: boolean\n}\n\nconst OperationItemButton: FC<OperationItemButtonProps> = memo<OperationItemButtonProps>(({\n  title,\n  operation,\n  expandable,\n  onClick,\n  SubComponent,\n  selected,\n}) => {\n  const [expanded, setExpanded] = useState<boolean>(false)\n\n  return (\n    <>\n      <CustomListItemButton<OperationData>\n        keyProp={operation.operationKey}\n        data={operation}\n        itemComponent={<ExpandableItem showToggler={expandable} onToggle={setExpanded}>{title}</ExpandableItem>}\n        onClick={onClick}\n        size={LIST_ITEM_SIZE_BIG}\n        isSelected={selected}\n        testId=\"Cell-endpoints\"\n      />\n      <Divider orientation=\"horizontal\" variant=\"fullWidth\" />\n\n      {expanded && SubComponent && (\n        <SubComponent operation={operation} />\n      )}\n    </>\n  )\n},\n)\n"],"names":["_extends","target","i","source","key","_objectWithoutPropertiesLoose","excluded","sourceKeys","isModifiedEvent","event","shouldProcessLinkClick","_excluded","_excluded2","ViewTransitionContext","React.createContext","isBrowser","ABSOLUTE_URL_REGEX","Link","React.forwardRef","_ref7","ref","onClick","relative","reloadDocument","replace","state","to","preventScrollReset","unstable_viewTransition","rest","basename","React.useContext","UNSAFE_NavigationContext","absoluteHref","isExternal","currentUrl","targetUrl","path","stripBasename","href","useHref","internalOnClick","useLinkClickHandler","handleClick","React.createElement","NavLink","_ref8","ariaCurrentProp","caseSensitive","classNameProp","end","styleProp","children","useResolvedPath","location","useLocation","routerState","UNSAFE_DataRouterStateContext","navigator","isTransitioning","useViewTransitionState","toPathname","locationPathname","nextLocationPathname","isActive","isPending","renderProps","ariaCurrent","className","style","DataRouterHook","DataRouterStateHook","useDataRouterContext","hookName","ctx","UNSAFE_DataRouterContext","UNSAFE_invariant","_temp","replaceProp","navigate","useNavigate","React.useCallback","createPath","opts","vtContext","currentPath","nextPath","matchPath","OperationTitleWithMeta","memo","operation","link","onLinkClick","badgeText","openLinkInNewTab","onlyTitle","title","subtitle","type","useMemo","isRestOperation","isGraphQlOperation","jsxs","Box","jsx","Typography","CustomChip","TextWithOverflowTooltip","OperationWithMetaClickableList","props","operations","prepareLinkFn","onRowClick","hasNextPage","isNextPageFetching","fetchNextPage","isLoading","previewComponent","selectedOperationKey","initialSize","handleResize","maxWidth","isExpandableItem","SubComponent","handleRowClick","useCallback","useRef","useIntersectionObserver","operationsList","operationKey","deprecated","expandable","OperationItemButton","OperationTitle","ListBox","Placeholder","isNotEmpty","NAVIGATION_PLACEHOLDER_AREA","ListSkeleton","Skeleton","Resizable","_","index","selected","expanded","setExpanded","useState","Fragment","CustomListItemButton","ExpandableItem","LIST_ITEM_SIZE_BIG","Divider"],"mappings":"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","x_google_ignoreList":[0]}