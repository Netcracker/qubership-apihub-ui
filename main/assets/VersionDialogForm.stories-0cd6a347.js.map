{"version":3,"file":"VersionDialogForm.stories-0cd6a347.js","sources":["../../node_modules/@mui/material/Alert/alertClasses.js","../../node_modules/@mui/material/internal/svg-icons/SuccessOutlined.js","../../node_modules/@mui/material/internal/svg-icons/ReportProblemOutlined.js","../../node_modules/@mui/material/internal/svg-icons/ErrorOutline.js","../../node_modules/@mui/material/internal/svg-icons/InfoOutlined.js","../../node_modules/@mui/material/Alert/Alert.js","../../node_modules/@mui/icons-material/ErrorRounded.js","../../packages/shared/src/components/Typography/ErrorTypography.tsx","../../packages/shared/src/components/UploadedFilePreview.tsx","../../packages/shared/src/components/FileUploadField.tsx","../../packages/shared/src/components/VersionDialogForm.tsx"],"sourcesContent":["import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getAlertUtilityClass(slot) {\n  return generateUtilityClass('MuiAlert', slot);\n}\nconst alertClasses = generateUtilityClasses('MuiAlert', ['root', 'action', 'icon', 'message', 'filled', 'filledSuccess', 'filledInfo', 'filledWarning', 'filledError', 'outlined', 'outlinedSuccess', 'outlinedInfo', 'outlinedWarning', 'outlinedError', 'standard', 'standardSuccess', 'standardInfo', 'standardWarning', 'standardError']);\nexport default alertClasses;","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4C12.76,4 13.5,4.11 14.2, 4.31L15.77,2.74C14.61,2.26 13.34,2 12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0, 0 22,12M7.91,10.08L6.5,11.5L11,16L21,6L19.59,4.58L11,13.17L7.91,10.08Z\"\n}), 'SuccessOutlined');","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 5.99L19.53 19H4.47L12 5.99M12 2L1 21h22L12 2zm1 14h-2v2h2v-2zm0-6h-2v4h2v-4z\"\n}), 'ReportProblemOutlined');","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"\n}), 'ErrorOutline');","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20, 12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10, 10 0 0,0 12,2M11,17H13V11H11V17Z\"\n}), 'InfoOutlined');","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"action\", \"children\", \"className\", \"closeText\", \"color\", \"components\", \"componentsProps\", \"icon\", \"iconMapping\", \"onClose\", \"role\", \"severity\", \"slotProps\", \"slots\", \"variant\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { darken, lighten } from '@mui/system';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport capitalize from '../utils/capitalize';\nimport Paper from '../Paper';\nimport alertClasses, { getAlertUtilityClass } from './alertClasses';\nimport IconButton from '../IconButton';\nimport SuccessOutlinedIcon from '../internal/svg-icons/SuccessOutlined';\nimport ReportProblemOutlinedIcon from '../internal/svg-icons/ReportProblemOutlined';\nimport ErrorOutlineIcon from '../internal/svg-icons/ErrorOutline';\nimport InfoOutlinedIcon from '../internal/svg-icons/InfoOutlined';\nimport CloseIcon from '../internal/svg-icons/Close';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    variant,\n    color,\n    severity,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root', `${variant}${capitalize(color || severity)}`, `${variant}`],\n    icon: ['icon'],\n    message: ['message'],\n    action: ['action']\n  };\n  return composeClasses(slots, getAlertUtilityClass, classes);\n};\nconst AlertRoot = styled(Paper, {\n  name: 'MuiAlert',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, styles[ownerState.variant], styles[`${ownerState.variant}${capitalize(ownerState.color || ownerState.severity)}`]];\n  }\n})(({\n  theme,\n  ownerState\n}) => {\n  const getColor = theme.palette.mode === 'light' ? darken : lighten;\n  const getBackgroundColor = theme.palette.mode === 'light' ? lighten : darken;\n  const color = ownerState.color || ownerState.severity;\n  return _extends({}, theme.typography.body2, {\n    backgroundColor: 'transparent',\n    display: 'flex',\n    padding: '6px 16px'\n  }, color && ownerState.variant === 'standard' && {\n    color: theme.vars ? theme.vars.palette.Alert[`${color}Color`] : getColor(theme.palette[color].light, 0.6),\n    backgroundColor: theme.vars ? theme.vars.palette.Alert[`${color}StandardBg`] : getBackgroundColor(theme.palette[color].light, 0.9),\n    [`& .${alertClasses.icon}`]: theme.vars ? {\n      color: theme.vars.palette.Alert[`${color}IconColor`]\n    } : {\n      color: theme.palette[color].main\n    }\n  }, color && ownerState.variant === 'outlined' && {\n    color: theme.vars ? theme.vars.palette.Alert[`${color}Color`] : getColor(theme.palette[color].light, 0.6),\n    border: `1px solid ${(theme.vars || theme).palette[color].light}`,\n    [`& .${alertClasses.icon}`]: theme.vars ? {\n      color: theme.vars.palette.Alert[`${color}IconColor`]\n    } : {\n      color: theme.palette[color].main\n    }\n  }, color && ownerState.variant === 'filled' && _extends({\n    fontWeight: theme.typography.fontWeightMedium\n  }, theme.vars ? {\n    color: theme.vars.palette.Alert[`${color}FilledColor`],\n    backgroundColor: theme.vars.palette.Alert[`${color}FilledBg`]\n  } : {\n    backgroundColor: theme.palette.mode === 'dark' ? theme.palette[color].dark : theme.palette[color].main,\n    color: theme.palette.getContrastText(theme.palette[color].main)\n  }));\n});\nconst AlertIcon = styled('div', {\n  name: 'MuiAlert',\n  slot: 'Icon',\n  overridesResolver: (props, styles) => styles.icon\n})({\n  marginRight: 12,\n  padding: '7px 0',\n  display: 'flex',\n  fontSize: 22,\n  opacity: 0.9\n});\nconst AlertMessage = styled('div', {\n  name: 'MuiAlert',\n  slot: 'Message',\n  overridesResolver: (props, styles) => styles.message\n})({\n  padding: '8px 0',\n  minWidth: 0,\n  overflow: 'auto'\n});\nconst AlertAction = styled('div', {\n  name: 'MuiAlert',\n  slot: 'Action',\n  overridesResolver: (props, styles) => styles.action\n})({\n  display: 'flex',\n  alignItems: 'flex-start',\n  padding: '4px 0 0 16px',\n  marginLeft: 'auto',\n  marginRight: -8\n});\nconst defaultIconMapping = {\n  success: /*#__PURE__*/_jsx(SuccessOutlinedIcon, {\n    fontSize: \"inherit\"\n  }),\n  warning: /*#__PURE__*/_jsx(ReportProblemOutlinedIcon, {\n    fontSize: \"inherit\"\n  }),\n  error: /*#__PURE__*/_jsx(ErrorOutlineIcon, {\n    fontSize: \"inherit\"\n  }),\n  info: /*#__PURE__*/_jsx(InfoOutlinedIcon, {\n    fontSize: \"inherit\"\n  })\n};\nconst Alert = /*#__PURE__*/React.forwardRef(function Alert(inProps, ref) {\n  var _ref, _slots$closeButton, _ref2, _slots$closeIcon, _slotProps$closeButto, _slotProps$closeIcon;\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiAlert'\n  });\n  const {\n      action,\n      children,\n      className,\n      closeText = 'Close',\n      color,\n      components = {},\n      componentsProps = {},\n      icon,\n      iconMapping = defaultIconMapping,\n      onClose,\n      role = 'alert',\n      severity = 'success',\n      slotProps = {},\n      slots = {},\n      variant = 'standard'\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    color,\n    severity,\n    variant\n  });\n  const classes = useUtilityClasses(ownerState);\n  const AlertCloseButton = (_ref = (_slots$closeButton = slots.closeButton) != null ? _slots$closeButton : components.CloseButton) != null ? _ref : IconButton;\n  const AlertCloseIcon = (_ref2 = (_slots$closeIcon = slots.closeIcon) != null ? _slots$closeIcon : components.CloseIcon) != null ? _ref2 : CloseIcon;\n  const closeButtonProps = (_slotProps$closeButto = slotProps.closeButton) != null ? _slotProps$closeButto : componentsProps.closeButton;\n  const closeIconProps = (_slotProps$closeIcon = slotProps.closeIcon) != null ? _slotProps$closeIcon : componentsProps.closeIcon;\n  return /*#__PURE__*/_jsxs(AlertRoot, _extends({\n    role: role,\n    elevation: 0,\n    ownerState: ownerState,\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other, {\n    children: [icon !== false ? /*#__PURE__*/_jsx(AlertIcon, {\n      ownerState: ownerState,\n      className: classes.icon,\n      children: icon || iconMapping[severity] || defaultIconMapping[severity]\n    }) : null, /*#__PURE__*/_jsx(AlertMessage, {\n      ownerState: ownerState,\n      className: classes.message,\n      children: children\n    }), action != null ? /*#__PURE__*/_jsx(AlertAction, {\n      ownerState: ownerState,\n      className: classes.action,\n      children: action\n    }) : null, action == null && onClose ? /*#__PURE__*/_jsx(AlertAction, {\n      ownerState: ownerState,\n      className: classes.action,\n      children: /*#__PURE__*/_jsx(AlertCloseButton, _extends({\n        size: \"small\",\n        \"aria-label\": closeText,\n        title: closeText,\n        color: \"inherit\",\n        onClick: onClose\n      }, closeButtonProps, {\n        children: /*#__PURE__*/_jsx(AlertCloseIcon, _extends({\n          fontSize: \"small\"\n        }, closeIconProps))\n      }))\n    }) : null]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Alert.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The action to display. It renders after the message, at the end of the alert.\n   */\n  action: PropTypes.node,\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * Override the default label for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Close'\n   */\n  closeText: PropTypes.string,\n  /**\n   * The color of the component. Unless provided, the value is taken from the `severity` prop.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * The components used for each slot inside.\n   *\n   * This prop is an alias for the `slots` prop.\n   * It's recommended to use the `slots` prop instead.\n   *\n   * @default {}\n   */\n  components: PropTypes.shape({\n    CloseButton: PropTypes.elementType,\n    CloseIcon: PropTypes.elementType\n  }),\n  /**\n   * The extra props for the slot components.\n   * You can override the existing props or add new ones.\n   *\n   * This prop is an alias for the `slotProps` prop.\n   * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.\n   *\n   * @default {}\n   */\n  componentsProps: PropTypes.shape({\n    closeButton: PropTypes.object,\n    closeIcon: PropTypes.object\n  }),\n  /**\n   * Override the icon displayed before the children.\n   * Unless provided, the icon is mapped to the value of the `severity` prop.\n   * Set to `false` to remove the `icon`.\n   */\n  icon: PropTypes.node,\n  /**\n   * The component maps the `severity` prop to a range of different icons,\n   * for instance success to `<SuccessOutlined>`.\n   * If you wish to change this mapping, you can provide your own.\n   * Alternatively, you can use the `icon` prop to override the icon displayed.\n   */\n  iconMapping: PropTypes.shape({\n    error: PropTypes.node,\n    info: PropTypes.node,\n    success: PropTypes.node,\n    warning: PropTypes.node\n  }),\n  /**\n   * Callback fired when the component requests to be closed.\n   * When provided and no `action` prop is set, a close icon button is displayed that triggers the callback when clicked.\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   */\n  onClose: PropTypes.func,\n  /**\n   * The ARIA role attribute of the element.\n   * @default 'alert'\n   */\n  role: PropTypes.string,\n  /**\n   * The severity of the alert. This defines the color and icon used.\n   * @default 'success'\n   */\n  severity: PropTypes.oneOf(['error', 'info', 'success', 'warning']),\n  /**\n   * The extra props for the slot components.\n   * You can override the existing props or add new ones.\n   *\n   * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.\n   *\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    closeButton: PropTypes.object,\n    closeIcon: PropTypes.object\n  }),\n  /**\n   * The components used for each slot inside.\n   *\n   * This prop is an alias for the `components` prop, which will be deprecated in the future.\n   *\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    closeButton: PropTypes.elementType,\n    closeIcon: PropTypes.elementType\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The variant to use.\n   * @default 'standard'\n   */\n  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['filled', 'outlined', 'standard']), PropTypes.string])\n} : void 0;\nexport default Alert;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 11c-.55 0-1-.45-1-1V8c0-.55.45-1 1-1s1 .45 1 1v4c0 .55-.45 1-1 1zm1 4h-2v-2h2v2z\"\n}), 'ErrorRounded');\nexports.default = _default;","/**\n * Copyright 2024-2025 NetCracker Technology Corporation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { FC, PropsWithChildren } from 'react'\nimport { Typography } from '@mui/material'\n\nexport const ErrorTypography: FC<PropsWithChildren> = ({ children }) => (\n  <Typography data-testid=\"ErrorTypography\" variant=\"body2\" color=\"#FF5260\">{children}</Typography>\n)\n","/**\n * Copyright 2024-2025 NetCracker Technology Corporation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { FC } from 'react'\nimport { memo } from 'react'\nimport { Box, IconButton } from '@mui/material'\nimport Typography from '@mui/material/Typography'\nimport { DeleteIcon } from '../icons/DeleteIcon'\nimport { FileIcon } from '../icons/FileIcon'\nimport type { TestableProps } from './Testable'\n\nexport type UploadedFilePreviewProps = {\n  file: File\n  onDelete: () => void\n  onDownload?: () => void\n} & TestableProps\n\nexport const UploadedFilePreview: FC<UploadedFilePreviewProps> = memo<UploadedFilePreviewProps>(({\n  file,\n  onDelete,\n  onDownload,\n  testId,\n}) => {\n  const color = onDownload ? DOWNLOAD_AVAILABLE_COLOR : 'black'\n\n  return (\n    <Box display=\"flex\" alignItems=\"center\" data-testid={testId}>\n      <Box onClick={onDownload} sx={{ display: 'flex', gap: 0.5, cursor: onDownload ? 'pointer' : 'default' }}>\n        <FileIcon color={color}/>\n        <Typography variant=\"subtitle2\" fontSize={13} color={color}>{file.name}</Typography>\n      </Box>\n      <IconButton onClick={onDelete} sx={{ ml: 'auto' }} data-testid=\"DeleteButton\">\n        <DeleteIcon color=\"#353C4E\"/>\n      </IconButton>\n    </Box>\n  )\n})\n\nexport const DOWNLOAD_AVAILABLE_COLOR = '#005DCF'\n","/**\n * Copyright 2024-2025 NetCracker Technology Corporation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ChangeEvent, DragEvent, FC } from 'react'\nimport * as React from 'react'\nimport { memo, useCallback, useMemo } from 'react'\nimport { Alert, Box, Typography } from '@mui/material'\nimport { FileUpload } from './FileUpload'\nimport { UploadButton } from './UploadButton'\nimport { UploadedFilePreview } from './UploadedFilePreview'\nimport { CloudUploadIcon } from '../icons/CloudUploadIcon'\nimport type { FileExtension } from '../utils/files'\nimport { createFileFormatEnumeration, transformFileListToFileArray } from '../utils/files'\nimport ErrorOutlinedIcon from '@mui/icons-material/ErrorOutlined'\n\nexport type FileUploadFieldProps = {\n  uploadedFile: File | undefined\n  setUploadedFile: (file: File | undefined) => void\n  onDownload?: () => void\n  downloadAvailable: boolean\n  acceptableExtensions: FileExtension[]\n  errorMessage?: string\n}\n\nexport const FileUploadField: FC<FileUploadFieldProps> = memo<FileUploadFieldProps>(({\n  uploadedFile,\n  setUploadedFile,\n  onDownload,\n  downloadAvailable,\n  acceptableExtensions,\n  errorMessage,\n}) => {\n\n  const onUpload = useCallback(\n    ({ target: { files } }: ChangeEvent<HTMLInputElement>) =>\n      setUploadedFile(files ? transformFileListToFileArray(files)[0] : undefined),\n    [setUploadedFile])\n\n  const onDrop = useCallback(\n    ({ dataTransfer: { files } }: DragEvent<HTMLElement>) =>\n      setUploadedFile(transformFileListToFileArray(files)[0]),\n    [setUploadedFile])\n\n  const onDelete = useCallback(() => setUploadedFile(undefined), [setUploadedFile])\n\n  const alert = useMemo(\n    () => (\n      errorMessage && (\n        <Alert\n          icon={<ErrorOutlinedIcon color=\"error\"/>}\n          severity=\"error\"\n          sx={{ p: 0, py: '1px', pl: 2, alignItems: 'center' }}\n        >\n          {errorMessage}\n        </Alert>\n      )),\n    [errorMessage],\n  )\n\n  if (uploadedFile) {\n    return (\n      <>\n        <UploadedFilePreview\n          file={uploadedFile}\n          onDelete={onDelete}\n          onDownload={downloadAvailable ? onDownload : undefined}\n          testId={downloadAvailable ? 'DownloadableFilePreview' : 'NotDownloadableFilePreview'}\n        />\n        {alert}\n      </>\n    )\n  }\n\n  return (\n    <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>\n      <FileUpload\n        onDrop={onDrop}\n        acceptableFileTypes={acceptableExtensions}\n      >\n        <Box\n          sx={{\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            backgroundColor: 'rgb(242, 243, 245)',\n            boxSizing: 'border-box',\n            borderRadius: '10px',\n            width: 1,\n            height: '44px',\n          }}\n        >\n          <CloudUploadIcon sx={{ color: '#626D82', mr: '8px' }}/>\n          <Typography variant=\"subtitle2\" fontSize={13}>\n            {`Drop ${createFileFormatEnumeration(acceptableExtensions)} file here to attach or`}\n          </Typography>\n\n          <UploadButton\n            title=\"browse\"\n            onUpload={onUpload}\n            buttonSxProp={{ p: 0, ml: 0.5, minWidth: 'auto', height: 1, display: 'flex' }}\n            data-testid=\"BrowseButton\"\n            acceptableFileTypes={acceptableExtensions}\n          />\n        </Box>\n      </FileUpload>\n      {alert}\n    </Box>\n  )\n})\n","/**\n * Copyright 2024-2025 NetCracker Technology Corporation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ChangeEvent, FC, SyntheticEvent } from 'react'\nimport * as React from 'react'\nimport { memo, useCallback, useEffect, useMemo, useState } from 'react'\nimport type { Control, FormState, UseFormSetValue } from 'react-hook-form'\nimport { Controller, useWatch } from 'react-hook-form'\nimport {\n  Autocomplete,\n  Box,\n  Button,\n  debounce,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Divider,\n  ListItem,\n  TextField,\n  Tooltip,\n  Typography,\n} from '@mui/material'\nimport ErrorRoundedIcon from '@mui/icons-material/ErrorRounded'\nimport { LoadingButton } from '@mui/lab'\nimport { DialogForm } from './DialogForm'\nimport { CustomChip } from './CustomChip'\nimport type { Key, VersionKey } from '../entities/keys'\nimport type { PackagePermissions } from '../entities/package-permissions'\nimport type { VersionStatus } from '../entities/version-status'\nimport {\n  NO_PREVIOUS_RELEASE_VERSION_OPTION,\n  RELEASE_VERSION_STATUS,\n  VERSION_STATUS_MANAGE_PERMISSIONS,\n  VERSION_STATUSES,\n} from '../entities/version-status'\nimport {\n  checkFileType,\n  checkReleaseVersionFormat,\n  checkVersionNotEqualToPrevious,\n  checkVersionRestrictedSymbols,\n} from '../utils/validations'\nimport { EditIcon } from '../icons/EditIcon'\nimport { CloudUploadIcon } from '../icons/CloudUploadIcon'\nimport { getSplittedVersionKey, handleVersionsRevision } from '../utils/versions'\nimport { ErrorTypography } from './Typography/ErrorTypography'\nimport type { PackageVersions } from '../entities/versions'\nimport { LabelsAutocomplete } from './LabelsAutocomplete'\nimport type { Package, Packages } from '../entities/packages'\nimport { OptionItem } from './OptionItem'\nimport { disableAutocompleteSearch } from '../utils/mui'\nimport { DEFAULT_DEBOUNCE } from '../utils/constants'\nimport { InfoIcon } from '../icons/InfoIcon'\nimport { CSV_FILE_EXTENSION } from '../utils/files'\nimport { FileUploadField } from './FileUploadField'\n\nexport type VersionFormData = {\n  message?: string\n  descriptorVersion?: Key\n  descriptorFile?: File | null\n  workspace?: Package | null\n  package?: Package | null\n  version: Key\n  status: VersionStatus\n  labels: string[]\n  previousVersion: Key\n  file?: File\n}\n\nexport type VersionDialogFormProps<T extends VersionFormData = VersionFormData> = {\n  open: boolean\n  setOpen: (value: boolean) => void\n  onSubmit: () => void\n  control: Control<T>\n  setValue: UseFormSetValue<T>\n  formState: FormState<T>\n  packagePermissions: PackagePermissions\n  releaseVersionPattern: string | undefined\n  selectedWorkspace?: Package | null\n  workspaces?: Packages\n  onWorkspacesFilter?: (value: string) => void\n  onVersionsFilter?: (value: string) => void\n  onPackagesFilter?: (value: string) => void\n  onSetWorkspace?: (workspace: Package | null) => void\n  onSetTargetPackage?: (pack: Package | null) => void\n  areWorkspacesLoading?: boolean\n  arePackagesLoading?: boolean\n  areVersionsLoading?: boolean\n  packages?: Packages\n  packagesTitle?: string\n  packageObj?: Package\n  onSetPackage?: () => void\n  versions?: Key[]\n  previousVersions?: Key[]\n  getVersionLabels?: (version: Key) => string[]\n  isPublishing?: boolean\n  extraValidationMassage?: string | null\n  setSelectedPreviousVersion?: (value: Key) => void\n  title?: string\n  submitButtonTittle?: string\n  descriptorVersionFieldTitle?: string\n  descriptorFileFieldTitle?: string\n  hideCSVRelatedFields?: boolean\n  hideDescriptorField?: boolean\n  hideDescriptorVersionField?: boolean\n  hideSaveMessageField?: boolean\n  hideCopyPackageFields?: boolean\n  hidePreviousVersionField?: boolean\n  publishButtonDisabled?: boolean\n}\n\nexport const VersionDialogForm: FC<VersionDialogFormProps> = memo<VersionDialogFormProps>((props) => {\n  const {\n    open,\n    setOpen,\n    onSubmit,\n    control,\n    setValue,\n    formState,\n    selectedWorkspace,\n    workspaces,\n    areWorkspacesLoading,\n    onSetWorkspace,\n    onSetTargetPackage,\n    onWorkspacesFilter,\n    arePackagesLoading,\n    areVersionsLoading,\n    onVersionsFilter,\n    onPackagesFilter,\n    packages,\n    packagesTitle,\n    versions,\n    previousVersions,\n    getVersionLabels,\n    packagePermissions,\n    releaseVersionPattern,\n    isPublishing,\n    extraValidationMassage,\n    setSelectedPreviousVersion,\n    title,\n    submitButtonTittle,\n    descriptorVersionFieldTitle,\n    descriptorFileFieldTitle,\n    hideCSVRelatedFields = true,\n    hideDescriptorField,\n    hideDescriptorVersionField,\n    hideSaveMessageField,\n    hidePreviousVersionField,\n    hideCopyPackageFields,\n    publishButtonDisabled,\n  } = props\n\n  const { errors } = formState\n\n  const workspace = useWatch({ control: control, name: 'workspace' })\n  const status = useWatch({ control: control, name: 'status' })\n  const previousVersion = useWatch({ control: control, name: 'previousVersion' })\n  const descriptorFile = useWatch({ control: control, name: 'descriptorFile' })\n  const isReleaseStatus = status === RELEASE_VERSION_STATUS\n  const onWorkspacesChange = useCallback((_: SyntheticEvent, value: string): void => onWorkspacesFilter?.(value), [onWorkspacesFilter])\n  const onPackagesChange = useCallback((_: SyntheticEvent, value: string): void => onPackagesFilter?.(value), [onPackagesFilter])\n  const onVersionsChange = useCallback((_: SyntheticEvent, value: string): void => onVersionsFilter?.(value), [onVersionsFilter])\n\n  const debouncedOnWorkspacesChange = useMemo(() => debounce(onWorkspacesChange, DEFAULT_DEBOUNCE), [onWorkspacesChange])\n  const debouncedOnPackagesChange = useMemo(() => debounce(onPackagesChange, DEFAULT_DEBOUNCE), [onPackagesChange])\n  const debouncedOnVersionsChange = useMemo(() => debounce(onVersionsChange, DEFAULT_DEBOUNCE), [onVersionsChange])\n\n  const [descriptorContent, setDescriptorContent] = useState<string | null>(null)\n  const [isFileReading, setIsFileReading] = useState<boolean>(false)\n\n  const onFileContentLoaded = useCallback((event: ProgressEvent<FileReader>): void => {\n    setDescriptorContent(event?.target?.result ? String(event.target.result) : null)\n    setIsFileReading(false)\n  }, [])\n\n  useEffect(() => {\n    if (selectedWorkspace?.key) {\n      setValue('workspace', selectedWorkspace)\n    }\n  }, [selectedWorkspace, selectedWorkspace?.key, setValue])\n\n  useEffect(() => {\n    if (!descriptorFile) {\n      return\n    }\n\n    const reader = new FileReader()\n    reader.onload = onFileContentLoaded\n    reader.onerror = onFileContentLoaded\n    setIsFileReading(true)\n    reader.readAsText(descriptorFile)\n  }, [descriptorFile, onFileContentLoaded])\n\n  const showTopDivider = useMemo(\n    () => !hideSaveMessageField || !hideDescriptorVersionField || !hideDescriptorField,\n    [hideDescriptorField, hideDescriptorVersionField, hideSaveMessageField],\n  )\n\n  /* todo move upload file text field to separated component */\n  return (\n    <DialogForm\n      open={open}\n      onClose={() => setOpen(false)}\n      onSubmit={onSubmit}\n    >\n      <DialogTitle data-testid=\"DialogTitle\">\n        {title ?? 'Publish'}\n      </DialogTitle>\n\n      <DialogContent sx={{ width: 440 }}>\n\n        {!hideSaveMessageField && <>\n          <Typography variant=\"button\">\n            Save\n          </Typography>\n          <Controller\n            name=\"message\"\n            control={control}\n            render={({ field }) => (\n              <TextField\n                {...field}\n                multiline required\n                autoComplete=\"on\"\n                rows=\"4\"\n                type=\"text\"\n                label=\"Message\"\n                data-testid=\"MessageTextField\"\n              />\n            )}\n          />\n          <Typography variant=\"button\">\n            Publish\n          </Typography>\n        </>}\n\n        {!hideDescriptorVersionField && (\n          <Controller\n            name=\"descriptorVersion\"\n            control={control}\n            rules={{\n              validate: {\n                restrictedSymbols: (value) => checkVersionRestrictedSymbols(value ?? ''),\n              },\n            }}\n            render={({ field }) => (\n              <TextField\n                {...field}\n                value={field.value ?? ''}\n                required\n                label={descriptorVersionFieldTitle ?? 'Descriptor Version'}\n                error={!!errors.descriptorVersion}\n                onChange={(event) => setValue('descriptorVersion', event.target.value ?? '')}\n                data-testid=\"DescriptorVersionTextField\"\n              />\n            )}\n          />\n        )}\n\n        {!hideDescriptorField && (\n          <Controller\n            name=\"descriptorFile\"\n            control={control}\n            rules={{\n              validate: {\n                correctUpload: () => checkFileUpload(descriptorContent),\n              },\n            }}\n            render={({ field }) => (\n              <Box\n                component=\"label\"\n                htmlFor=\"contained-button-file\"\n              >\n                <Box\n                  component=\"input\"\n                  id=\"contained-button-file\"\n                  display=\"none\"\n                  multiple\n                  type=\"file\"\n                  onChange={({ target: { files } }: ChangeEvent<HTMLInputElement>) => {\n                    setValue('descriptorFile', files?.[0] ?? null)\n                  }}\n                />\n                <TextField\n                  {...field}\n                  sx={{\n                    'label': { height: '100%', width: '100%' },\n                  }}\n                  value={field.value?.name ?? ''}\n                  label={descriptorFileFieldTitle ?? 'Descriptor File'}\n                  error={!!errors.descriptorFile}\n                  helperText={errors.descriptorFile?.message}\n                  required\n                  InputProps={{\n                    endAdornment: (\n                      <Box display=\"flex\" flexDirection=\"row\" sx={{ cursor: 'pointer' }}>\n                        {field.value ? <EditIcon/> : <CloudUploadIcon fontSize=\"small\" sx={{ color: '#353C4E' }}/>}\n                        {!!errors.descriptorFile && <ErrorRoundedIcon color=\"error\"/>}\n                      </Box>\n                    ),\n                    inputProps: {\n                      readOnly: true,\n                    },\n                  }}\n                  data-testid=\"DescriptorFileTextField\"\n                />\n              </Box>\n            )}\n          />\n        )}\n\n        {showTopDivider && (\n          <Divider sx={{ mx: 0, mt: 1, mb: 0.5 }} orientation=\"horizontal\"/>\n        )}\n\n        {!hideCSVRelatedFields && (\n          <>\n            <Box display=\"flex\" gap={0.5} alignItems=\"center\" pb={1}>\n              <Box sx={{ lineHeight: 1 }}>\n                <Typography variant=\"button\" component=\"span\">Dashboard Version Config</Typography>\n                <Typography variant=\"button\" component=\"span\" color=\"#FF5260\">*</Typography>\n              </Box>\n              <Tooltip\n                disableHoverListener={false}\n                placement=\"right\"\n                title={DASHBOARD_VERSION_CONFIG_TITLE}\n                PopperProps={{\n                  sx: { '.MuiTooltip-tooltip': { maxWidth: '600px' } },\n                }}\n              >\n                <Box sx={{ cursor: 'pointer' }}>\n                  <InfoIcon/>\n                </Box>\n              </Tooltip>\n            </Box>\n\n            <Controller\n              name=\"file\"\n              rules={{\n                required: 'Please upload a file',\n                validate: {\n                  checkFileType: (file) => checkFileType(file!, [CSV_FILE_EXTENSION]),\n                },\n              }}\n              control={control}\n              render={({ field: { value, onChange } }) => <FileUploadField\n                errorMessage={errors.file?.message}\n                uploadedFile={value}\n                setUploadedFile={value => onChange(value)}\n                downloadAvailable={false}\n                acceptableExtensions={[CSV_FILE_EXTENSION]}\n              />}\n            />\n\n            <Box display=\"flex\" gap={0.5} alignItems=\"center\" pt={2}>\n              <Typography variant=\"button\">Package Search Scope for Dashboard Version</Typography>\n              <Tooltip\n                disableHoverListener={false}\n                placement=\"right\"\n                title={PACKAGE_SEARCH_SCOPE_TITLE}\n                PopperProps={{\n                  sx: { '.MuiTooltip-tooltip': { maxWidth: '600px' } },\n                }}\n              >\n                <Box sx={{ cursor: 'pointer' }}>\n                  <InfoIcon/>\n                </Box>\n              </Tooltip>\n            </Box>\n\n            <Controller\n              name=\"workspace\"\n              control={control}\n              render={({ field: { value } }) => <Autocomplete\n                value={value}\n                options={workspaces ?? []}\n                loading={areWorkspacesLoading}\n                isOptionEqualToValue={(option, value) => option.key === value.key}\n                getOptionLabel={(option) => option?.name ?? ''}\n                renderOption={(props, { key, name }) => <OptionItem\n                  key={key}\n                  props={props}\n                  title={name}\n                  subtitle={key}\n                />}\n                onChange={(_, value) => {\n                  setValue('workspace', value ?? null)\n                  setValue('package', null)\n                  onSetWorkspace?.(value)\n                }}\n                onInputChange={debouncedOnWorkspacesChange}\n                renderInput={(params) =>\n                  <TextField\n                    required\n                    {...params}\n                    label=\"Workspace\"\n                  />\n                }\n                data-testid=\"WorkspaceAutocomplete\"\n              />}\n            />\n            <Box sx={{ lineHeight: 1 }} pt={2}>\n              <Typography variant=\"button\">Publish Info</Typography>\n            </Box>\n          </>\n        )}\n\n        {!hideCopyPackageFields && (\n          <>\n            <Typography sx={{ mb: 1 }} variant=\"body2\">Target Package</Typography>\n\n            <Controller\n              name=\"workspace\"\n              control={control}\n              render={({ field: { value } }) => <Autocomplete\n                value={value}\n                options={workspaces ?? []}\n                loading={areWorkspacesLoading}\n                isOptionEqualToValue={(option, value) => option.key === value.key}\n                getOptionLabel={(option) => option?.name ?? ''}\n                renderOption={(props, { key, name }) => <OptionItem\n                  key={key}\n                  props={props}\n                  title={name}\n                  subtitle={key}\n                />}\n                onChange={(_, value) => {\n                  setValue('workspace', value ?? null)\n                  setValue('package', null)\n                  onSetWorkspace?.(value)\n                }}\n                onInputChange={debouncedOnWorkspacesChange}\n                renderInput={(params) =>\n                  <TextField\n                    required\n                    {...params}\n                    label=\"Workspace\"\n                  />\n                }\n                data-testid=\"WorkspaceAutocomplete\"\n              />}\n            />\n\n            <Controller\n              name=\"package\"\n              control={control}\n              render={({ field: { value } }) => <Autocomplete\n                value={value}\n                disabled={!workspace}\n                isOptionEqualToValue={(option, value) => option === value}\n                options={packages ?? []}\n                loading={arePackagesLoading}\n                filterOptions={disableAutocompleteSearch}\n                getOptionLabel={({ name }: Package) => name}\n                renderOption={(props, { key, name }) => <OptionItem\n                  key={key}\n                  props={props}\n                  title={name}\n                  subtitle={key}\n                />}\n                onInputChange={debouncedOnPackagesChange}\n                renderInput={(params) => <TextField\n                  {...params}\n                  required\n                  label={packagesTitle}\n                />\n                }\n                onChange={(_, value) => {\n                  setValue('package', value)\n                  onSetTargetPackage?.(value)\n                }}\n                data-testid=\"PackageAutocomplete\"\n              />}\n            />\n\n            <Typography sx={{ mb: 1, mt: 2 }} variant=\"body2\">Target Version Info</Typography>\n          </>\n        )}\n\n        <Controller\n          name=\"version\"\n          control={control}\n          rules={{\n            validate: {\n              checkSpaces: (version) => {\n                if (!isReleaseStatus) {\n                  return true\n                }\n                if (!releaseVersionPattern) {\n                  return true\n                }\n                return checkReleaseVersionFormat(version, releaseVersionPattern)\n              },\n              restrictedSymbols: checkVersionRestrictedSymbols,\n              notEqualToPrevious: (version) => checkVersionNotEqualToPrevious(version, getSplittedVersionKey(previousVersion).versionKey),\n            },\n          }}\n          render={({ field }) => (\n            <Autocomplete\n              freeSolo\n              disabled={!field || !getVersionLabels}\n              value={field.value ?? ''}\n              options={versions ?? []}\n              loading={areVersionsLoading}\n              renderOption={(props, versionKey) => <ListItem {...props} key={versionKey}>{versionKey}</ListItem>}\n              onInputChange={debouncedOnVersionsChange}\n              renderInput={(params) => (\n                <TextField\n                  {...field}\n                  {...params}\n                  required\n                  label=\"Version\"\n                  error={!!errors.version}\n                />\n              )}\n              onChange={(_, value) => {\n                setValue('version', value ?? '')\n                setValue('labels', value && getVersionLabels?.(value) || [], { shouldTouch: true })\n              }}\n              data-testid=\"VersionAutocomplete\"\n            />\n          )}\n        />\n\n        <Controller\n          name=\"status\"\n          control={control}\n          render={({ field: { value } }) => (\n            <Autocomplete\n              value={value ?? null}\n              options={VERSION_STATUSES}\n              getOptionDisabled={(option) => !packagePermissions.includes(VERSION_STATUS_MANAGE_PERMISSIONS[option])}\n              renderOption={(props, option) =>\n                <ListItem\n                  {...props}\n                  key={option}\n                  data-testid={`Option-${option}`}\n                >\n                  <CustomChip value={option}/>\n                </ListItem>\n              }\n              onChange={(_, value) => {\n                setValue('status', value as VersionStatus)\n              }}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label=\"Status\"\n                  required\n                  InputProps={{\n                    ...params.InputProps,\n                    // These styles hide the text in the input for correct view\n                    sx: {\n                      ['& .MuiInputBase-input']: {\n                        color: 'transparent',\n                        caretColor: 'transparent',\n                        '::selection': {\n                          background: 'transparent',\n                          color: 'transparent',\n                        },\n                      },\n                    },\n                    startAdornment: status ? <CustomChip sx={{ height: 16, mb: 1 }} value={status}/> : null,\n                  }}\n                />\n              )}\n              data-testid=\"StatusAutocomplete\"\n            />\n          )}\n        />\n\n        <Controller\n          name=\"labels\"\n          control={control}\n          render={({ field }) => (\n            <LabelsAutocomplete\n              onChange={(_, value) => setValue('labels', value ?? [])}\n              value={field.value}\n            />\n          )}\n        />\n\n        {!hidePreviousVersionField && (\n          <>\n            <Divider sx={{ mx: 0, mt: 1, mb: 0.5 }} orientation=\"horizontal\"/>\n            <Controller\n              name=\"previousVersion\"\n              control={control}\n              render={({ field }) => (\n                <Autocomplete\n                  value={field.value ?? null}\n                  options={previousVersions ?? []}\n                  getOptionLabel={value => getSplittedVersionKey(value).versionKey}\n                  renderOption={(props, versionKey) => (\n                    <ListItem {...props} key={versionKey}>\n                      {getSplittedVersionKey(versionKey).versionKey}\n                    </ListItem>\n                  )}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      required\n                      label=\"Previous release version\"\n                      helperText={extraValidationMassage}\n                    />\n                  )}\n                  onChange={(_, value) => {\n                    setValue('previousVersion', value ?? NO_PREVIOUS_RELEASE_VERSION_OPTION)\n                    setSelectedPreviousVersion?.(value ?? NO_PREVIOUS_RELEASE_VERSION_OPTION)\n                  }}\n                  data-testid=\"PreviousReleaseVersionAutocomplete\"\n                />\n              )}\n            />\n          </>\n        )}\n\n        {errors.version?.message && (\n          <Box pt={2}>\n            <ErrorTypography>{errors.version?.message}</ErrorTypography>\n          </Box>\n        )}\n      </DialogContent>\n\n      <DialogActions>\n        <LoadingButton\n          variant=\"contained\"\n          type=\"submit\"\n          loading={isPublishing}\n          disabled={isFileReading || publishButtonDisabled}\n          data-testid={submitButtonTittle ? `${submitButtonTittle}Button` : 'PublishButton'}\n        >\n          {submitButtonTittle ?? 'Publish'}\n        </LoadingButton>\n        <Button\n          variant=\"outlined\"\n          onClick={() => setOpen(false)}\n          data-testid=\"CancelButton\"\n        >\n          Close\n        </Button>\n      </DialogActions>\n    </DialogForm>\n  )\n})\n\nexport function replaceEmptyPreviousVersion(previousVersion: Key): Key {\n  return previousVersion === NO_PREVIOUS_RELEASE_VERSION_OPTION\n    ? EMPTY_VERSION_KEY\n    : previousVersion\n}\n\nexport function usePreviousVersionOptions(versions: PackageVersions): VersionKey[] {\n  const versionsWithoutRevision = handleVersionsRevision(versions)\n\n  return useMemo(() => ([\n    NO_PREVIOUS_RELEASE_VERSION_OPTION,\n    ...versionsWithoutRevision.filter(({ status }) => status === RELEASE_VERSION_STATUS).map(({ key }) => key),\n  ]), [versionsWithoutRevision])\n}\n\nexport const EMPTY_VERSION_KEY: Key = ''\n\nfunction checkFileUpload(descriptorContent: string | null): boolean {\n  return !!descriptorContent\n}\n\nconst DASHBOARD_VERSION_CONFIG_TITLE = 'CSV file must have the following information: \"serviceName\" and \"serviceVersion\". Published dashboard version will include package release versions (from selected workspace) for specified services. Additionally, \"method\" and \"path\" of REST API operations for services can be defined in the file. In this case, the system will create operations group with the operations for specified method and path.'\nconst PACKAGE_SEARCH_SCOPE_TITLE = 'The workspace in which package versions for services from the CSV configuration will be searched. The package versions found in this workspace will be included into the dashboard version.'\n"],"names":["getAlertUtilityClass","slot","generateUtilityClass","alertClasses","generateUtilityClasses","alertClasses$1","SuccessOutlinedIcon","createSvgIcon","_jsx","ReportProblemOutlinedIcon","ErrorOutlineIcon","InfoOutlinedIcon","_excluded","useUtilityClasses","ownerState","variant","color","severity","classes","slots","capitalize","composeClasses","AlertRoot","styled","Paper","props","styles","theme","getColor","darken","lighten","getBackgroundColor","_extends","AlertIcon","AlertMessage","AlertAction","defaultIconMapping","Alert","React.forwardRef","inProps","ref","_ref","_slots$closeButton","_ref2","_slots$closeIcon","_slotProps$closeButto","_slotProps$closeIcon","useThemeProps","action","children","className","closeText","components","componentsProps","icon","iconMapping","onClose","role","slotProps","other","_objectWithoutPropertiesLoose","AlertCloseButton","IconButton","AlertCloseIcon","CloseIcon","closeButtonProps","closeIconProps","_jsxs","clsx","Alert$1","_interopRequireDefault","require$$0","ErrorRounded","default_1","_createSvgIcon","require$$1","_jsxRuntime","require$$2","_default","ErrorTypography","jsx","Typography","UploadedFilePreview","memo","file","onDelete","onDownload","testId","DOWNLOAD_AVAILABLE_COLOR","jsxs","Box","FileIcon","DeleteIcon","FileUploadField","uploadedFile","setUploadedFile","downloadAvailable","acceptableExtensions","errorMessage","onUpload","useCallback","files","transformFileListToFileArray","onDrop","alert","useMemo","ErrorOutlinedIcon","Fragment","FileUpload","CloudUploadIcon","createFileFormatEnumeration","UploadButton","VersionDialogForm","open","setOpen","onSubmit","control","setValue","formState","selectedWorkspace","workspaces","areWorkspacesLoading","onSetWorkspace","onSetTargetPackage","onWorkspacesFilter","arePackagesLoading","areVersionsLoading","onVersionsFilter","onPackagesFilter","packages","packagesTitle","versions","previousVersions","getVersionLabels","packagePermissions","releaseVersionPattern","isPublishing","extraValidationMassage","setSelectedPreviousVersion","title","submitButtonTittle","descriptorVersionFieldTitle","descriptorFileFieldTitle","hideCSVRelatedFields","hideDescriptorField","hideDescriptorVersionField","hideSaveMessageField","hidePreviousVersionField","hideCopyPackageFields","publishButtonDisabled","errors","workspace","useWatch","status","previousVersion","descriptorFile","isReleaseStatus","RELEASE_VERSION_STATUS","onWorkspacesChange","_","value","onPackagesChange","onVersionsChange","debouncedOnWorkspacesChange","debounce","DEFAULT_DEBOUNCE","debouncedOnPackagesChange","debouncedOnVersionsChange","descriptorContent","setDescriptorContent","useState","isFileReading","setIsFileReading","onFileContentLoaded","event","_a","useEffect","reader","showTopDivider","DialogForm","DialogTitle","DialogContent","Controller","field","TextField","checkVersionRestrictedSymbols","checkFileUpload","_b","EditIcon","ErrorRoundedIcon","Divider","Tooltip","DASHBOARD_VERSION_CONFIG_TITLE","InfoIcon","checkFileType","CSV_FILE_EXTENSION","onChange","value2","PACKAGE_SEARCH_SCOPE_TITLE","Autocomplete","option","props2","key","name","OptionItem","params","disableAutocompleteSearch","version","checkReleaseVersionFormat","checkVersionNotEqualToPrevious","getSplittedVersionKey","versionKey","createElement","ListItem","VERSION_STATUSES","VERSION_STATUS_MANAGE_PERMISSIONS","CustomChip","LabelsAutocomplete","NO_PREVIOUS_RELEASE_VERSION_OPTION","DialogActions","LoadingButton","Button","replaceEmptyPreviousVersion","EMPTY_VERSION_KEY","usePreviousVersionOptions","versionsWithoutRevision","handleVersionsRevision"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6]}